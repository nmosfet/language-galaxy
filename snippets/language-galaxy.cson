'.source.galaxy':
	'int c_alignLeft':
		prefix: 'c_alignLeft'
		body: 'c_alignLeft'
	'int c_alignTop':
		prefix: 'c_alignTop'
		body: 'c_alignTop'
	'int c_alignRight':
		prefix: 'c_alignRight'
		body: 'c_alignRight'
	'int c_alignBottom':
		prefix: 'c_alignBottom'
		body: 'c_alignBottom'
	'int c_alignCenter':
		prefix: 'c_alignCenter'
		body: 'c_alignCenter'
	'int c_anchorTopLeft':
		prefix: 'c_anchorTopLeft'
		body: 'c_anchorTopLeft'
	'int c_anchorTop':
		prefix: 'c_anchorTop'
		body: 'c_anchorTop'
	'int c_anchorTopRight':
		prefix: 'c_anchorTopRight'
		body: 'c_anchorTopRight'
	'int c_anchorLeft':
		prefix: 'c_anchorLeft'
		body: 'c_anchorLeft'
	'int c_anchorCenter':
		prefix: 'c_anchorCenter'
		body: 'c_anchorCenter'
	'int c_anchorRight':
		prefix: 'c_anchorRight'
		body: 'c_anchorRight'
	'int c_anchorBottomLeft':
		prefix: 'c_anchorBottomLeft'
		body: 'c_anchorBottomLeft'
	'int c_anchorBottom':
		prefix: 'c_anchorBottom'
		body: 'c_anchorBottom'
	'int c_anchorBottomRight':
		prefix: 'c_anchorBottomRight'
		body: 'c_anchorBottomRight'
	'int c_genderDefault':
		prefix: 'c_genderDefault'
		body: 'c_genderDefault'
	'int c_genderMale':
		prefix: 'c_genderMale'
		body: 'c_genderMale'
	'int c_genderFemale':
		prefix: 'c_genderFemale'
		body: 'c_genderFemale'
	'int c_genderNeutral':
		prefix: 'c_genderNeutral'
		body: 'c_genderNeutral'
	'int c_actorIntersectAgainstCenter':
		prefix: 'c_actorIntersectAgainstCenter'
		body: 'c_actorIntersectAgainstCenter'
	'int c_actorIntersectAgainstRadiusContact':
		prefix: 'c_actorIntersectAgainstRadiusContact'
		body: 'c_actorIntersectAgainstRadiusContact'
	'int c_actorIntersectAgainstRadiusGame':
		prefix: 'c_actorIntersectAgainstRadiusGame'
		body: 'c_actorIntersectAgainstRadiusGame'
	'int c_actorIntersectAgainstRadiusVisual':
		prefix: 'c_actorIntersectAgainstRadiusVisual'
		body: 'c_actorIntersectAgainstRadiusVisual'
	'int c_actorIntersectAgainstCenterGame':
		prefix: 'c_actorIntersectAgainstCenterGame'
		body: 'c_actorIntersectAgainstCenterGame'
	'int c_animTimeVariantAsAutomatic':
		prefix: 'c_animTimeVariantAsAutomatic'
		body: 'c_animTimeVariantAsAutomatic'
	'int c_animTimeVariantAsDuration':
		prefix: 'c_animTimeVariantAsDuration'
		body: 'c_animTimeVariantAsDuration'
	'int c_animTimeVariantAsTimeScale':
		prefix: 'c_animTimeVariantAsTimeScale'
		body: 'c_animTimeVariantAsTimeScale'
	'int c_animTransitionFlagInstant':
		prefix: 'c_animTransitionFlagInstant'
		body: 'c_animTransitionFlagInstant'
	'int c_animBracketStartFlagClosingFull':
		prefix: 'c_animBracketStartFlagClosingFull'
		body: 'c_animBracketStartFlagClosingFull'
	'int c_animBracketStartFlagContentNonLooping':
		prefix: 'c_animBracketStartFlagContentNonLooping'
		body: 'c_animBracketStartFlagContentNonLooping'
	'int c_animBracketStartFlagContentPlayOnce':
		prefix: 'c_animBracketStartFlagContentPlayOnce'
		body: 'c_animBracketStartFlagContentPlayOnce'
	'int c_animBracketStartFlagOpeningPlayForever':
		prefix: 'c_animBracketStartFlagOpeningPlayForever'
		body: 'c_animBracketStartFlagOpeningPlayForever'
	'int c_animBracketStartFlagInstant':
		prefix: 'c_animBracketStartFlagInstant'
		body: 'c_animBracketStartFlagInstant'
	'int c_animBracketStartFlagFullMatch':
		prefix: 'c_animBracketStartFlagFullMatch'
		body: 'c_animBracketStartFlagFullMatch'
	'int c_animBracketStartFlagNoMismatchQueryProps=':
		prefix: 'c_animBracketStartFlagNoMismatchQueryProps='
		body: 'c_animBracketStartFlagNoMismatchQueryProps='
	'int c_animBracketStartFlagDontResetOnUnhide':
		prefix: 'c_animBracketStartFlagDontResetOnUnhide'
		body: 'c_animBracketStartFlagDontResetOnUnhide'
	'int c_animGroupApplyFlagClosingFull':
		prefix: 'c_animGroupApplyFlagClosingFull'
		body: 'c_animGroupApplyFlagClosingFull'
	'int c_animGroupApplyFlagInstant':
		prefix: 'c_animGroupApplyFlagInstant'
		body: 'c_animGroupApplyFlagInstant'
	'int c_animFlagFullMatch':
		prefix: 'c_animFlagFullMatch'
		body: 'c_animFlagFullMatch'
	'int c_animFlagPlayForever':
		prefix: 'c_animFlagPlayForever'
		body: 'c_animFlagPlayForever'
	'int c_animFlagNonLooping':
		prefix: 'c_animFlagNonLooping'
		body: 'c_animFlagNonLooping'
	'int c_animFlagAssetDrivenLooping':
		prefix: 'c_animFlagAssetDrivenLooping'
		body: 'c_animFlagAssetDrivenLooping'
	'int c_animFlagRandomStartOffset':
		prefix: 'c_animFlagRandomStartOffset'
		body: 'c_animFlagRandomStartOffset'
	'int c_animFlagDontResetOnUnhide':
		prefix: 'c_animFlagDontResetOnUnhide'
		body: 'c_animFlagDontResetOnUnhide'
	'int c_animFlagNoMismatchQueryProps':
		prefix: 'c_animFlagNoMismatchQueryProps'
		body: 'c_animFlagNoMismatchQueryProps'
	'int c_animFlagVariationMatch':
		prefix: 'c_animFlagVariationMatch'
		body: 'c_animFlagVariationMatch'
	'int c_actorRefSpaceGlobal':
		prefix: 'c_actorRefSpaceGlobal'
		body: 'c_actorRefSpaceGlobal'
	'int c_actorRefSpaceScope':
		prefix: 'c_actorRefSpaceScope'
		body: 'c_actorRefSpaceScope'
	'int c_actorRefSpaceActor':
		prefix: 'c_actorRefSpaceActor'
		body: 'c_actorRefSpaceActor'
	'int c_actorRequestScopeImplicit':
		prefix: 'c_actorRequestScopeImplicit'
		body: 'c_actorRequestScopeImplicit'
	'int c_actorRequestScopeCaster':
		prefix: 'c_actorRequestScopeCaster'
		body: 'c_actorRequestScopeCaster'
	'int c_actorRequestScopeEffect':
		prefix: 'c_actorRequestScopeEffect'
		body: 'c_actorRequestScopeEffect'
	'int c_actorRequestScopeMissile':
		prefix: 'c_actorRequestScopeMissile'
		body: 'c_actorRequestScopeMissile'
	'int c_actorRequestScopeOuter':
		prefix: 'c_actorRequestScopeOuter'
		body: 'c_actorRequestScopeOuter'
	'int c_actorRequestScopeSource':
		prefix: 'c_actorRequestScopeSource'
		body: 'c_actorRequestScopeSource'
	'int c_actorRequestScopeTarget':
		prefix: 'c_actorRequestScopeTarget'
		body: 'c_actorRequestScopeTarget'
	'int c_actorRequestActorImplicit':
		prefix: 'c_actorRequestActorImplicit'
		body: 'c_actorRequestActorImplicit'
	'int c_actorRequestActorCreate':
		prefix: 'c_actorRequestActorCreate'
		body: 'c_actorRequestActorCreate'
	'int c_actorRequestActorFind':
		prefix: 'c_actorRequestActorFind'
		body: 'c_actorRequestActorFind'
	'int c_textureVideoPlayFlagLooping':
		prefix: 'c_textureVideoPlayFlagLooping'
		body: 'c_textureVideoPlayFlagLooping'
	'int c_textureVideoPlayFlagSynced':
		prefix: 'c_textureVideoPlayFlagSynced'
		body: 'c_textureVideoPlayFlagSynced'
	'int c_physicsDisabled':
		prefix: 'c_physicsDisabled'
		body: 'c_physicsDisabled'
	'int e_physicsKeyframed':
		prefix: 'e_physicsKeyframed'
		body: 'e_physicsKeyframed'
	'int e_physicsSimulated':
		prefix: 'e_physicsSimulated'
		body: 'e_physicsSimulated'
	'int c_actorTransitionIn':
		prefix: 'c_actorTransitionIn'
		body: 'c_actorTransitionIn'
	'int c_actorTransitionOut':
		prefix: 'c_actorTransitionOut'
		body: 'c_actorTransitionOut'
	'int c_textureSlotComponentDefault':
		prefix: 'c_textureSlotComponentDefault'
		body: 'c_textureSlotComponentDefault'
	'int c_textureSlotComponentDiffuse':
		prefix: 'c_textureSlotComponentDiffuse'
		body: 'c_textureSlotComponentDiffuse'
	'int c_textureSlotComponentEmissive':
		prefix: 'c_textureSlotComponentEmissive'
		body: 'c_textureSlotComponentEmissive'
	'int c_textureSlotComponentNormal':
		prefix: 'c_textureSlotComponentNormal'
		body: 'c_textureSlotComponentNormal'
	'int c_textureSlotComponentSpecular':
		prefix: 'c_textureSlotComponentSpecular'
		body: 'c_textureSlotComponentSpecular'
	'fixed c_animTimeDefault':
		prefix: 'c_animTimeDefault'
		body: 'c_animTimeDefault'
	'string c_animNameDefault':
		prefix: 'c_animNameDefault'
		body: 'c_animNameDefault'
	'int c_animationOffsetStart':
		prefix: 'c_animationOffsetStart'
		body: 'c_animationOffsetStart'
	'int c_animationOffsetEnd':
		prefix: 'c_animationOffsetEnd'
		body: 'c_animationOffsetEnd'
	'int c_bankOptionSignature':
		prefix: 'c_bankOptionSignature'
		body: 'c_bankOptionSignature'
	'int c_bankTypeFixed':
		prefix: 'c_bankTypeFixed'
		body: 'c_bankTypeFixed'
	'int c_bankTypeFlag':
		prefix: 'c_bankTypeFlag'
		body: 'c_bankTypeFlag'
	'int c_bankTypeInt':
		prefix: 'c_bankTypeInt'
		body: 'c_bankTypeInt'
	'int c_bankTypeString':
		prefix: 'c_bankTypeString'
		body: 'c_bankTypeString'
	'int c_bankTypeUnit':
		prefix: 'c_bankTypeUnit'
		body: 'c_bankTypeUnit'
	'int c_bankTypePoint':
		prefix: 'c_bankTypePoint'
		body: 'c_bankTypePoint'
	'int c_bankTypeText':
		prefix: 'c_bankTypeText'
		body: 'c_bankTypeText'
	'int c_invalidBattleReportId':
		prefix: 'c_invalidBattleReportId'
		body: 'c_invalidBattleReportId'
	'int c_battleReportStateNormal':
		prefix: 'c_battleReportStateNormal'
		body: 'c_battleReportStateNormal'
	'int c_battleReportStateCompleted':
		prefix: 'c_battleReportStateCompleted'
		body: 'c_battleReportStateCompleted'
	'int c_battleReportStateHidden':
		prefix: 'c_battleReportStateHidden'
		body: 'c_battleReportStateHidden'
	'int c_battleReportTypeMission':
		prefix: 'c_battleReportTypeMission'
		body: 'c_battleReportTypeMission'
	'int c_battleReportTypeScene':
		prefix: 'c_battleReportTypeScene'
		body: 'c_battleReportTypeScene'
	'int c_boardNone':
		prefix: 'c_boardNone'
		body: 'c_boardNone'
	'int c_boardColorText':
		prefix: 'c_boardColorText'
		body: 'c_boardColorText'
	'int c_boardColorBackground':
		prefix: 'c_boardColorBackground'
		body: 'c_boardColorBackground'
	'int c_boardIconPosLeft':
		prefix: 'c_boardIconPosLeft'
		body: 'c_boardIconPosLeft'
	'int c_boardIconPosRight':
		prefix: 'c_boardIconPosRight'
		body: 'c_boardIconPosRight'
	'int c_boardStateShowing':
		prefix: 'c_boardStateShowing'
		body: 'c_boardStateShowing'
	'int c_boardStateShowTitle':
		prefix: 'c_boardStateShowTitle'
		body: 'c_boardStateShowTitle'
	'int c_boardStateShowMinimize':
		prefix: 'c_boardStateShowMinimize'
		body: 'c_boardStateShowMinimize'
	'int c_boardStateMinimized':
		prefix: 'c_boardStateMinimized'
		body: 'c_boardStateMinimized'
	'int c_boardStateShowHeader':
		prefix: 'c_boardStateShowHeader'
		body: 'c_boardStateShowHeader'
	'int c_boardStateSorted':
		prefix: 'c_boardStateSorted'
		body: 'c_boardStateSorted'
	'fixed c_boardWidthAuto':
		prefix: 'c_boardWidthAuto'
		body: 'c_boardWidthAuto'
	'int c_boardColGroups':
		prefix: 'c_boardColGroups'
		body: 'c_boardColGroups'
	'int c_boardItemAll':
		prefix: 'c_boardItemAll'
		body: 'c_boardItemAll'
	'int c_boardRowHeader':
		prefix: 'c_boardRowHeader'
		body: 'c_boardRowHeader'
	'int c_cameraValueFieldOfView':
		prefix: 'c_cameraValueFieldOfView'
		body: 'c_cameraValueFieldOfView'
	'int c_cameraValueNearClip':
		prefix: 'c_cameraValueNearClip'
		body: 'c_cameraValueNearClip'
	'int c_cameraValueFarClip':
		prefix: 'c_cameraValueFarClip'
		body: 'c_cameraValueFarClip'
	'int c_cameraValueShadowClip':
		prefix: 'c_cameraValueShadowClip'
		body: 'c_cameraValueShadowClip'
	'int c_cameraValueDistance':
		prefix: 'c_cameraValueDistance'
		body: 'c_cameraValueDistance'
	'int c_cameraValuePitch':
		prefix: 'c_cameraValuePitch'
		body: 'c_cameraValuePitch'
	'int c_cameraValueYaw':
		prefix: 'c_cameraValueYaw'
		body: 'c_cameraValueYaw'
	'int c_cameraValueRoll':
		prefix: 'c_cameraValueRoll'
		body: 'c_cameraValueRoll'
	'int c_cameraValueHeightOffset':
		prefix: 'c_cameraValueHeightOffset'
		body: 'c_cameraValueHeightOffset'
	'int c_cameraValueDepthOfField':
		prefix: 'c_cameraValueDepthOfField'
		body: 'c_cameraValueDepthOfField'
	'int c_cameraValueFocalDepth':
		prefix: 'c_cameraValueFocalDepth'
		body: 'c_cameraValueFocalDepth'
	'int c_cameraValueFalloffStart':
		prefix: 'c_cameraValueFalloffStart'
		body: 'c_cameraValueFalloffStart'
	'int c_cameraValueFalloffEnd':
		prefix: 'c_cameraValueFalloffEnd'
		body: 'c_cameraValueFalloffEnd'
	'int c_cameraValueFalloffStartNear':
		prefix: 'c_cameraValueFalloffStartNear'
		body: 'c_cameraValueFalloffStartNear'
	'int c_cameraValueFalloffEndNear':
		prefix: 'c_cameraValueFalloffEndNear'
		body: 'c_cameraValueFalloffEndNear'
	'int c_cameraPositionEye':
		prefix: 'c_cameraPositionEye'
		body: 'c_cameraPositionEye'
	'int c_cameraPositionTarget':
		prefix: 'c_cameraPositionTarget'
		body: 'c_cameraPositionTarget'
	'int c_cameraPositionBoth':
		prefix: 'c_cameraPositionBoth'
		body: 'c_cameraPositionBoth'
	'int c_cameraDirectionX':
		prefix: 'c_cameraDirectionX'
		body: 'c_cameraDirectionX'
	'int c_cameraDirectionY':
		prefix: 'c_cameraDirectionY'
		body: 'c_cameraDirectionY'
	'int c_cameraDirectionZ':
		prefix: 'c_cameraDirectionZ'
		body: 'c_cameraDirectionZ'
	'int c_cameraDirectionXY':
		prefix: 'c_cameraDirectionXY'
		body: 'c_cameraDirectionXY'
	'int c_cameraDirectionXZ':
		prefix: 'c_cameraDirectionXZ'
		body: 'c_cameraDirectionXZ'
	'int c_cameraDirectionYZ':
		prefix: 'c_cameraDirectionYZ'
		body: 'c_cameraDirectionYZ'
	'int c_cameraDirectionXYZ':
		prefix: 'c_cameraDirectionXYZ'
		body: 'c_cameraDirectionXYZ'
	'int c_cameraRotationPitch':
		prefix: 'c_cameraRotationPitch'
		body: 'c_cameraRotationPitch'
	'int c_cameraRotationRoll':
		prefix: 'c_cameraRotationRoll'
		body: 'c_cameraRotationRoll'
	'int c_cameraRotationYaw':
		prefix: 'c_cameraRotationYaw'
		body: 'c_cameraRotationYaw'
	'int c_cameraMoveReasonAny':
		prefix: 'c_cameraMoveReasonAny'
		body: 'c_cameraMoveReasonAny'
	'int c_cameraMoveReasonAlert':
		prefix: 'c_cameraMoveReasonAlert'
		body: 'c_cameraMoveReasonAlert'
	'int c_cameraMoveReasonIdleWorker':
		prefix: 'c_cameraMoveReasonIdleWorker'
		body: 'c_cameraMoveReasonIdleWorker'
	'int c_cameraMoveReasonKeyScroll':
		prefix: 'c_cameraMoveReasonKeyScroll'
		body: 'c_cameraMoveReasonKeyScroll'
	'int c_cameraMoveReasonMinimap':
		prefix: 'c_cameraMoveReasonMinimap'
		body: 'c_cameraMoveReasonMinimap'
	'int c_cameraMoveReasonMouseScroll':
		prefix: 'c_cameraMoveReasonMouseScroll'
		body: 'c_cameraMoveReasonMouseScroll'
	'int c_cameraMoveReasonSelection':
		prefix: 'c_cameraMoveReasonSelection'
		body: 'c_cameraMoveReasonSelection'
	'int c_cameraMoveReasonTown':
		prefix: 'c_cameraMoveReasonTown'
		body: 'c_cameraMoveReasonTown'
	'int c_cameraMoveReasonView':
		prefix: 'c_cameraMoveReasonView'
		body: 'c_cameraMoveReasonView'
	'int c_cameraMoveReasonZoom':
		prefix: 'c_cameraMoveReasonZoom'
		body: 'c_cameraMoveReasonZoom'
	'int c_catalogFieldTypeUnknown':
		prefix: 'c_catalogFieldTypeUnknown'
		body: 'c_catalogFieldTypeUnknown'
	'int c_catalogFieldTypeStruct':
		prefix: 'c_catalogFieldTypeStruct'
		body: 'c_catalogFieldTypeStruct'
	'int c_catalogFieldTypeString':
		prefix: 'c_catalogFieldTypeString'
		body: 'c_catalogFieldTypeString'
	'int c_catalogFieldTypeEnum':
		prefix: 'c_catalogFieldTypeEnum'
		body: 'c_catalogFieldTypeEnum'
	'int c_catalogFieldTypeFixed':
		prefix: 'c_catalogFieldTypeFixed'
		body: 'c_catalogFieldTypeFixed'
	'int c_catalogFieldTypeFlags':
		prefix: 'c_catalogFieldTypeFlags'
		body: 'c_catalogFieldTypeFlags'
	'int c_catalogFieldTypeFloat':
		prefix: 'c_catalogFieldTypeFloat'
		body: 'c_catalogFieldTypeFloat'
	'int c_catalogFieldTypeFourCC':
		prefix: 'c_catalogFieldTypeFourCC'
		body: 'c_catalogFieldTypeFourCC'
	'int c_catalogFieldTypeIntSigned':
		prefix: 'c_catalogFieldTypeIntSigned'
		body: 'c_catalogFieldTypeIntSigned'
	'int c_catalogFieldTypeIntUnsigned':
		prefix: 'c_catalogFieldTypeIntUnsigned'
		body: 'c_catalogFieldTypeIntUnsigned'
	'int c_catalogFieldTypeCatalogLink':
		prefix: 'c_catalogFieldTypeCatalogLink'
		body: 'c_catalogFieldTypeCatalogLink'
	'int c_fadeStyleNormal':
		prefix: 'c_fadeStyleNormal'
		body: 'c_fadeStyleNormal'
	'int c_fadeStyleExponential':
		prefix: 'c_fadeStyleExponential'
		body: 'c_fadeStyleExponential'
	'int c_fadeStyleSine':
		prefix: 'c_fadeStyleSine'
		body: 'c_fadeStyleSine'
	'int c_fadeStyleSquareRoot':
		prefix: 'c_fadeStyleSquareRoot'
		body: 'c_fadeStyleSquareRoot'
	'int c_fixedPrecisionAny':
		prefix: 'c_fixedPrecisionAny'
		body: 'c_fixedPrecisionAny'
	'int c_formatNumberStyleNormal':
		prefix: 'c_formatNumberStyleNormal'
		body: 'c_formatNumberStyleNormal'
	'int c_formatNumberStyleCurrency':
		prefix: 'c_formatNumberStyleCurrency'
		body: 'c_formatNumberStyleCurrency'
	'int c_formatNumberStylePercent':
		prefix: 'c_formatNumberStylePercent'
		body: 'c_formatNumberStylePercent'
	'int c_colorComponentRed':
		prefix: 'c_colorComponentRed'
		body: 'c_colorComponentRed'
	'int c_colorComponentGreen':
		prefix: 'c_colorComponentGreen'
		body: 'c_colorComponentGreen'
	'int c_colorComponentBlue':
		prefix: 'c_colorComponentBlue'
		body: 'c_colorComponentBlue'
	'int c_colorComponentAlpha':
		prefix: 'c_colorComponentAlpha'
		body: 'c_colorComponentAlpha'
	'int c_invalidConversationId':
		prefix: 'c_invalidConversationId'
		body: 'c_invalidConversationId'
	'int c_invalidReplyId':
		prefix: 'c_invalidReplyId'
		body: 'c_invalidReplyId'
	'int c_conversationReplyStateUnread':
		prefix: 'c_conversationReplyStateUnread'
		body: 'c_conversationReplyStateUnread'
	'int c_conversationReplyStateRead':
		prefix: 'c_conversationReplyStateRead'
		body: 'c_conversationReplyStateRead'
	'int c_conversationReplyStateOld':
		prefix: 'c_conversationReplyStateOld'
		body: 'c_conversationReplyStateOld'
	'int c_conversationSkipNone':
		prefix: 'c_conversationSkipNone'
		body: 'c_conversationSkipNone'
	'int c_conversationSkipSimple':
		prefix: 'c_conversationSkipSimple'
		body: 'c_conversationSkipSimple'
	'int c_cutsceneNone':
		prefix: 'c_cutsceneNone'
		body: 'c_cutsceneNone'
	'int c_dataTypeUnknown':
		prefix: 'c_dataTypeUnknown'
		body: 'c_dataTypeUnknown'
	'int c_dataTypeAbilCmd':
		prefix: 'c_dataTypeAbilCmd'
		body: 'c_dataTypeAbilCmd'
	'int c_dataTypeActor':
		prefix: 'c_dataTypeActor'
		body: 'c_dataTypeActor'
	'int c_dataTypeActorScope':
		prefix: 'c_dataTypeActorScope'
		body: 'c_dataTypeActorScope'
	'int c_dataTypeAIFilter':
		prefix: 'c_dataTypeAIFilter'
		body: 'c_dataTypeAIFilter'
	'int c_dataTypeBank':
		prefix: 'c_dataTypeBank'
		body: 'c_dataTypeBank'
	'int c_dataTypeBool':
		prefix: 'c_dataTypeBool'
		body: 'c_dataTypeBool'
	'int c_dataTypeByte':
		prefix: 'c_dataTypeByte'
		body: 'c_dataTypeByte'
	'int c_dataTypeCameraInfo':
		prefix: 'c_dataTypeCameraInfo'
		body: 'c_dataTypeCameraInfo'
	'int c_dataTypeCinematic':
		prefix: 'c_dataTypeCinematic'
		body: 'c_dataTypeCinematic'
	'int c_dataTypeColor':
		prefix: 'c_dataTypeColor'
		body: 'c_dataTypeColor'
	'int c_dataTypeControl':
		prefix: 'c_dataTypeControl'
		body: 'c_dataTypeControl'
	'int c_dataTypeConversation':
		prefix: 'c_dataTypeConversation'
		body: 'c_dataTypeConversation'
	'int c_dataTypeDialog':
		prefix: 'c_dataTypeDialog'
		body: 'c_dataTypeDialog'
	'int c_dataTypeDoodad':
		prefix: 'c_dataTypeDoodad'
		body: 'c_dataTypeDoodad'
	'int c_dataTypeFixed':
		prefix: 'c_dataTypeFixed'
		body: 'c_dataTypeFixed'
	'int c_dataTypeGenericHandle':
		prefix: 'c_dataTypeGenericHandle'
		body: 'c_dataTypeGenericHandle'
	'int c_dataTypeInt':
		prefix: 'c_dataTypeInt'
		body: 'c_dataTypeInt'
	'int c_dataTypeMarker':
		prefix: 'c_dataTypeMarker'
		body: 'c_dataTypeMarker'
	'int c_dataTypeObjective':
		prefix: 'c_dataTypeObjective'
		body: 'c_dataTypeObjective'
	'int c_dataTypeOrder':
		prefix: 'c_dataTypeOrder'
		body: 'c_dataTypeOrder'
	'int c_dataTypePing':
		prefix: 'c_dataTypePing'
		body: 'c_dataTypePing'
	'int c_dataTypePlanet':
		prefix: 'c_dataTypePlanet'
		body: 'c_dataTypePlanet'
	'int c_dataTypePlayerGroup':
		prefix: 'c_dataTypePlayerGroup'
		body: 'c_dataTypePlayerGroup'
	'int c_dataTypePoint':
		prefix: 'c_dataTypePoint'
		body: 'c_dataTypePoint'
	'int c_dataTypePortrait':
		prefix: 'c_dataTypePortrait'
		body: 'c_dataTypePortrait'
	'int c_dataTypeRegion':
		prefix: 'c_dataTypeRegion'
		body: 'c_dataTypeRegion'
	'int c_dataTypeReply':
		prefix: 'c_dataTypeReply'
		body: 'c_dataTypeReply'
	'int c_dataTypeRevealer':
		prefix: 'c_dataTypeRevealer'
		body: 'c_dataTypeRevealer'
	'int c_dataTypeSound':
		prefix: 'c_dataTypeSound'
		body: 'c_dataTypeSound'
	'int c_dataTypeSoundLink':
		prefix: 'c_dataTypeSoundLink'
		body: 'c_dataTypeSoundLink'
	'int c_dataTypeString':
		prefix: 'c_dataTypeString'
		body: 'c_dataTypeString'
	'int c_dataTypeText':
		prefix: 'c_dataTypeText'
		body: 'c_dataTypeText'
	'int c_dataTypeTimer':
		prefix: 'c_dataTypeTimer'
		body: 'c_dataTypeTimer'
	'int c_dataTypeTransmission':
		prefix: 'c_dataTypeTransmission'
		body: 'c_dataTypeTransmission'
	'int c_dataTypeTransmissionSource':
		prefix: 'c_dataTypeTransmissionSource'
		body: 'c_dataTypeTransmissionSource'
	'int c_dataTypeTrigger':
		prefix: 'c_dataTypeTrigger'
		body: 'c_dataTypeTrigger'
	'int c_dataTypeUnit':
		prefix: 'c_dataTypeUnit'
		body: 'c_dataTypeUnit'
	'int c_dataTypeUnitFilter':
		prefix: 'c_dataTypeUnitFilter'
		body: 'c_dataTypeUnitFilter'
	'int c_dataTypeUnitGroup':
		prefix: 'c_dataTypeUnitGroup'
		body: 'c_dataTypeUnitGroup'
	'int c_dataTypeUnitRef':
		prefix: 'c_dataTypeUnitRef'
		body: 'c_dataTypeUnitRef'
	'int c_dataTypeWave':
		prefix: 'c_dataTypeWave'
		body: 'c_dataTypeWave'
	'int c_dataTypeWaveInfo':
		prefix: 'c_dataTypeWaveInfo'
		body: 'c_dataTypeWaveInfo'
	'int c_dataTypeWaveTarget':
		prefix: 'c_dataTypeWaveTarget'
		body: 'c_dataTypeWaveTarget'
	'int c_invalidDialogId':
		prefix: 'c_invalidDialogId'
		body: 'c_invalidDialogId'
	'int c_triggerControlTypeInvalid':
		prefix: 'c_triggerControlTypeInvalid'
		body: 'c_triggerControlTypeInvalid'
	'int c_triggerControlTypeLabel':
		prefix: 'c_triggerControlTypeLabel'
		body: 'c_triggerControlTypeLabel'
	'int c_triggerControlTypeImage':
		prefix: 'c_triggerControlTypeImage'
		body: 'c_triggerControlTypeImage'
	'int c_triggerControlTypeButton':
		prefix: 'c_triggerControlTypeButton'
		body: 'c_triggerControlTypeButton'
	'int c_triggerControlTypeCheckBox':
		prefix: 'c_triggerControlTypeCheckBox'
		body: 'c_triggerControlTypeCheckBox'
	'int c_triggerControlTypeListBox':
		prefix: 'c_triggerControlTypeListBox'
		body: 'c_triggerControlTypeListBox'
	'int c_triggerControlTypePulldown':
		prefix: 'c_triggerControlTypePulldown'
		body: 'c_triggerControlTypePulldown'
	'int c_triggerControlTypeProgressBar':
		prefix: 'c_triggerControlTypeProgressBar'
		body: 'c_triggerControlTypeProgressBar'
	'int c_triggerControlTypeSlider':
		prefix: 'c_triggerControlTypeSlider'
		body: 'c_triggerControlTypeSlider'
	'int c_triggerControlTypeEditBox':
		prefix: 'c_triggerControlTypeEditBox'
		body: 'c_triggerControlTypeEditBox'
	'int c_triggerControlTypeFlash':
		prefix: 'c_triggerControlTypeFlash'
		body: 'c_triggerControlTypeFlash'
	'int c_triggerControlTypeAchievement':
		prefix: 'c_triggerControlTypeAchievement'
		body: 'c_triggerControlTypeAchievement'
	'int c_triggerControlTypePanel':
		prefix: 'c_triggerControlTypePanel'
		body: 'c_triggerControlTypePanel'
	'int c_triggerControlTypeMovie':
		prefix: 'c_triggerControlTypeMovie'
		body: 'c_triggerControlTypeMovie'
	'int c_triggerControlTypeTooltip':
		prefix: 'c_triggerControlTypeTooltip'
		body: 'c_triggerControlTypeTooltip'
	'int c_triggerControlTypeUnitStatus':
		prefix: 'c_triggerControlTypeUnitStatus'
		body: 'c_triggerControlTypeUnitStatus'
	'int c_triggerControlTypePortrait':
		prefix: 'c_triggerControlTypePortrait'
		body: 'c_triggerControlTypePortrait'
	'int c_triggerControlTypeUnitModel':
		prefix: 'c_triggerControlTypeUnitModel'
		body: 'c_triggerControlTypeUnitModel'
	'int c_triggerControlTypeOffscreenUnit':
		prefix: 'c_triggerControlTypeOffscreenUnit'
		body: 'c_triggerControlTypeOffscreenUnit'
	'int c_triggerControlTypeUnitTarget':
		prefix: 'c_triggerControlTypeUnitTarget'
		body: 'c_triggerControlTypeUnitTarget'
	'int c_triggerControlTypeUnitStatusBar':
		prefix: 'c_triggerControlTypeUnitStatusBar'
		body: 'c_triggerControlTypeUnitStatusBar'
	'int c_triggerControlTypeUnitStatusDurationBar':
		prefix: 'c_triggerControlTypeUnitStatusDurationBar'
		body: 'c_triggerControlTypeUnitStatusDurationBar'
	'int c_triggerControlTypeCutscene':
		prefix: 'c_triggerControlTypeCutscene'
		body: 'c_triggerControlTypeCutscene'
	'int c_triggerControlTypeCommandPanel':
		prefix: 'c_triggerControlTypeCommandPanel'
		body: 'c_triggerControlTypeCommandPanel'
	'int c_triggerControlTypeHeroCutscene':
		prefix: 'c_triggerControlTypeHeroCutscene'
		body: 'c_triggerControlTypeHeroCutscene'
	'int c_triggerControlTypeCountdownLabel':
		prefix: 'c_triggerControlTypeCountdownLabel'
		body: 'c_triggerControlTypeCountdownLabel'
	'int c_triggerControlTypeUnitStatusLabel':
		prefix: 'c_triggerControlTypeUnitStatusLabel'
		body: 'c_triggerControlTypeUnitStatusLabel'
	'int c_triggerControlTypeScoreValueFrame':
		prefix: 'c_triggerControlTypeScoreValueFrame'
		body: 'c_triggerControlTypeScoreValueFrame'
	'int c_triggerControlPropertyInvalid':
		prefix: 'c_triggerControlPropertyInvalid'
		body: 'c_triggerControlPropertyInvalid'
	'int c_triggerControlPropertyText':
		prefix: 'c_triggerControlPropertyText'
		body: 'c_triggerControlPropertyText'
	'int c_triggerControlPropertyStyle':
		prefix: 'c_triggerControlPropertyStyle'
		body: 'c_triggerControlPropertyStyle'
	'int c_triggerControlPropertyImage':
		prefix: 'c_triggerControlPropertyImage'
		body: 'c_triggerControlPropertyImage'
	'int c_triggerControlPropertyImageType':
		prefix: 'c_triggerControlPropertyImageType'
		body: 'c_triggerControlPropertyImageType'
	'int c_triggerControlPropertyColor':
		prefix: 'c_triggerControlPropertyColor'
		body: 'c_triggerControlPropertyColor'
	'int c_triggerControlPropertyChecked':
		prefix: 'c_triggerControlPropertyChecked'
		body: 'c_triggerControlPropertyChecked'
	'int c_triggerControlPropertyMinValue':
		prefix: 'c_triggerControlPropertyMinValue'
		body: 'c_triggerControlPropertyMinValue'
	'int c_triggerControlPropertyMaxValue':
		prefix: 'c_triggerControlPropertyMaxValue'
		body: 'c_triggerControlPropertyMaxValue'
	'int c_triggerControlPropertyValue':
		prefix: 'c_triggerControlPropertyValue'
		body: 'c_triggerControlPropertyValue'
	'int c_triggerControlPropertyTooltip':
		prefix: 'c_triggerControlPropertyTooltip'
		body: 'c_triggerControlPropertyTooltip'
	'int c_triggerControlPropertyVisible':
		prefix: 'c_triggerControlPropertyVisible'
		body: 'c_triggerControlPropertyVisible'
	'int c_triggerControlPropertyEnabled':
		prefix: 'c_triggerControlPropertyEnabled'
		body: 'c_triggerControlPropertyEnabled'
	'int c_triggerControlPropertyWidth':
		prefix: 'c_triggerControlPropertyWidth'
		body: 'c_triggerControlPropertyWidth'
	'int c_triggerControlPropertyHeight':
		prefix: 'c_triggerControlPropertyHeight'
		body: 'c_triggerControlPropertyHeight'
	'int c_triggerControlPropertyAnchor':
		prefix: 'c_triggerControlPropertyAnchor'
		body: 'c_triggerControlPropertyAnchor'
	'int c_triggerControlPropertyRelative':
		prefix: 'c_triggerControlPropertyRelative'
		body: 'c_triggerControlPropertyRelative'
	'int c_triggerControlPropertyRelativeAnchor':
		prefix: 'c_triggerControlPropertyRelativeAnchor'
		body: 'c_triggerControlPropertyRelativeAnchor'
	'int c_triggerControlPropertyOffsetX':
		prefix: 'c_triggerControlPropertyOffsetX'
		body: 'c_triggerControlPropertyOffsetX'
	'int c_triggerControlPropertyOffsetY':
		prefix: 'c_triggerControlPropertyOffsetY'
		body: 'c_triggerControlPropertyOffsetY'
	'int c_triggerControlPropertyEditText':
		prefix: 'c_triggerControlPropertyEditText'
		body: 'c_triggerControlPropertyEditText'
	'int c_triggerControlPropertyItemCount':
		prefix: 'c_triggerControlPropertyItemCount'
		body: 'c_triggerControlPropertyItemCount'
	'int c_triggerControlPropertySelectionIndex':
		prefix: 'c_triggerControlPropertySelectionIndex'
		body: 'c_triggerControlPropertySelectionIndex'
	'int c_triggerControlPropertyFile':
		prefix: 'c_triggerControlPropertyFile'
		body: 'c_triggerControlPropertyFile'
	'int c_triggerControlPropertyOffscreen':
		prefix: 'c_triggerControlPropertyOffscreen'
		body: 'c_triggerControlPropertyOffscreen'
	'int c_triggerControlPropertyChannel':
		prefix: 'c_triggerControlPropertyChannel'
		body: 'c_triggerControlPropertyChannel'
	'int c_triggerControlPropertyFullDialog':
		prefix: 'c_triggerControlPropertyFullDialog'
		body: 'c_triggerControlPropertyFullDialog'
	'int c_triggerControlPropertyTextWriteout':
		prefix: 'c_triggerControlPropertyTextWriteout'
		body: 'c_triggerControlPropertyTextWriteout'
	'int c_triggerControlPropertyTextWriteoutDuration':
		prefix: 'c_triggerControlPropertyTextWriteoutDuration'
		body: 'c_triggerControlPropertyTextWriteoutDuration'
	'int c_triggerControlPropertyBlendMode':
		prefix: 'c_triggerControlPropertyBlendMode'
		body: 'c_triggerControlPropertyBlendMode'
	'int c_triggerControlPropertyHoverImage':
		prefix: 'c_triggerControlPropertyHoverImage'
		body: 'c_triggerControlPropertyHoverImage'
	'int c_triggerControlPropertyTiled':
		prefix: 'c_triggerControlPropertyTiled'
		body: 'c_triggerControlPropertyTiled'
	'int c_triggerControlPropertyRotation':
		prefix: 'c_triggerControlPropertyRotation'
		body: 'c_triggerControlPropertyRotation'
	'int c_triggerControlPropertyAchievement':
		prefix: 'c_triggerControlPropertyAchievement'
		body: 'c_triggerControlPropertyAchievement'
	'int c_triggerControlPropertyRenderPriority':
		prefix: 'c_triggerControlPropertyRenderPriority'
		body: 'c_triggerControlPropertyRenderPriority'
	'int c_triggerControlPropertyClickOnDown':
		prefix: 'c_triggerControlPropertyClickOnDown'
		body: 'c_triggerControlPropertyClickOnDown'
	'int c_triggerControlPropertyDesaturated':
		prefix: 'c_triggerControlPropertyDesaturated'
		body: 'c_triggerControlPropertyDesaturated'
	'int c_triggerControlPropertyDesaturationColor':
		prefix: 'c_triggerControlPropertyDesaturationColor'
		body: 'c_triggerControlPropertyDesaturationColor'
	'int c_triggerControlPropertyCustomTooltip':
		prefix: 'c_triggerControlPropertyCustomTooltip'
		body: 'c_triggerControlPropertyCustomTooltip'
	'int c_triggerControlPropertyUnit':
		prefix: 'c_triggerControlPropertyUnit'
		body: 'c_triggerControlPropertyUnit'
	'int c_triggerControlPropertyToggled':
		prefix: 'c_triggerControlPropertyToggled'
		body: 'c_triggerControlPropertyToggled'
	'int c_triggerControlPropertyModel':
		prefix: 'c_triggerControlPropertyModel'
		body: 'c_triggerControlPropertyModel'
	'int c_triggerControlPropertyAnim':
		prefix: 'c_triggerControlPropertyAnim'
		body: 'c_triggerControlPropertyAnim'
	'int c_triggerControlPropertyCamera':
		prefix: 'c_triggerControlPropertyCamera'
		body: 'c_triggerControlPropertyCamera'
	'int c_triggerControlPropertyBorderVisible':
		prefix: 'c_triggerControlPropertyBorderVisible'
		body: 'c_triggerControlPropertyBorderVisible'
	'int c_triggerControlPropertyBorderImage':
		prefix: 'c_triggerControlPropertyBorderImage'
		body: 'c_triggerControlPropertyBorderImage'
	'int c_triggerControlPropertyBackgroundVisible':
		prefix: 'c_triggerControlPropertyBackgroundVisible'
		body: 'c_triggerControlPropertyBackgroundVisible'
	'int c_triggerControlPropertyUseTransition':
		prefix: 'c_triggerControlPropertyUseTransition'
		body: 'c_triggerControlPropertyUseTransition'
	'int c_triggerControlPropertyMuted':
		prefix: 'c_triggerControlPropertyMuted'
		body: 'c_triggerControlPropertyMuted'
	'int c_triggerControlPropertyPaused':
		prefix: 'c_triggerControlPropertyPaused'
		body: 'c_triggerControlPropertyPaused'
	'int c_triggerControlPropertyAcceptMouseTarget':
		prefix: 'c_triggerControlPropertyAcceptMouseTarget'
		body: 'c_triggerControlPropertyAcceptMouseTarget'
	'int c_triggerControlPropertyTintColor':
		prefix: 'c_triggerControlPropertyTintColor'
		body: 'c_triggerControlPropertyTintColor'
	'int c_triggerControlPropertyTeamColor':
		prefix: 'c_triggerControlPropertyTeamColor'
		body: 'c_triggerControlPropertyTeamColor'
	'int c_triggerControlPropertyLight':
		prefix: 'c_triggerControlPropertyLight'
		body: 'c_triggerControlPropertyLight'
	'int c_triggerControlPropertyTransitionModel':
		prefix: 'c_triggerControlPropertyTransitionModel'
		body: 'c_triggerControlPropertyTransitionModel'
	'int c_triggerControlPropertyForceVisible':
		prefix: 'c_triggerControlPropertyForceVisible'
		body: 'c_triggerControlPropertyForceVisible'
	'int c_triggerControlPropertyRenderType':
		prefix: 'c_triggerControlPropertyRenderType'
		body: 'c_triggerControlPropertyRenderType'
	'int c_triggerControlPropertyUnitLink':
		prefix: 'c_triggerControlPropertyUnitLink'
		body: 'c_triggerControlPropertyUnitLink'
	'int c_triggerControlPropertyAlpha':
		prefix: 'c_triggerControlPropertyAlpha'
		body: 'c_triggerControlPropertyAlpha'
	'int c_triggerControlPropertyTeamColorIndex':
		prefix: 'c_triggerControlPropertyTeamColorIndex'
		body: 'c_triggerControlPropertyTeamColorIndex'
	'int c_triggerControlPropertyAnimDuration':
		prefix: 'c_triggerControlPropertyAnimDuration'
		body: 'c_triggerControlPropertyAnimDuration'
	'int c_triggerControlPropertyAnimTime':
		prefix: 'c_triggerControlPropertyAnimTime'
		body: 'c_triggerControlPropertyAnimTime'
	'int c_triggerControlPropertyActor':
		prefix: 'c_triggerControlPropertyActor'
		body: 'c_triggerControlPropertyActor'
	'int c_triggerControlPropertyBehavior':
		prefix: 'c_triggerControlPropertyBehavior'
		body: 'c_triggerControlPropertyBehavior'
	'int c_triggerControlPropertyHotkey':
		prefix: 'c_triggerControlPropertyHotkey'
		body: 'c_triggerControlPropertyHotkey'
	'int c_triggerControlPropertyAllowedButtons':
		prefix: 'c_triggerControlPropertyAllowedButtons'
		body: 'c_triggerControlPropertyAllowedButtons'
	'int c_triggerControlPropertyAlphaMask':
		prefix: 'c_triggerControlPropertyAlphaMask'
		body: 'c_triggerControlPropertyAlphaMask'
	'int c_triggerControlPropertyAnimIndex':
		prefix: 'c_triggerControlPropertyAnimIndex'
		body: 'c_triggerControlPropertyAnimIndex'
	'int c_triggerControlPropertyUseAspectUncorrection':
		prefix: 'c_triggerControlPropertyUseAspectUncorrection'
		body: 'c_triggerControlPropertyUseAspectUncorrection'
	'int c_triggerControlPropertyHandle':
		prefix: 'c_triggerControlPropertyHandle'
		body: 'c_triggerControlPropertyHandle'
	'int c_triggerControlPropertyBorderColor':
		prefix: 'c_triggerControlPropertyBorderColor'
		body: 'c_triggerControlPropertyBorderColor'
	'int c_triggerControlPropertyFillColor':
		prefix: 'c_triggerControlPropertyFillColor'
		body: 'c_triggerControlPropertyFillColor'
	'int c_triggerControlPropertySubmenu':
		prefix: 'c_triggerControlPropertySubmenu'
		body: 'c_triggerControlPropertySubmenu'
	'int c_triggerControlPropertyUnitGroup':
		prefix: 'c_triggerControlPropertyUnitGroup'
		body: 'c_triggerControlPropertyUnitGroup'
	'int c_triggerControlPropertyPlayerId':
		prefix: 'c_triggerControlPropertyPlayerId'
		body: 'c_triggerControlPropertyPlayerId'
	'int c_triggerControlPropertyScoreValueLink':
		prefix: 'c_triggerControlPropertyScoreValueLink'
		body: 'c_triggerControlPropertyScoreValueLink'
	'int c_triggerControlPropertyStateIndex':
		prefix: 'c_triggerControlPropertyStateIndex'
		body: 'c_triggerControlPropertyStateIndex'
	'int c_triggerImageTypeNone':
		prefix: 'c_triggerImageTypeNone'
		body: 'c_triggerImageTypeNone'
	'int c_triggerImageTypeNormal':
		prefix: 'c_triggerImageTypeNormal'
		body: 'c_triggerImageTypeNormal'
	'int c_triggerImageTypeBorder':
		prefix: 'c_triggerImageTypeBorder'
		body: 'c_triggerImageTypeBorder'
	'int c_triggerImageTypeHorizontalBorder':
		prefix: 'c_triggerImageTypeHorizontalBorder'
		body: 'c_triggerImageTypeHorizontalBorder'
	'int c_triggerImageTypeEndCap':
		prefix: 'c_triggerImageTypeEndCap'
		body: 'c_triggerImageTypeEndCap'
	'int c_triggerImageTypeNineSlice':
		prefix: 'c_triggerImageTypeNineSlice'
		body: 'c_triggerImageTypeNineSlice'
	'int c_triggerImageTypeCircular':
		prefix: 'c_triggerImageTypeCircular'
		body: 'c_triggerImageTypeCircular'
	'int c_triggerRenderTypeHDR':
		prefix: 'c_triggerRenderTypeHDR'
		body: 'c_triggerRenderTypeHDR'
	'int c_triggerRenderTypeLDR':
		prefix: 'c_triggerRenderTypeLDR'
		body: 'c_triggerRenderTypeLDR'
	'int c_triggerBlendModeNormal':
		prefix: 'c_triggerBlendModeNormal'
		body: 'c_triggerBlendModeNormal'
	'int c_triggerBlendModeMultiply':
		prefix: 'c_triggerBlendModeMultiply'
		body: 'c_triggerBlendModeMultiply'
	'int c_triggerBlendModeLighten':
		prefix: 'c_triggerBlendModeLighten'
		body: 'c_triggerBlendModeLighten'
	'int c_triggerBlendModeDarken':
		prefix: 'c_triggerBlendModeDarken'
		body: 'c_triggerBlendModeDarken'
	'int c_triggerBlendModeAdd':
		prefix: 'c_triggerBlendModeAdd'
		body: 'c_triggerBlendModeAdd'
	'int c_triggerBlendModeSubtract':
		prefix: 'c_triggerBlendModeSubtract'
		body: 'c_triggerBlendModeSubtract'
	'int c_triggerBlendModeAlpha':
		prefix: 'c_triggerBlendModeAlpha'
		body: 'c_triggerBlendModeAlpha'
	'int c_triggerObservedTypeDefaultObservedPlayerId':
		prefix: 'c_triggerObservedTypeDefaultObservedPlayerId'
		body: 'c_triggerObservedTypeDefaultObservedPlayerId'
	'int c_triggerObservedTypeObservedPlayerId':
		prefix: 'c_triggerObservedTypeObservedPlayerId'
		body: 'c_triggerObservedTypeObservedPlayerId'
	'int c_triggerObservedTypeObservedOrSelectedPlayerId':
		prefix: 'c_triggerObservedTypeObservedOrSelectedPlayerId'
		body: 'c_triggerObservedTypeObservedOrSelectedPlayerId'
	'int c_triggerObservedTypeSelectedOrObservedPlayerId':
		prefix: 'c_triggerObservedTypeSelectedOrObservedPlayerId'
		body: 'c_triggerObservedTypeSelectedOrObservedPlayerId'
	'int c_invalidDialogControlId':
		prefix: 'c_invalidDialogControlId'
		body: 'c_invalidDialogControlId'
	'int c_dialogControlItemNone':
		prefix: 'c_dialogControlItemNone'
		body: 'c_dialogControlItemNone'
	'int c_dialogControlAny':
		prefix: 'c_dialogControlAny'
		body: 'c_dialogControlAny'
	'int c_triggerControlEventTypeAny':
		prefix: 'c_triggerControlEventTypeAny'
		body: 'c_triggerControlEventTypeAny'
	'int c_triggerControlEventTypeClick':
		prefix: 'c_triggerControlEventTypeClick'
		body: 'c_triggerControlEventTypeClick'
	'int c_triggerControlEventTypeChecked':
		prefix: 'c_triggerControlEventTypeChecked'
		body: 'c_triggerControlEventTypeChecked'
	'int c_triggerControlEventTypeValueChanged':
		prefix: 'c_triggerControlEventTypeValueChanged'
		body: 'c_triggerControlEventTypeValueChanged'
	'int c_triggerControlEventTypeSelectionChanged':
		prefix: 'c_triggerControlEventTypeSelectionChanged'
		body: 'c_triggerControlEventTypeSelectionChanged'
	'int c_triggerControlEventTypeSelectionDoubleClicked':
		prefix: 'c_triggerControlEventTypeSelectionDoubleClicked'
		body: 'c_triggerControlEventTypeSelectionDoubleClicked'
	'int c_triggerControlEventTypeTextChanged':
		prefix: 'c_triggerControlEventTypeTextChanged'
		body: 'c_triggerControlEventTypeTextChanged'
	'int c_triggerControlEventTypeMouseEnter':
		prefix: 'c_triggerControlEventTypeMouseEnter'
		body: 'c_triggerControlEventTypeMouseEnter'
	'int c_triggerControlEventTypeMouseExit':
		prefix: 'c_triggerControlEventTypeMouseExit'
		body: 'c_triggerControlEventTypeMouseExit'
	'int c_triggerControlEventTypeHotkeyPressed':
		prefix: 'c_triggerControlEventTypeHotkeyPressed'
		body: 'c_triggerControlEventTypeHotkeyPressed'
	'int c_triggerControlEventTypeDoubleClick':
		prefix: 'c_triggerControlEventTypeDoubleClick'
		body: 'c_triggerControlEventTypeDoubleClick'
	'int c_effectHistoryEffectRoot':
		prefix: 'c_effectHistoryEffectRoot'
		body: 'c_effectHistoryEffectRoot'
	'int c_effectHistoryEffectCurrent':
		prefix: 'c_effectHistoryEffectCurrent'
		body: 'c_effectHistoryEffectCurrent'
	'int c_creepSpeedGrowth':
		prefix: 'c_creepSpeedGrowth'
		body: 'c_creepSpeedGrowth'
	'int c_creepSpeedDecay':
		prefix: 'c_creepSpeedDecay'
		body: 'c_creepSpeedDecay'
	'int c_creepSpeedBlend':
		prefix: 'c_creepSpeedBlend'
		body: 'c_creepSpeedBlend'
	'int c_pathingUnpathable':
		prefix: 'c_pathingUnpathable'
		body: 'c_pathingUnpathable'
	'int c_pathingGround':
		prefix: 'c_pathingGround'
		body: 'c_pathingGround'
	'int c_pathingBuilding':
		prefix: 'c_pathingBuilding'
		body: 'c_pathingBuilding'
	'int c_pathingCliff':
		prefix: 'c_pathingCliff'
		body: 'c_pathingCliff'
	'int c_backgroundFixed':
		prefix: 'c_backgroundFixed'
		body: 'c_backgroundFixed'
	'int c_backgroundTerrain':
		prefix: 'c_backgroundTerrain'
		body: 'c_backgroundTerrain'
	'int c_wtcLinear':
		prefix: 'c_wtcLinear'
		body: 'c_wtcLinear'
	'int c_wtcSine':
		prefix: 'c_wtcSine'
		body: 'c_wtcSine'
	'int c_wtcExponential':
		prefix: 'c_wtcExponential'
		body: 'c_wtcExponential'
	'int c_wtcSquareRoot':
		prefix: 'c_wtcSquareRoot'
		body: 'c_wtcSquareRoot'
	'int c_environmentAll':
		prefix: 'c_environmentAll'
		body: 'c_environmentAll'
	'int c_environmentTerrain':
		prefix: 'c_environmentTerrain'
		body: 'c_environmentTerrain'
	'int c_environmentWater':
		prefix: 'c_environmentWater'
		body: 'c_environmentWater'
	'int c_environmentDoodads':
		prefix: 'c_environmentDoodads'
		body: 'c_environmentDoodads'
	'int c_environmentBackgroundFixed':
		prefix: 'c_environmentBackgroundFixed'
		body: 'c_environmentBackgroundFixed'
	'int c_environmentBackgroundTerrain':
		prefix: 'c_environmentBackgroundTerrain'
		body: 'c_environmentBackgroundTerrain'
	'int c_gameSpeedSlower':
		prefix: 'c_gameSpeedSlower'
		body: 'c_gameSpeedSlower'
	'int c_gameSpeedSlow':
		prefix: 'c_gameSpeedSlow'
		body: 'c_gameSpeedSlow'
	'int c_gameSpeedNormal':
		prefix: 'c_gameSpeedNormal'
		body: 'c_gameSpeedNormal'
	'int c_gameSpeedFast':
		prefix: 'c_gameSpeedFast'
		body: 'c_gameSpeedFast'
	'int c_gameSpeedFaster':
		prefix: 'c_gameSpeedFaster'
		body: 'c_gameSpeedFaster'
	'int c_gameCheatAny':
		prefix: 'c_gameCheatAny'
		body: 'c_gameCheatAny'
	'int c_gameCheatCooldown':
		prefix: 'c_gameCheatCooldown'
		body: 'c_gameCheatCooldown'
	'int c_gameCheatDefeat':
		prefix: 'c_gameCheatDefeat'
		body: 'c_gameCheatDefeat'
	'int c_gameCheatFastBuild':
		prefix: 'c_gameCheatFastBuild'
		body: 'c_gameCheatFastBuild'
	'int c_gameCheatFastHeal':
		prefix: 'c_gameCheatFastHeal'
		body: 'c_gameCheatFastHeal'
	'int c_gameCheatFood':
		prefix: 'c_gameCheatFood'
		body: 'c_gameCheatFood'
	'int c_gameCheatFree':
		prefix: 'c_gameCheatFree'
		body: 'c_gameCheatFree'
	'int c_gameCheatGimme':
		prefix: 'c_gameCheatGimme'
		body: 'c_gameCheatGimme'
	'int c_gameCheatGod':
		prefix: 'c_gameCheatGod'
		body: 'c_gameCheatGod'
	'int c_gameCheatMinerals':
		prefix: 'c_gameCheatMinerals'
		body: 'c_gameCheatMinerals'
	'int c_gameCheatNoDefeat':
		prefix: 'c_gameCheatNoDefeat'
		body: 'c_gameCheatNoDefeat'
	'int c_gameCheatNoVictory':
		prefix: 'c_gameCheatNoVictory'
		body: 'c_gameCheatNoVictory'
	'int c_gameCheatResourceCustom':
		prefix: 'c_gameCheatResourceCustom'
		body: 'c_gameCheatResourceCustom'
	'int c_gameCheatShowmap':
		prefix: 'c_gameCheatShowmap'
		body: 'c_gameCheatShowmap'
	'int c_gameCheatTechTree':
		prefix: 'c_gameCheatTechTree'
		body: 'c_gameCheatTechTree'
	'int c_gameCheatTerrazine':
		prefix: 'c_gameCheatTerrazine'
		body: 'c_gameCheatTerrazine'
	'int c_gameCheatTimeOfDay':
		prefix: 'c_gameCheatTimeOfDay'
		body: 'c_gameCheatTimeOfDay'
	'int c_gameCheatUpgrade':
		prefix: 'c_gameCheatUpgrade'
		body: 'c_gameCheatUpgrade'
	'int c_gameCheatVespene':
		prefix: 'c_gameCheatVespene'
		body: 'c_gameCheatVespene'
	'int c_gameCheatVictory':
		prefix: 'c_gameCheatVictory'
		body: 'c_gameCheatVictory'
	'int c_gameCheatProgress':
		prefix: 'c_gameCheatProgress'
		body: 'c_gameCheatProgress'
	'int c_gameCheatScene':
		prefix: 'c_gameCheatScene'
		body: 'c_gameCheatScene'
	'int c_gameCheatTV':
		prefix: 'c_gameCheatTV'
		body: 'c_gameCheatTV'
	'int c_gameCheatCredits':
		prefix: 'c_gameCheatCredits'
		body: 'c_gameCheatCredits'
	'int c_gameCheatResearch':
		prefix: 'c_gameCheatResearch'
		body: 'c_gameCheatResearch'
	'int c_gameCheatLast':
		prefix: 'c_gameCheatLast'
		body: 'c_gameCheatLast'
	'int c_gameCheatCategoryPublic':
		prefix: 'c_gameCheatCategoryPublic'
		body: 'c_gameCheatCategoryPublic'
	'int c_gameCheatCategoryDevelopment':
		prefix: 'c_gameCheatCategoryDevelopment'
		body: 'c_gameCheatCategoryDevelopment'
	'int c_cmdNotEnoughFood':
		prefix: 'c_cmdNotEnoughFood'
		body: 'c_cmdNotEnoughFood'
	'int c_gameOverVictory':
		prefix: 'c_gameOverVictory'
		body: 'c_gameOverVictory'
	'int c_gameOverDefeat':
		prefix: 'c_gameOverDefeat'
		body: 'c_gameOverDefeat'
	'int c_gameOverTie':
		prefix: 'c_gameOverTie'
		body: 'c_gameOverTie'
	'int c_meleeOptionReveal':
		prefix: 'c_meleeOptionReveal'
		body: 'c_meleeOptionReveal'
	'int c_meleeOptionDefeat':
		prefix: 'c_meleeOptionDefeat'
		body: 'c_meleeOptionDefeat'
	'int c_meleeOptionVictory':
		prefix: 'c_meleeOptionVictory'
		body: 'c_meleeOptionVictory'
	'int c_meleeOptionStalemate':
		prefix: 'c_meleeOptionStalemate'
		body: 'c_meleeOptionStalemate'
	'int c_meleeOptionXPGainDisable':
		prefix: 'c_meleeOptionXPGainDisable'
		body: 'c_meleeOptionXPGainDisable'
	'int c_meleeOptionSplitResources':
		prefix: 'c_meleeOptionSplitResources'
		body: 'c_meleeOptionSplitResources'
	'int c_meleeOptionPoints':
		prefix: 'c_meleeOptionPoints'
		body: 'c_meleeOptionPoints'
	'int c_invalidMercenaryId':
		prefix: 'c_invalidMercenaryId'
		body: 'c_invalidMercenaryId'
	'int c_mercenaryStateEnabled':
		prefix: 'c_mercenaryStateEnabled'
		body: 'c_mercenaryStateEnabled'
	'int c_mercenaryStateDisabled':
		prefix: 'c_mercenaryStateDisabled'
		body: 'c_mercenaryStateDisabled'
	'int c_mercenaryStatePurchased':
		prefix: 'c_mercenaryStatePurchased'
		body: 'c_mercenaryStatePurchased'
	'int c_mercenaryStateHidden':
		prefix: 'c_mercenaryStateHidden'
		body: 'c_mercenaryStateHidden'
	'int c_mercenaryStateNew':
		prefix: 'c_mercenaryStateNew'
		body: 'c_mercenaryStateNew'
	'int c_invalidObjectiveId':
		prefix: 'c_invalidObjectiveId'
		body: 'c_invalidObjectiveId'
	'int c_primaryObjectivesId':
		prefix: 'c_primaryObjectivesId'
		body: 'c_primaryObjectivesId'
	'int c_secondaryObjectivesId':
		prefix: 'c_secondaryObjectivesId'
		body: 'c_secondaryObjectivesId'
	'int c_objectiveStateUnknown':
		prefix: 'c_objectiveStateUnknown'
		body: 'c_objectiveStateUnknown'
	'int c_objectiveStateHidden':
		prefix: 'c_objectiveStateHidden'
		body: 'c_objectiveStateHidden'
	'int c_objectiveStateActive':
		prefix: 'c_objectiveStateActive'
		body: 'c_objectiveStateActive'
	'int c_objectiveStateCompleted':
		prefix: 'c_objectiveStateCompleted'
		body: 'c_objectiveStateCompleted'
	'int c_objectiveStateFailed':
		prefix: 'c_objectiveStateFailed'
		body: 'c_objectiveStateFailed'
	'int c_cmdActionNone':
		prefix: 'c_cmdActionNone'
		body: 'c_cmdActionNone'
	'int c_cmdActionInstant':
		prefix: 'c_cmdActionInstant'
		body: 'c_cmdActionInstant'
	'int c_cmdActionTarget':
		prefix: 'c_cmdActionTarget'
		body: 'c_cmdActionTarget'
	'int c_orderTargetNone':
		prefix: 'c_orderTargetNone'
		body: 'c_orderTargetNone'
	'int c_orderTargetPoint':
		prefix: 'c_orderTargetPoint'
		body: 'c_orderTargetPoint'
	'int c_orderTargetUnit':
		prefix: 'c_orderTargetUnit'
		body: 'c_orderTargetUnit'
	'int c_orderTargetItem':
		prefix: 'c_orderTargetItem'
		body: 'c_orderTargetItem'
	'int c_invalidPathId':
		prefix: 'c_invalidPathId'
		body: 'c_invalidPathId'
	'int c_pathLocationAll':
		prefix: 'c_pathLocationAll'
		body: 'c_pathLocationAll'
	'int c_abilClassFilterExcluded':
		prefix: 'c_abilClassFilterExcluded'
		body: 'c_abilClassFilterExcluded'
	'int c_abilClassFilterAllowed':
		prefix: 'c_abilClassFilterAllowed'
		body: 'c_abilClassFilterAllowed'
	'int c_abilClassFilterRequired':
		prefix: 'c_abilClassFilterRequired'
		body: 'c_abilClassFilterRequired'
	'int c_invalidPingId':
		prefix: 'c_invalidPingId'
		body: 'c_invalidPingId'
	'int c_invalidPlanetId':
		prefix: 'c_invalidPlanetId'
		body: 'c_invalidPlanetId'
	'int c_invalidMissionId':
		prefix: 'c_invalidMissionId'
		body: 'c_invalidMissionId'
	'int c_planetStateHidden':
		prefix: 'c_planetStateHidden'
		body: 'c_planetStateHidden'
	'int c_planetStateActive':
		prefix: 'c_planetStateActive'
		body: 'c_planetStateActive'
	'int c_planetStateEmphasized':
		prefix: 'c_planetStateEmphasized'
		body: 'c_planetStateEmphasized'
	'int c_planetPanelContactButtonStateDisabled':
		prefix: 'c_planetPanelContactButtonStateDisabled'
		body: 'c_planetPanelContactButtonStateDisabled'
	'int c_planetPanelContactButtonStateBlinking':
		prefix: 'c_planetPanelContactButtonStateBlinking'
		body: 'c_planetPanelContactButtonStateBlinking'
	'int c_planetPanelContactButtonStatePlay':
		prefix: 'c_planetPanelContactButtonStatePlay'
		body: 'c_planetPanelContactButtonStatePlay'
	'int c_planetPanelContactButtonStatePause':
		prefix: 'c_planetPanelContactButtonStatePause'
		body: 'c_planetPanelContactButtonStatePause'
	'int c_planetPanelContactButtonStateOff':
		prefix: 'c_planetPanelContactButtonStateOff'
		body: 'c_planetPanelContactButtonStateOff'
	'int c_helpPanelPageTips':
		prefix: 'c_helpPanelPageTips'
		body: 'c_helpPanelPageTips'
	'int c_helpPanelPageTutorials':
		prefix: 'c_helpPanelPageTutorials'
		body: 'c_helpPanelPageTutorials'
	'int c_invalidHelpItemId':
		prefix: 'c_invalidHelpItemId'
		body: 'c_invalidHelpItemId'
	'int c_playerAny':
		prefix: 'c_playerAny'
		body: 'c_playerAny'
	'int c_maxPlayers':
		prefix: 'c_maxPlayers'
		body: 'c_maxPlayers'
	'int c_playerPropMinerals':
		prefix: 'c_playerPropMinerals'
		body: 'c_playerPropMinerals'
	'int c_playerPropVespene':
		prefix: 'c_playerPropVespene'
		body: 'c_playerPropVespene'
	'int c_playerPropTerrazine':
		prefix: 'c_playerPropTerrazine'
		body: 'c_playerPropTerrazine'
	'int c_playerPropCustom':
		prefix: 'c_playerPropCustom'
		body: 'c_playerPropCustom'
	'int c_playerPropSuppliesUsed':
		prefix: 'c_playerPropSuppliesUsed'
		body: 'c_playerPropSuppliesUsed'
	'int c_playerPropSuppliesMade':
		prefix: 'c_playerPropSuppliesMade'
		body: 'c_playerPropSuppliesMade'
	'int c_playerPropSuppliesLimit':
		prefix: 'c_playerPropSuppliesLimit'
		body: 'c_playerPropSuppliesLimit'
	'int c_playerPropCredits':
		prefix: 'c_playerPropCredits'
		body: 'c_playerPropCredits'
	'int c_playerPropCreditsSpent':
		prefix: 'c_playerPropCreditsSpent'
		body: 'c_playerPropCreditsSpent'
	'int c_playerPropResearchPoints':
		prefix: 'c_playerPropResearchPoints'
		body: 'c_playerPropResearchPoints'
	'int c_playerPropResearchPointsSpent':
		prefix: 'c_playerPropResearchPointsSpent'
		body: 'c_playerPropResearchPointsSpent'
	'int c_playerPropHandicap':
		prefix: 'c_playerPropHandicap'
		body: 'c_playerPropHandicap'
	'int c_playerPropMineralsCollected':
		prefix: 'c_playerPropMineralsCollected'
		body: 'c_playerPropMineralsCollected'
	'int c_playerPropVespeneCollected':
		prefix: 'c_playerPropVespeneCollected'
		body: 'c_playerPropVespeneCollected'
	'int c_playerPropTerrazineCollected':
		prefix: 'c_playerPropTerrazineCollected'
		body: 'c_playerPropTerrazineCollected'
	'int c_playerPropCustomCollected':
		prefix: 'c_playerPropCustomCollected'
		body: 'c_playerPropCustomCollected'
	'int c_playerPropDamageDealtPercent':
		prefix: 'c_playerPropDamageDealtPercent'
		body: 'c_playerPropDamageDealtPercent'
	'int c_playerPropDamageTakenPercent':
		prefix: 'c_playerPropDamageTakenPercent'
		body: 'c_playerPropDamageTakenPercent'
	'int c_playerPropDamageDealtTime':
		prefix: 'c_playerPropDamageDealtTime'
		body: 'c_playerPropDamageDealtTime'
	'int c_playerPropDamageTakenTime':
		prefix: 'c_playerPropDamageTakenTime'
		body: 'c_playerPropDamageTakenTime'
	'int c_playerPropOperSetTo':
		prefix: 'c_playerPropOperSetTo'
		body: 'c_playerPropOperSetTo'
	'int c_playerPropOperAdd':
		prefix: 'c_playerPropOperAdd'
		body: 'c_playerPropOperAdd'
	'int c_playerPropOperSubtract':
		prefix: 'c_playerPropOperSubtract'
		body: 'c_playerPropOperSubtract'
	'int c_playerStatusUnused':
		prefix: 'c_playerStatusUnused'
		body: 'c_playerStatusUnused'
	'int c_playerStatusActive':
		prefix: 'c_playerStatusActive'
		body: 'c_playerStatusActive'
	'int c_playerStatusLeft':
		prefix: 'c_playerStatusLeft'
		body: 'c_playerStatusLeft'
	'int c_playerTypeReferee':
		prefix: 'c_playerTypeReferee'
		body: 'c_playerTypeReferee'
	'int c_playerTypeSpectator':
		prefix: 'c_playerTypeSpectator'
		body: 'c_playerTypeSpectator'
	'int c_playerLicenseLibertyFull':
		prefix: 'c_playerLicenseLibertyFull'
		body: 'c_playerLicenseLibertyFull'
	'int c_playerStateShowScore':
		prefix: 'c_playerStateShowScore'
		body: 'c_playerStateShowScore'
	'int c_playerStateXPGain':
		prefix: 'c_playerStateXPGain'
		body: 'c_playerStateXPGain'
	'int c_playerStateAbortEnabled':
		prefix: 'c_playerStateAbortEnabled'
		body: 'c_playerStateAbortEnabled'
	'int c_playerStateRestartEnabled':
		prefix: 'c_playerStateRestartEnabled'
		body: 'c_playerStateRestartEnabled'
	'int c_playerStateContinueEnabled':
		prefix: 'c_playerStateContinueEnabled'
		body: 'c_playerStateContinueEnabled'
	'int c_playerStateShowWorldTip':
		prefix: 'c_playerStateShowWorldTip'
		body: 'c_playerStateShowWorldTip'
	'int c_playerStateFidgetingEnabled':
		prefix: 'c_playerStateFidgetingEnabled'
		body: 'c_playerStateFidgetingEnabled'
	'int c_playerStateDisplayInLeaderPanel':
		prefix: 'c_playerStateDisplayInLeaderPanel'
		body: 'c_playerStateDisplayInLeaderPanel'
	'int c_playerStateDisplayInViewMenu':
		prefix: 'c_playerStateDisplayInViewMenu'
		body: 'c_playerStateDisplayInViewMenu'
	'int c_playerStateChargesPaused':
		prefix: 'c_playerStateChargesPaused'
		body: 'c_playerStateChargesPaused'
	'int c_playerStateCooldownsPaused':
		prefix: 'c_playerStateCooldownsPaused'
		body: 'c_playerStateCooldownsPaused'
	'int c_playerStateMineralCostIgnored':
		prefix: 'c_playerStateMineralCostIgnored'
		body: 'c_playerStateMineralCostIgnored'
	'int c_playerStateVespeneCostIgnored':
		prefix: 'c_playerStateVespeneCostIgnored'
		body: 'c_playerStateVespeneCostIgnored'
	'int c_playerStateTerrazineCostIgnored':
		prefix: 'c_playerStateTerrazineCostIgnored'
		body: 'c_playerStateTerrazineCostIgnored'
	'int c_playerStateCustomCostIgnored':
		prefix: 'c_playerStateCustomCostIgnored'
		body: 'c_playerStateCustomCostIgnored'
	'int c_playerStateDisplayGameResult':
		prefix: 'c_playerStateDisplayGameResult'
		body: 'c_playerStateDisplayGameResult'
	'int c_playerStateFoodIgnored':
		prefix: 'c_playerStateFoodIgnored'
		body: 'c_playerStateFoodIgnored'
	'int c_playerStateStartingRallyEnabled':
		prefix: 'c_playerStateStartingRallyEnabled'
		body: 'c_playerStateStartingRallyEnabled'
	'int c_playerStateCameraFollow':
		prefix: 'c_playerStateCameraFollow'
		body: 'c_playerStateCameraFollow'
	'int c_buildMenuOpening':
		prefix: 'c_buildMenuOpening'
		body: 'c_buildMenuOpening'
	'int c_buildMenuLateGame':
		prefix: 'c_buildMenuLateGame'
		body: 'c_buildMenuLateGame'
	'int c_buildMenuBeacons':
		prefix: 'c_buildMenuBeacons'
		body: 'c_buildMenuBeacons'
	'int c_gameResultUndecided':
		prefix: 'c_gameResultUndecided'
		body: 'c_gameResultUndecided'
	'int c_gameResultVictory':
		prefix: 'c_gameResultVictory'
		body: 'c_gameResultVictory'
	'int c_gameResultDefeat':
		prefix: 'c_gameResultDefeat'
		body: 'c_gameResultDefeat'
	'int c_gameResultTie':
		prefix: 'c_gameResultTie'
		body: 'c_gameResultTie'
	'int c_playerGroupAlly':
		prefix: 'c_playerGroupAlly'
		body: 'c_playerGroupAlly'
	'int c_playerGroupEnemy':
		prefix: 'c_playerGroupEnemy'
		body: 'c_playerGroupEnemy'
	'int c_playerGroupAny':
		prefix: 'c_playerGroupAny'
		body: 'c_playerGroupAny'
	'int c_noPortraitChannel':
		prefix: 'c_noPortraitChannel'
		body: 'c_noPortraitChannel'
	'int c_invalidPortraitId':
		prefix: 'c_invalidPortraitId'
		body: 'c_invalidPortraitId'
	'int c_portraitRenderTypeHDR':
		prefix: 'c_portraitRenderTypeHDR'
		body: 'c_portraitRenderTypeHDR'
	'int c_portraitRenderTypeLDR':
		prefix: 'c_portraitRenderTypeLDR'
		body: 'c_portraitRenderTypeLDR'
	'int c_invalidPurchaseItemId':
		prefix: 'c_invalidPurchaseItemId'
		body: 'c_invalidPurchaseItemId'
	'int c_invalidPurchaseCategoryId':
		prefix: 'c_invalidPurchaseCategoryId'
		body: 'c_invalidPurchaseCategoryId'
	'int c_invalidPurchaseGroupId':
		prefix: 'c_invalidPurchaseGroupId'
		body: 'c_invalidPurchaseGroupId'
	'int c_purchaseCategoryStateEnabled':
		prefix: 'c_purchaseCategoryStateEnabled'
		body: 'c_purchaseCategoryStateEnabled'
	'int c_purchaseCategoryStateDisabled':
		prefix: 'c_purchaseCategoryStateDisabled'
		body: 'c_purchaseCategoryStateDisabled'
	'int c_purchaseCategoryStateHidden':
		prefix: 'c_purchaseCategoryStateHidden'
		body: 'c_purchaseCategoryStateHidden'
	'int c_purchaseCategoryStateNew':
		prefix: 'c_purchaseCategoryStateNew'
		body: 'c_purchaseCategoryStateNew'
	'int c_purchaseGroupStateEnabled':
		prefix: 'c_purchaseGroupStateEnabled'
		body: 'c_purchaseGroupStateEnabled'
	'int c_purchaseGroupStateDisabled':
		prefix: 'c_purchaseGroupStateDisabled'
		body: 'c_purchaseGroupStateDisabled'
	'int c_purchaseGroupStateHidden':
		prefix: 'c_purchaseGroupStateHidden'
		body: 'c_purchaseGroupStateHidden'
	'int c_purchaseGroupStateNew':
		prefix: 'c_purchaseGroupStateNew'
		body: 'c_purchaseGroupStateNew'
	'int c_purchaseItemStateEnabled':
		prefix: 'c_purchaseItemStateEnabled'
		body: 'c_purchaseItemStateEnabled'
	'int c_purchaseItemStateDisabled':
		prefix: 'c_purchaseItemStateDisabled'
		body: 'c_purchaseItemStateDisabled'
	'int c_purchaseItemStatePurchased':
		prefix: 'c_purchaseItemStatePurchased'
		body: 'c_purchaseItemStatePurchased'
	'int c_purchaseItemStateHidden':
		prefix: 'c_purchaseItemStateHidden'
		body: 'c_purchaseItemStateHidden'
	'int c_invalidResearchCategoryId':
		prefix: 'c_invalidResearchCategoryId'
		body: 'c_invalidResearchCategoryId'
	'int c_invalidResearchTierId':
		prefix: 'c_invalidResearchTierId'
		body: 'c_invalidResearchTierId'
	'int c_invalidResearchItemId':
		prefix: 'c_invalidResearchItemId'
		body: 'c_invalidResearchItemId'
	'int c_researchItemStateEnabled':
		prefix: 'c_researchItemStateEnabled'
		body: 'c_researchItemStateEnabled'
	'int c_researchItemStateDisabled':
		prefix: 'c_researchItemStateDisabled'
		body: 'c_researchItemStateDisabled'
	'int c_researchItemStatePurchased':
		prefix: 'c_researchItemStatePurchased'
		body: 'c_researchItemStatePurchased'
	'int c_soundIndexAny':
		prefix: 'c_soundIndexAny'
		body: 'c_soundIndexAny'
	'int c_soundOffsetStart':
		prefix: 'c_soundOffsetStart'
		body: 'c_soundOffsetStart'
	'int c_soundOffsetEnd':
		prefix: 'c_soundOffsetEnd'
		body: 'c_soundOffsetEnd'
	'int c_soundtrackCueAny':
		prefix: 'c_soundtrackCueAny'
		body: 'c_soundtrackCueAny'
	'int c_soundtrackIndexAny':
		prefix: 'c_soundtrackIndexAny'
		body: 'c_soundtrackIndexAny'
	'bool c_stringCase':
		prefix: 'c_stringCase'
		body: 'c_stringCase'
	'bool c_stringNoCase':
		prefix: 'c_stringNoCase'
		body: 'c_stringNoCase'
	'int c_stringNotFound':
		prefix: 'c_stringNotFound'
		body: 'c_stringNotFound'
	'int c_stringBegin':
		prefix: 'c_stringBegin'
		body: 'c_stringBegin'
	'int c_stringEnd':
		prefix: 'c_stringEnd'
		body: 'c_stringEnd'
	'int c_stringAnywhere':
		prefix: 'c_stringAnywhere'
		body: 'c_stringAnywhere'
	'int c_stringReplaceAll':
		prefix: 'c_stringReplaceAll'
		body: 'c_stringReplaceAll'
	'string c_textExpressionTokenMain':
		prefix: 'c_textExpressionTokenMain'
		body: 'c_textExpressionTokenMain'
	'int c_techCountQueuedOnly':
		prefix: 'c_techCountQueuedOnly'
		body: 'c_techCountQueuedOnly'
	'int c_techCountQueuedOrBetter':
		prefix: 'c_techCountQueuedOrBetter'
		body: 'c_techCountQueuedOrBetter'
	'int c_techCountInProgressOnly':
		prefix: 'c_techCountInProgressOnly'
		body: 'c_techCountInProgressOnly'
	'int c_techCountInProgressOrBetter':
		prefix: 'c_techCountInProgressOrBetter'
		body: 'c_techCountInProgressOrBetter'
	'int c_techCountCompleteOnly':
		prefix: 'c_techCountCompleteOnly'
		body: 'c_techCountCompleteOnly'
	'int c_techCountIncompleteOnly':
		prefix: 'c_techCountIncompleteOnly'
		body: 'c_techCountIncompleteOnly'
	'int c_techCountRevivableOnly':
		prefix: 'c_techCountRevivableOnly'
		body: 'c_techCountRevivableOnly'
	'int c_textTagNone':
		prefix: 'c_textTagNone'
		body: 'c_textTagNone'
	'int c_textTagEdgeTop':
		prefix: 'c_textTagEdgeTop'
		body: 'c_textTagEdgeTop'
	'int c_textTagEdgeLeft':
		prefix: 'c_textTagEdgeLeft'
		body: 'c_textTagEdgeLeft'
	'int c_textTagEdgeBottom':
		prefix: 'c_textTagEdgeBottom'
		body: 'c_textTagEdgeBottom'
	'int c_textTagEdgeRight':
		prefix: 'c_textTagEdgeRight'
		body: 'c_textTagEdgeRight'
	'int c_textTagColorText':
		prefix: 'c_textTagColorText'
		body: 'c_textTagColorText'
	'int c_textTagColorTextStart':
		prefix: 'c_textTagColorTextStart'
		body: 'c_textTagColorTextStart'
	'int c_textTagColorTextEnd':
		prefix: 'c_textTagColorTextEnd'
		body: 'c_textTagColorTextEnd'
	'int c_textTagColorBackground':
		prefix: 'c_textTagColorBackground'
		body: 'c_textTagColorBackground'
	'int c_textTagColorBackgroundStart':
		prefix: 'c_textTagColorBackgroundStart'
		body: 'c_textTagColorBackgroundStart'
	'int c_textTagColorBackgroundEnd':
		prefix: 'c_textTagColorBackgroundEnd'
		body: 'c_textTagColorBackgroundEnd'
	'int c_textTagColorEdge':
		prefix: 'c_textTagColorEdge'
		body: 'c_textTagColorEdge'
	'int c_textTagColorEdgeStart':
		prefix: 'c_textTagColorEdgeStart'
		body: 'c_textTagColorEdgeStart'
	'int c_textTagColorEdgeEnd':
		prefix: 'c_textTagColorEdgeEnd'
		body: 'c_textTagColorEdgeEnd'
	'int c_textTagFadeAll':
		prefix: 'c_textTagFadeAll'
		body: 'c_textTagFadeAll'
	'int c_textTagFadeText':
		prefix: 'c_textTagFadeText'
		body: 'c_textTagFadeText'
	'int c_textTagFadeBackground':
		prefix: 'c_textTagFadeBackground'
		body: 'c_textTagFadeBackground'
	'int c_textTagFadeEdge':
		prefix: 'c_textTagFadeEdge'
		body: 'c_textTagFadeEdge'
	'int c_textTagTimeDuration':
		prefix: 'c_textTagTimeDuration'
		body: 'c_textTagTimeDuration'
	'int c_textTagTimeFadeOut':
		prefix: 'c_textTagTimeFadeOut'
		body: 'c_textTagTimeFadeOut'
	'int c_textTagTimeFadeDuration':
		prefix: 'c_textTagTimeFadeDuration'
		body: 'c_textTagTimeFadeDuration'
	'int c_textTagTimeCurrent':
		prefix: 'c_textTagTimeCurrent'
		body: 'c_textTagTimeCurrent'
	'fixed c_textTagTimePermanent':
		prefix: 'c_textTagTimePermanent'
		body: 'c_textTagTimePermanent'
	'int c_timeGame':
		prefix: 'c_timeGame'
		body: 'c_timeGame'
	'int c_timeReal':
		prefix: 'c_timeReal'
		body: 'c_timeReal'
	'int c_timeAI':
		prefix: 'c_timeAI'
		body: 'c_timeAI'
	'fixed c_timerDurationInfinite':
		prefix: 'c_timerDurationInfinite'
		body: 'c_timerDurationInfinite'
	'int c_timerWindowNone':
		prefix: 'c_timerWindowNone'
		body: 'c_timerWindowNone'
	'int c_timerWindowStyleHorizontalTitleTime':
		prefix: 'c_timerWindowStyleHorizontalTitleTime'
		body: 'c_timerWindowStyleHorizontalTitleTime'
	'int c_timerWindowStyleHorizontalTimeTitle':
		prefix: 'c_timerWindowStyleHorizontalTimeTitle'
		body: 'c_timerWindowStyleHorizontalTimeTitle'
	'int c_timerWindowStyleVerticalTitleTime':
		prefix: 'c_timerWindowStyleVerticalTitleTime'
		body: 'c_timerWindowStyleVerticalTitleTime'
	'int c_timerWindowStyleVerticalTimeTitle':
		prefix: 'c_timerWindowStyleVerticalTimeTitle'
		body: 'c_timerWindowStyleVerticalTimeTitle'
	'int c_timerWindowColorTitle':
		prefix: 'c_timerWindowColorTitle'
		body: 'c_timerWindowColorTitle'
	'int c_timerWindowColorTime':
		prefix: 'c_timerWindowColorTime'
		body: 'c_timerWindowColorTime'
	'int c_timerWindowColorBackground':
		prefix: 'c_timerWindowColorBackground'
		body: 'c_timerWindowColorBackground'
	'int c_timerWindowImageBorder':
		prefix: 'c_timerWindowImageBorder'
		body: 'c_timerWindowImageBorder'
	'int c_timerWindowImageBackground':
		prefix: 'c_timerWindowImageBackground'
		body: 'c_timerWindowImageBackground'
	'int c_timerWindowImageProgressFrame':
		prefix: 'c_timerWindowImageProgressFrame'
		body: 'c_timerWindowImageProgressFrame'
	'int c_timerWindowImageProgressFill':
		prefix: 'c_timerWindowImageProgressFill'
		body: 'c_timerWindowImageProgressFill'
	'int c_invalidTransmissionId':
		prefix: 'c_invalidTransmissionId'
		body: 'c_invalidTransmissionId'
	'fixed c_transmissionTransitionDuration':
		prefix: 'c_transmissionTransitionDuration'
		body: 'c_transmissionTransitionDuration'
	'int c_transmissionDurationDefault':
		prefix: 'c_transmissionDurationDefault'
		body: 'c_transmissionDurationDefault'
	'int c_transmissionDurationAdd':
		prefix: 'c_transmissionDurationAdd'
		body: 'c_transmissionDurationAdd'
	'int c_transmissionDurationSub':
		prefix: 'c_transmissionDurationSub'
		body: 'c_transmissionDurationSub'
	'int c_transmissionDurationSet':
		prefix: 'c_transmissionDurationSet'
		body: 'c_transmissionDurationSet'
	'int c_transmissionOptionHideAlertPanel':
		prefix: 'c_transmissionOptionHideAlertPanel'
		body: 'c_transmissionOptionHideAlertPanel'
	'int c_triggerThreadFlagAI':
		prefix: 'c_triggerThreadFlagAI'
		body: 'c_triggerThreadFlagAI'
	'int c_triggerQueueRetain':
		prefix: 'c_triggerQueueRetain'
		body: 'c_triggerQueueRetain'
	'int c_triggerQueueRemove':
		prefix: 'c_triggerQueueRemove'
		body: 'c_triggerQueueRemove'
	'int c_triggerQueueKill':
		prefix: 'c_triggerQueueKill'
		body: 'c_triggerQueueKill'
	'int c_tdFilterFlagObservers':
		prefix: 'c_tdFilterFlagObservers'
		body: 'c_tdFilterFlagObservers'
	'int c_tdFilterFlagParticipants':
		prefix: 'c_tdFilterFlagParticipants'
		body: 'c_tdFilterFlagParticipants'
	'int c_spendLocationAll':
		prefix: 'c_spendLocationAll'
		body: 'c_spendLocationAll'
	'int c_spendLocationAbility':
		prefix: 'c_spendLocationAbility'
		body: 'c_spendLocationAbility'
	'int c_spendLocationBehavior':
		prefix: 'c_spendLocationBehavior'
		body: 'c_spendLocationBehavior'
	'int c_spendLocationUnit':
		prefix: 'c_spendLocationUnit'
		body: 'c_spendLocationUnit'
	'int c_spendLocationPlayer':
		prefix: 'c_spendLocationPlayer'
		body: 'c_spendLocationPlayer'
	'int c_spendLocationGlobal':
		prefix: 'c_spendLocationGlobal'
		body: 'c_spendLocationGlobal'
	'int c_unitCreateConstruct':
		prefix: 'c_unitCreateConstruct'
		body: 'c_unitCreateConstruct'
	'int c_unitCreateIgnorePlacement':
		prefix: 'c_unitCreateIgnorePlacement'
		body: 'c_unitCreateIgnorePlacement'
	'int c_killDisplayDefault':
		prefix: 'c_killDisplayDefault'
		body: 'c_killDisplayDefault'
	'int c_killDisplayAlways':
		prefix: 'c_killDisplayAlways'
		body: 'c_killDisplayAlways'
	'int c_killDisplayNever':
		prefix: 'c_killDisplayNever'
		body: 'c_killDisplayNever'
	'int c_unitAttributeNone':
		prefix: 'c_unitAttributeNone'
		body: 'c_unitAttributeNone'
	'int c_unitAttributeShielded':
		prefix: 'c_unitAttributeShielded'
		body: 'c_unitAttributeShielded'
	'int c_unitStateBuried':
		prefix: 'c_unitStateBuried'
		body: 'c_unitStateBuried'
	'int c_unitStateCloaked':
		prefix: 'c_unitStateCloaked'
		body: 'c_unitStateCloaked'
	'int c_unitStateDetector':
		prefix: 'c_unitStateDetector'
		body: 'c_unitStateDetector'
	'int c_unitStateRadar':
		prefix: 'c_unitStateRadar'
		body: 'c_unitStateRadar'
	'int c_unitStateVisionSuppressed':
		prefix: 'c_unitStateVisionSuppressed'
		body: 'c_unitStateVisionSuppressed'
	'int c_unitStateAttackSuppressed':
		prefix: 'c_unitStateAttackSuppressed'
		body: 'c_unitStateAttackSuppressed'
	'int c_unitStateInStasis':
		prefix: 'c_unitStateInStasis'
		body: 'c_unitStateInStasis'
	'int c_unitStateHallucination':
		prefix: 'c_unitStateHallucination'
		body: 'c_unitStateHallucination'
	'int c_unitStateInvulnerable':
		prefix: 'c_unitStateInvulnerable'
		body: 'c_unitStateInvulnerable'
	'int c_unitStatePaused':
		prefix: 'c_unitStatePaused'
		body: 'c_unitStatePaused'
	'int c_unitStateHidden':
		prefix: 'c_unitStateHidden'
		body: 'c_unitStateHidden'
	'int c_unitStateHighlightable':
		prefix: 'c_unitStateHighlightable'
		body: 'c_unitStateHighlightable'
	'int c_unitStateIgnoreTerrainZ':
		prefix: 'c_unitStateIgnoreTerrainZ'
		body: 'c_unitStateIgnoreTerrainZ'
	'int c_unitStateUnderConstruction':
		prefix: 'c_unitStateUnderConstruction'
		body: 'c_unitStateUnderConstruction'
	'int c_unitStateInsideTransport':
		prefix: 'c_unitStateInsideTransport'
		body: 'c_unitStateInsideTransport'
	'int c_unitStateIdle':
		prefix: 'c_unitStateIdle'
		body: 'c_unitStateIdle'
	'int c_unitStateFidget':
		prefix: 'c_unitStateFidget'
		body: 'c_unitStateFidget'
	'int c_unitStateSelectable':
		prefix: 'c_unitStateSelectable'
		body: 'c_unitStateSelectable'
	'int c_unitStateTargetable':
		prefix: 'c_unitStateTargetable'
		body: 'c_unitStateTargetable'
	'int c_unitStateStatusBar':
		prefix: 'c_unitStateStatusBar'
		body: 'c_unitStateStatusBar'
	'int c_unitStateTooltipable':
		prefix: 'c_unitStateTooltipable'
		body: 'c_unitStateTooltipable'
	'int c_unitStateCursorable':
		prefix: 'c_unitStateCursorable'
		body: 'c_unitStateCursorable'
	'int c_unitStateIsDead':
		prefix: 'c_unitStateIsDead'
		body: 'c_unitStateIsDead'
	'int c_unitStateIsTransport':
		prefix: 'c_unitStateIsTransport'
		body: 'c_unitStateIsTransport'
	'int c_unitStateMoveSuppressed':
		prefix: 'c_unitStateMoveSuppressed'
		body: 'c_unitStateMoveSuppressed'
	'int c_unitStateTurnSuppressed':
		prefix: 'c_unitStateTurnSuppressed'
		body: 'c_unitStateTurnSuppressed'
	'int c_unitStateHighlighted':
		prefix: 'c_unitStateHighlighted'
		body: 'c_unitStateHighlighted'
	'int c_unitStateUsingSupply':
		prefix: 'c_unitStateUsingSupply'
		body: 'c_unitStateUsingSupply'
	'int c_unitStateRevivable':
		prefix: 'c_unitStateRevivable'
		body: 'c_unitStateRevivable'
	'int c_unitStateDetectable':
		prefix: 'c_unitStateDetectable'
		body: 'c_unitStateDetectable'
	'int c_unitStateRadarable':
		prefix: 'c_unitStateRadarable'
		body: 'c_unitStateRadarable'
	'int c_unitStateStunned':
		prefix: 'c_unitStateStunned'
		body: 'c_unitStateStunned'
	'int c_unitStateStoppable':
		prefix: 'c_unitStateStoppable'
		body: 'c_unitStateStoppable'
	'int c_unitStateResistant':
		prefix: 'c_unitStateResistant'
		body: 'c_unitStateResistant'
	'int c_unitStateSilenced':
		prefix: 'c_unitStateSilenced'
		body: 'c_unitStateSilenced'
	'int c_unitStateDazed':
		prefix: 'c_unitStateDazed'
		body: 'c_unitStateDazed'
	'int c_unitPropLife':
		prefix: 'c_unitPropLife'
		body: 'c_unitPropLife'
	'int c_unitPropLifePercent':
		prefix: 'c_unitPropLifePercent'
		body: 'c_unitPropLifePercent'
	'int c_unitPropLifeMax':
		prefix: 'c_unitPropLifeMax'
		body: 'c_unitPropLifeMax'
	'int c_unitPropLifeRegen':
		prefix: 'c_unitPropLifeRegen'
		body: 'c_unitPropLifeRegen'
	'int c_unitPropEnergy':
		prefix: 'c_unitPropEnergy'
		body: 'c_unitPropEnergy'
	'int c_unitPropEnergyPercent':
		prefix: 'c_unitPropEnergyPercent'
		body: 'c_unitPropEnergyPercent'
	'int c_unitPropEnergyMax':
		prefix: 'c_unitPropEnergyMax'
		body: 'c_unitPropEnergyMax'
	'int c_unitPropEnergyRegen':
		prefix: 'c_unitPropEnergyRegen'
		body: 'c_unitPropEnergyRegen'
	'int c_unitPropShields':
		prefix: 'c_unitPropShields'
		body: 'c_unitPropShields'
	'int c_unitPropShieldsPercent':
		prefix: 'c_unitPropShieldsPercent'
		body: 'c_unitPropShieldsPercent'
	'int c_unitPropShieldsMax':
		prefix: 'c_unitPropShieldsMax'
		body: 'c_unitPropShieldsMax'
	'int c_unitPropShieldsRegen':
		prefix: 'c_unitPropShieldsRegen'
		body: 'c_unitPropShieldsRegen'
	'int c_unitPropSuppliesUsed':
		prefix: 'c_unitPropSuppliesUsed'
		body: 'c_unitPropSuppliesUsed'
	'int c_unitPropSuppliesMade':
		prefix: 'c_unitPropSuppliesMade'
		body: 'c_unitPropSuppliesMade'
	'int c_unitPropKills':
		prefix: 'c_unitPropKills'
		body: 'c_unitPropKills'
	'int c_unitPropVitality':
		prefix: 'c_unitPropVitality'
		body: 'c_unitPropVitality'
	'int c_unitPropVitalityPercent':
		prefix: 'c_unitPropVitalityPercent'
		body: 'c_unitPropVitalityPercent'
	'int c_unitPropVitalityMax':
		prefix: 'c_unitPropVitalityMax'
		body: 'c_unitPropVitalityMax'
	'int c_unitPropAcceleration':
		prefix: 'c_unitPropAcceleration'
		body: 'c_unitPropAcceleration'
	'int c_unitPropHeight':
		prefix: 'c_unitPropHeight'
		body: 'c_unitPropHeight'
	'int c_unitPropMovementSpeed':
		prefix: 'c_unitPropMovementSpeed'
		body: 'c_unitPropMovementSpeed'
	'int c_unitPropTurnRate':
		prefix: 'c_unitPropTurnRate'
		body: 'c_unitPropTurnRate'
	'int c_unitPropResources':
		prefix: 'c_unitPropResources'
		body: 'c_unitPropResources'
	'int c_unitPropRadius':
		prefix: 'c_unitPropRadius'
		body: 'c_unitPropRadius'
	'int c_unitPropXP':
		prefix: 'c_unitPropXP'
		body: 'c_unitPropXP'
	'int c_unitPropLevel':
		prefix: 'c_unitPropLevel'
		body: 'c_unitPropLevel'
	'int c_unitPropBountyMinerals':
		prefix: 'c_unitPropBountyMinerals'
		body: 'c_unitPropBountyMinerals'
	'int c_unitPropBountyVespene':
		prefix: 'c_unitPropBountyVespene'
		body: 'c_unitPropBountyVespene'
	'int c_unitPropBountyTerrazine':
		prefix: 'c_unitPropBountyTerrazine'
		body: 'c_unitPropBountyTerrazine'
	'int c_unitPropBountyCustom':
		prefix: 'c_unitPropBountyCustom'
		body: 'c_unitPropBountyCustom'
	'int c_unitPropKillXP':
		prefix: 'c_unitPropKillXP'
		body: 'c_unitPropKillXP'
	'int c_unitPropCarriedMinerals':
		prefix: 'c_unitPropCarriedMinerals'
		body: 'c_unitPropCarriedMinerals'
	'int c_unitPropCarriedVespene':
		prefix: 'c_unitPropCarriedVespene'
		body: 'c_unitPropCarriedVespene'
	'int c_unitPropCarriedTerrazine':
		prefix: 'c_unitPropCarriedTerrazine'
		body: 'c_unitPropCarriedTerrazine'
	'int c_unitPropCarriedCustom':
		prefix: 'c_unitPropCarriedCustom'
		body: 'c_unitPropCarriedCustom'
	'int c_unitPropLifeArmor':
		prefix: 'c_unitPropLifeArmor'
		body: 'c_unitPropLifeArmor'
	'int c_unitPropShieldArmor':
		prefix: 'c_unitPropShieldArmor'
		body: 'c_unitPropShieldArmor'
	'int c_unitPropEnergyArmor':
		prefix: 'c_unitPropEnergyArmor'
		body: 'c_unitPropEnergyArmor'
	'int c_unitPropLifeExpected':
		prefix: 'c_unitPropLifeExpected'
		body: 'c_unitPropLifeExpected'
	'int c_unitPropEnergyExpected':
		prefix: 'c_unitPropEnergyExpected'
		body: 'c_unitPropEnergyExpected'
	'int c_unitPropShieldsExpected':
		prefix: 'c_unitPropShieldsExpected'
		body: 'c_unitPropShieldsExpected'
	'int c_unitPropBaseMovementSpeed':
		prefix: 'c_unitPropBaseMovementSpeed'
		body: 'c_unitPropBaseMovementSpeed'
	'int c_unitPropMovementSpeedCurrent':
		prefix: 'c_unitPropMovementSpeedCurrent'
		body: 'c_unitPropMovementSpeedCurrent'
	'int c_unitPropLifeExpectedPercent':
		prefix: 'c_unitPropLifeExpectedPercent'
		body: 'c_unitPropLifeExpectedPercent'
	'int c_unitPropEnergyExpectedPercent':
		prefix: 'c_unitPropEnergyExpectedPercent'
		body: 'c_unitPropEnergyExpectedPercent'
	'int c_unitPropShieldsExpectedPercent':
		prefix: 'c_unitPropShieldsExpectedPercent'
		body: 'c_unitPropShieldsExpectedPercent'
	'int c_unitPropAIEvaluationFactor':
		prefix: 'c_unitPropAIEvaluationFactor'
		body: 'c_unitPropAIEvaluationFactor'
	'bool c_unitPropCurrent':
		prefix: 'c_unitPropCurrent'
		body: 'c_unitPropCurrent'
	'bool c_unitPropNormal':
		prefix: 'c_unitPropNormal'
		body: 'c_unitPropNormal'
	'int c_unitAIOptionUsable':
		prefix: 'c_unitAIOptionUsable'
		body: 'c_unitAIOptionUsable'
	'int c_unitAbilChargeCountMax':
		prefix: 'c_unitAbilChargeCountMax'
		body: 'c_unitAbilChargeCountMax'
	'int c_unitAbilChargeCountUse':
		prefix: 'c_unitAbilChargeCountUse'
		body: 'c_unitAbilChargeCountUse'
	'int c_unitAbilChargeCountLeft':
		prefix: 'c_unitAbilChargeCountLeft'
		body: 'c_unitAbilChargeCountLeft'
	'int c_unitAbilChargeRegenMax':
		prefix: 'c_unitAbilChargeRegenMax'
		body: 'c_unitAbilChargeRegenMax'
	'int c_unitAbilChargeRegenLeft':
		prefix: 'c_unitAbilChargeRegenLeft'
		body: 'c_unitAbilChargeRegenLeft'
	'int c_cmdStateHidden':
		prefix: 'c_cmdStateHidden'
		body: 'c_cmdStateHidden'
	'int c_cmdStateExecuting':
		prefix: 'c_cmdStateExecuting'
		body: 'c_cmdStateExecuting'
	'int c_cmdStateCanAutoCast':
		prefix: 'c_cmdStateCanAutoCast'
		body: 'c_cmdStateCanAutoCast'
	'int c_cmdStateIsAutoCast':
		prefix: 'c_cmdStateIsAutoCast'
		body: 'c_cmdStateIsAutoCast'
	'int c_cmdStateMaxCharges':
		prefix: 'c_cmdStateMaxCharges'
		body: 'c_cmdStateMaxCharges'
	'int c_cmdStateHasCharges':
		prefix: 'c_cmdStateHasCharges'
		body: 'c_cmdStateHasCharges'
	'int c_cmdStateDisabled':
		prefix: 'c_cmdStateDisabled'
		body: 'c_cmdStateDisabled'
	'int c_cmdStateCooldown':
		prefix: 'c_cmdStateCooldown'
		body: 'c_cmdStateCooldown'
	'int c_cmdStateRecharging':
		prefix: 'c_cmdStateRecharging'
		body: 'c_cmdStateRecharging'
	'int c_cmdStateNoLife':
		prefix: 'c_cmdStateNoLife'
		body: 'c_cmdStateNoLife'
	'int c_cmdStateNoShields':
		prefix: 'c_cmdStateNoShields'
		body: 'c_cmdStateNoShields'
	'int c_cmdStateNoEnergy':
		prefix: 'c_cmdStateNoEnergy'
		body: 'c_cmdStateNoEnergy'
	'int c_cmdStateNoMinerals':
		prefix: 'c_cmdStateNoMinerals'
		body: 'c_cmdStateNoMinerals'
	'int c_cmdStateNoVespene':
		prefix: 'c_cmdStateNoVespene'
		body: 'c_cmdStateNoVespene'
	'int c_cmdStateNoTerrazine':
		prefix: 'c_cmdStateNoTerrazine'
		body: 'c_cmdStateNoTerrazine'
	'int c_cmdStateNoCustom':
		prefix: 'c_cmdStateNoCustom'
		body: 'c_cmdStateNoCustom'
	'int c_cmdStateNoFood':
		prefix: 'c_cmdStateNoFood'
		body: 'c_cmdStateNoFood'
	'int c_cmdStateCantSpend':
		prefix: 'c_cmdStateCantSpend'
		body: 'c_cmdStateCantSpend'
	'int c_cmdStateHideCharges':
		prefix: 'c_cmdStateHideCharges'
		body: 'c_cmdStateHideCharges'
	'int c_cmdStateHighlighted':
		prefix: 'c_cmdStateHighlighted'
		body: 'c_cmdStateHighlighted'
	'int c_unitCargoUnitCount':
		prefix: 'c_unitCargoUnitCount'
		body: 'c_unitCargoUnitCount'
	'int c_unitCargoSpaceTotal':
		prefix: 'c_unitCargoSpaceTotal'
		body: 'c_unitCargoSpaceTotal'
	'int c_unitCargoSpaceUsed':
		prefix: 'c_unitCargoSpaceUsed'
		body: 'c_unitCargoSpaceUsed'
	'int c_unitCargoSpaceFree':
		prefix: 'c_unitCargoSpaceFree'
		body: 'c_unitCargoSpaceFree'
	'int c_unitCargoSizeAsCargo':
		prefix: 'c_unitCargoSizeAsCargo'
		body: 'c_unitCargoSizeAsCargo'
	'int c_unitCargoSizeMax':
		prefix: 'c_unitCargoSizeMax'
		body: 'c_unitCargoSizeMax'
	'int c_unitCargoPosition':
		prefix: 'c_unitCargoPosition'
		body: 'c_unitCargoPosition'
	'int c_unitQueueTimeElapsed':
		prefix: 'c_unitQueueTimeElapsed'
		body: 'c_unitQueueTimeElapsed'
	'int c_unitQueueTimeRemaining':
		prefix: 'c_unitQueueTimeRemaining'
		body: 'c_unitQueueTimeRemaining'
	'int c_unitQueueTimeTotal':
		prefix: 'c_unitQueueTimeTotal'
		body: 'c_unitQueueTimeTotal'
	'int c_unitQueuePropertyAvailable':
		prefix: 'c_unitQueuePropertyAvailable'
		body: 'c_unitQueuePropertyAvailable'
	'int c_unitQueuePropertyTotal':
		prefix: 'c_unitQueuePropertyTotal'
		body: 'c_unitQueuePropertyTotal'
	'int c_unitQueuePropertyUsed':
		prefix: 'c_unitQueuePropertyUsed'
		body: 'c_unitQueuePropertyUsed'
	'int c_unitQueuePropertyCount':
		prefix: 'c_unitQueuePropertyCount'
		body: 'c_unitQueuePropertyCount'
	'int c_unitProgressTypeConstruct':
		prefix: 'c_unitProgressTypeConstruct'
		body: 'c_unitProgressTypeConstruct'
	'int c_unitProgressTypeTrain':
		prefix: 'c_unitProgressTypeTrain'
		body: 'c_unitProgressTypeTrain'
	'int c_unitProgressTypeResearch':
		prefix: 'c_unitProgressTypeResearch'
		body: 'c_unitProgressTypeResearch'
	'int c_unitProgressTypeArmMagazine':
		prefix: 'c_unitProgressTypeArmMagazine'
		body: 'c_unitProgressTypeArmMagazine'
	'int c_unitProgressTypeSpecialize':
		prefix: 'c_unitProgressTypeSpecialize'
		body: 'c_unitProgressTypeSpecialize'
	'int c_unitProgressTypeRevive':
		prefix: 'c_unitProgressTypeRevive'
		body: 'c_unitProgressTypeRevive'
	'int c_unitProgressTypeLearn':
		prefix: 'c_unitProgressTypeLearn'
		body: 'c_unitProgressTypeLearn'
	'int c_unitProgressStageStart':
		prefix: 'c_unitProgressStageStart'
		body: 'c_unitProgressStageStart'
	'int c_unitProgressStageCancel':
		prefix: 'c_unitProgressStageCancel'
		body: 'c_unitProgressStageCancel'
	'int c_unitProgressStageComplete':
		prefix: 'c_unitProgressStageComplete'
		body: 'c_unitProgressStageComplete'
	'int c_unitProgressStagePause':
		prefix: 'c_unitProgressStagePause'
		body: 'c_unitProgressStagePause'
	'int c_unitProgressStageResume':
		prefix: 'c_unitProgressStageResume'
		body: 'c_unitProgressStageResume'
	'int c_unitProgressStateEmpty':
		prefix: 'c_unitProgressStateEmpty'
		body: 'c_unitProgressStateEmpty'
	'int c_unitProgressStateActive':
		prefix: 'c_unitProgressStateActive'
		body: 'c_unitProgressStateActive'
	'int c_unitProgressStatePaused':
		prefix: 'c_unitProgressStatePaused'
		body: 'c_unitProgressStatePaused'
	'int c_unitBehaviorFlagPermanent':
		prefix: 'c_unitBehaviorFlagPermanent'
		body: 'c_unitBehaviorFlagPermanent'
	'int c_unitBehaviorFlagRestorable':
		prefix: 'c_unitBehaviorFlagRestorable'
		body: 'c_unitBehaviorFlagRestorable'
	'int c_unitBehaviorFlagTemporary':
		prefix: 'c_unitBehaviorFlagTemporary'
		body: 'c_unitBehaviorFlagTemporary'
	'int c_unitBehaviorFlagCloak':
		prefix: 'c_unitBehaviorFlagCloak'
		body: 'c_unitBehaviorFlagCloak'
	'int c_unitBehaviorFlagInvulnerable':
		prefix: 'c_unitBehaviorFlagInvulnerable'
		body: 'c_unitBehaviorFlagInvulnerable'
	'int c_unitBehaviorFlagSlow':
		prefix: 'c_unitBehaviorFlagSlow'
		body: 'c_unitBehaviorFlagSlow'
	'int c_unitBehaviorFlagFast':
		prefix: 'c_unitBehaviorFlagFast'
		body: 'c_unitBehaviorFlagFast'
	'int c_unitBehaviorFlagStun':
		prefix: 'c_unitBehaviorFlagStun'
		body: 'c_unitBehaviorFlagStun'
	'int c_unitBehaviorFlagReveal':
		prefix: 'c_unitBehaviorFlagReveal'
		body: 'c_unitBehaviorFlagReveal'
	'int c_unitBehaviorFlagUser1':
		prefix: 'c_unitBehaviorFlagUser1'
		body: 'c_unitBehaviorFlagUser1'
	'int c_unitBehaviorFlagUser2':
		prefix: 'c_unitBehaviorFlagUser2'
		body: 'c_unitBehaviorFlagUser2'
	'int c_unitBehaviorFlagUser3':
		prefix: 'c_unitBehaviorFlagUser3'
		body: 'c_unitBehaviorFlagUser3'
	'int c_unitBehaviorFlagUser4':
		prefix: 'c_unitBehaviorFlagUser4'
		body: 'c_unitBehaviorFlagUser4'
	'int c_unitBehaviorFlagUser5':
		prefix: 'c_unitBehaviorFlagUser5'
		body: 'c_unitBehaviorFlagUser5'
	'int c_unitBehaviorFlagUser6':
		prefix: 'c_unitBehaviorFlagUser6'
		body: 'c_unitBehaviorFlagUser6'
	'int c_unitBehaviorFlagUser7':
		prefix: 'c_unitBehaviorFlagUser7'
		body: 'c_unitBehaviorFlagUser7'
	'int c_unitBehaviorFlagUser8':
		prefix: 'c_unitBehaviorFlagUser8'
		body: 'c_unitBehaviorFlagUser8'
	'int c_unitBehaviorFlagUser9':
		prefix: 'c_unitBehaviorFlagUser9'
		body: 'c_unitBehaviorFlagUser9'
	'int c_unitBehaviorFlagUser10':
		prefix: 'c_unitBehaviorFlagUser10'
		body: 'c_unitBehaviorFlagUser10'
	'int c_unitBehaviorFlagUser11':
		prefix: 'c_unitBehaviorFlagUser11'
		body: 'c_unitBehaviorFlagUser11'
	'int c_unitBehaviorFlagUser12':
		prefix: 'c_unitBehaviorFlagUser12'
		body: 'c_unitBehaviorFlagUser12'
	'int c_unitBehaviorFlagUser13':
		prefix: 'c_unitBehaviorFlagUser13'
		body: 'c_unitBehaviorFlagUser13'
	'int c_unitBehaviorFlagUser14':
		prefix: 'c_unitBehaviorFlagUser14'
		body: 'c_unitBehaviorFlagUser14'
	'int c_unitBehaviorFlagUser15':
		prefix: 'c_unitBehaviorFlagUser15'
		body: 'c_unitBehaviorFlagUser15'
	'int c_unitBehaviorFlagChanneled':
		prefix: 'c_unitBehaviorFlagChanneled'
		body: 'c_unitBehaviorFlagChanneled'
	'int c_unitBehaviorFlagChanneling':
		prefix: 'c_unitBehaviorFlagChanneling'
		body: 'c_unitBehaviorFlagChanneling'
	'int c_unitBehaviorFlagCountdown':
		prefix: 'c_unitBehaviorFlagCountdown'
		body: 'c_unitBehaviorFlagCountdown'
	'int c_unitBehaviorFlagExtend':
		prefix: 'c_unitBehaviorFlagExtend'
		body: 'c_unitBehaviorFlagExtend'
	'int c_unitBehaviorFlagDisableBuilding':
		prefix: 'c_unitBehaviorFlagDisableBuilding'
		body: 'c_unitBehaviorFlagDisableBuilding'
	'int c_unitBehaviorFlagRemoveDamageResponseExhausted':
		prefix: 'c_unitBehaviorFlagRemoveDamageResponseExhausted'
		body: 'c_unitBehaviorFlagRemoveDamageResponseExhausted'
	'int c_unitBehaviorFlagRefreshStack':
		prefix: 'c_unitBehaviorFlagRefreshStack'
		body: 'c_unitBehaviorFlagRefreshStack'
	'int c_unitBehaviorFlagUpdateDurationWhileDisabled':
		prefix: 'c_unitBehaviorFlagUpdateDurationWhileDisabled'
		body: 'c_unitBehaviorFlagUpdateDurationWhileDisabled'
	'int c_unitBehaviorFlagHidden':
		prefix: 'c_unitBehaviorFlagHidden'
		body: 'c_unitBehaviorFlagHidden'
	'int c_unitBehaviorCountAll':
		prefix: 'c_unitBehaviorCountAll'
		body: 'c_unitBehaviorCountAll'
	'int c_orderQueueReplace':
		prefix: 'c_orderQueueReplace'
		body: 'c_orderQueueReplace'
	'int c_orderQueueAddToEnd':
		prefix: 'c_orderQueueAddToEnd'
		body: 'c_orderQueueAddToEnd'
	'int c_orderQueueAddToFront':
		prefix: 'c_orderQueueAddToFront'
		body: 'c_orderQueueAddToFront'
	'int c_unitInventoryCountCarried':
		prefix: 'c_unitInventoryCountCarried'
		body: 'c_unitInventoryCountCarried'
	'int c_unitInventoryCountEmpty':
		prefix: 'c_unitInventoryCountEmpty'
		body: 'c_unitInventoryCountEmpty'
	'int c_unitInventoryCountTotal':
		prefix: 'c_unitInventoryCountTotal'
		body: 'c_unitInventoryCountTotal'
	'int c_unitInventorySlotContainer':
		prefix: 'c_unitInventorySlotContainer'
		body: 'c_unitInventorySlotContainer'
	'int c_unitCostMinerals':
		prefix: 'c_unitCostMinerals'
		body: 'c_unitCostMinerals'
	'int c_unitCostVespene':
		prefix: 'c_unitCostVespene'
		body: 'c_unitCostVespene'
	'int c_unitCostTerrazine':
		prefix: 'c_unitCostTerrazine'
		body: 'c_unitCostTerrazine'
	'int c_unitCostCustomResource':
		prefix: 'c_unitCostCustomResource'
		body: 'c_unitCostCustomResource'
	'int c_unitCostSumMineralsVespene':
		prefix: 'c_unitCostSumMineralsVespene'
		body: 'c_unitCostSumMineralsVespene'
	'int c_placementTestCreepMask':
		prefix: 'c_placementTestCreepMask'
		body: 'c_placementTestCreepMask'
	'int c_placementTestPowerMask':
		prefix: 'c_placementTestPowerMask'
		body: 'c_placementTestPowerMask'
	'int c_placementTestFogMask':
		prefix: 'c_placementTestFogMask'
		body: 'c_placementTestFogMask'
	'int c_placementTestIgnoreBlockersMask':
		prefix: 'c_placementTestIgnoreBlockersMask'
		body: 'c_placementTestIgnoreBlockersMask'
	'int c_placementTestIgnoreInvisibleMask':
		prefix: 'c_placementTestIgnoreInvisibleMask'
		body: 'c_placementTestIgnoreInvisibleMask'
	'int c_placementTestZoneMask':
		prefix: 'c_placementTestZoneMask'
		body: 'c_placementTestZoneMask'
	'int c_placementTestCliffMask':
		prefix: 'c_placementTestCliffMask'
		body: 'c_placementTestCliffMask'
	'int c_placementTestDensityMask':
		prefix: 'c_placementTestDensityMask'
		body: 'c_placementTestDensityMask'
	'int c_unitDamageEither':
		prefix: 'c_unitDamageEither'
		body: 'c_unitDamageEither'
	'int c_unitDamageFatal':
		prefix: 'c_unitDamageFatal'
		body: 'c_unitDamageFatal'
	'int c_unitDamageNonFatal':
		prefix: 'c_unitDamageNonFatal'
		body: 'c_unitDamageNonFatal'
	'int c_unitDamageTypeAny':
		prefix: 'c_unitDamageTypeAny'
		body: 'c_unitDamageTypeAny'
	'int c_unitDamageTypeSpell':
		prefix: 'c_unitDamageTypeSpell'
		body: 'c_unitDamageTypeSpell'
	'int c_unitDamageTypeMelee':
		prefix: 'c_unitDamageTypeMelee'
		body: 'c_unitDamageTypeMelee'
	'int c_unitDamageTypeRanged':
		prefix: 'c_unitDamageTypeRanged'
		body: 'c_unitDamageTypeRanged'
	'int c_unitDamageTypeSplash':
		prefix: 'c_unitDamageTypeSplash'
		body: 'c_unitDamageTypeSplash'
	'int c_unitVitalAny':
		prefix: 'c_unitVitalAny'
		body: 'c_unitVitalAny'
	'int c_unitInventoryChangeUses':
		prefix: 'c_unitInventoryChangeUses'
		body: 'c_unitInventoryChangeUses'
	'int c_unitInventoryChangeExhausts':
		prefix: 'c_unitInventoryChangeExhausts'
		body: 'c_unitInventoryChangeExhausts'
	'int c_unitInventoryChangeGains':
		prefix: 'c_unitInventoryChangeGains'
		body: 'c_unitInventoryChangeGains'
	'int c_unitInventoryChangeLoses':
		prefix: 'c_unitInventoryChangeLoses'
		body: 'c_unitInventoryChangeLoses'
	'int c_unitInventoryChangePicksUp':
		prefix: 'c_unitInventoryChangePicksUp'
		body: 'c_unitInventoryChangePicksUp'
	'int c_unitInventoryChangeDrops':
		prefix: 'c_unitInventoryChangeDrops'
		body: 'c_unitInventoryChangeDrops'
	'int c_unitInventoryChangeBuys':
		prefix: 'c_unitInventoryChangeBuys'
		body: 'c_unitInventoryChangeBuys'
	'int c_unitInventoryChangeSells':
		prefix: 'c_unitInventoryChangeSells'
		body: 'c_unitInventoryChangeSells'
	'int c_unitInventoryChangeGives':
		prefix: 'c_unitInventoryChangeGives'
		body: 'c_unitInventoryChangeGives'
	'int c_unitInventoryChangeReceives':
		prefix: 'c_unitInventoryChangeReceives'
		body: 'c_unitInventoryChangeReceives'
	'int c_unitInventoryChangeMoves':
		prefix: 'c_unitInventoryChangeMoves'
		body: 'c_unitInventoryChangeMoves'
	'int c_unitAbilStageUnpause':
		prefix: 'c_unitAbilStageUnpause'
		body: 'c_unitAbilStageUnpause'
	'int c_unitAbilStagePause':
		prefix: 'c_unitAbilStagePause'
		body: 'c_unitAbilStagePause'
	'int c_unitAbilStageComplete':
		prefix: 'c_unitAbilStageComplete'
		body: 'c_unitAbilStageComplete'
	'int c_unitAbilStagePreempt':
		prefix: 'c_unitAbilStagePreempt'
		body: 'c_unitAbilStagePreempt'
	'int c_unitAbilStageCancel':
		prefix: 'c_unitAbilStageCancel'
		body: 'c_unitAbilStageCancel'
	'int c_unitAbilStageExecute':
		prefix: 'c_unitAbilStageExecute'
		body: 'c_unitAbilStageExecute'
	'int c_unitAbilStageQueue':
		prefix: 'c_unitAbilStageQueue'
		body: 'c_unitAbilStageQueue'
	'int c_unitAbilStageAll':
		prefix: 'c_unitAbilStageAll'
		body: 'c_unitAbilStageAll'
	'int c_unitAbilAutoCastChangeAll':
		prefix: 'c_unitAbilAutoCastChangeAll'
		body: 'c_unitAbilAutoCastChangeAll'
	'int c_unitAbilAutoCastChangeOff':
		prefix: 'c_unitAbilAutoCastChangeOff'
		body: 'c_unitAbilAutoCastChangeOff'
	'int c_unitAbilAutoCastChangeOn':
		prefix: 'c_unitAbilAutoCastChangeOn'
		body: 'c_unitAbilAutoCastChangeOn'
	'int c_unitBehaviorChangeAny':
		prefix: 'c_unitBehaviorChangeAny'
		body: 'c_unitBehaviorChangeAny'
	'int c_unitBehaviorChangeCreate':
		prefix: 'c_unitBehaviorChangeCreate'
		body: 'c_unitBehaviorChangeCreate'
	'int c_unitBehaviorChangeDestroy':
		prefix: 'c_unitBehaviorChangeDestroy'
		body: 'c_unitBehaviorChangeDestroy'
	'int c_unitBehaviorChangeRefresh':
		prefix: 'c_unitBehaviorChangeRefresh'
		body: 'c_unitBehaviorChangeRefresh'
	'int c_unitBehaviorChangeIncrease':
		prefix: 'c_unitBehaviorChangeIncrease'
		body: 'c_unitBehaviorChangeIncrease'
	'int c_unitBehaviorChangeDecrease':
		prefix: 'c_unitBehaviorChangeDecrease'
		body: 'c_unitBehaviorChangeDecrease'
	'int c_unitBehaviorChangeActivate':
		prefix: 'c_unitBehaviorChangeActivate'
		body: 'c_unitBehaviorChangeActivate'
	'int c_unitBehaviorChangeDeactivate':
		prefix: 'c_unitBehaviorChangeDeactivate'
		body: 'c_unitBehaviorChangeDeactivate'
	'int c_unitFilterAllowed':
		prefix: 'c_unitFilterAllowed'
		body: 'c_unitFilterAllowed'
	'int c_unitFilterRequired':
		prefix: 'c_unitFilterRequired'
		body: 'c_unitFilterRequired'
	'int c_unitFilterExcluded':
		prefix: 'c_unitFilterExcluded'
		body: 'c_unitFilterExcluded'
	'int c_unitAllianceAny':
		prefix: 'c_unitAllianceAny'
		body: 'c_unitAllianceAny'
	'int c_unitAllianceAlly':
		prefix: 'c_unitAllianceAlly'
		body: 'c_unitAllianceAlly'
	'int c_unitAllianceEnemy':
		prefix: 'c_unitAllianceEnemy'
		body: 'c_unitAllianceEnemy'
	'int c_unitAllianceAllyExcludeSelf':
		prefix: 'c_unitAllianceAllyExcludeSelf'
		body: 'c_unitAllianceAllyExcludeSelf'
	'int c_unitAllianceAnyExcludeSelf':
		prefix: 'c_unitAllianceAnyExcludeSelf'
		body: 'c_unitAllianceAnyExcludeSelf'
	'int c_noMaxCount':
		prefix: 'c_noMaxCount'
		body: 'c_noMaxCount'
	'int c_unitCountAll':
		prefix: 'c_unitCountAll'
		body: 'c_unitCountAll'
	'int c_unitCountAlive':
		prefix: 'c_unitCountAlive'
		body: 'c_unitCountAlive'
	'int c_unitCountDead':
		prefix: 'c_unitCountDead'
		body: 'c_unitCountDead'
	'fixed c_transitionDurationImmediate':
		prefix: 'c_transitionDurationImmediate'
		body: 'c_transitionDurationImmediate'
	'fixed c_transitionDurationDefault':
		prefix: 'c_transitionDurationDefault'
		body: 'c_transitionDurationDefault'
	'int c_messageAreaAll':
		prefix: 'c_messageAreaAll'
		body: 'c_messageAreaAll'
	'int c_messageAreaChat':
		prefix: 'c_messageAreaChat'
		body: 'c_messageAreaChat'
	'int c_messageAreaObjective':
		prefix: 'c_messageAreaObjective'
		body: 'c_messageAreaObjective'
	'int c_messageAreaDirective':
		prefix: 'c_messageAreaDirective'
		body: 'c_messageAreaDirective'
	'int c_messageAreaError':
		prefix: 'c_messageAreaError'
		body: 'c_messageAreaError'
	'int c_messageAreaSubtitle':
		prefix: 'c_messageAreaSubtitle'
		body: 'c_messageAreaSubtitle'
	'int c_messageAreaCinematic':
		prefix: 'c_messageAreaCinematic'
		body: 'c_messageAreaCinematic'
	'int c_messageAreaDebug':
		prefix: 'c_messageAreaDebug'
		body: 'c_messageAreaDebug'
	'int c_messageAreaWarning':
		prefix: 'c_messageAreaWarning'
		body: 'c_messageAreaWarning'
	'int c_messageAreaCheat':
		prefix: 'c_messageAreaCheat'
		body: 'c_messageAreaCheat'
	'int c_uiModeFullscreen':
		prefix: 'c_uiModeFullscreen'
		body: 'c_uiModeFullscreen'
	'int c_uiModeLetterboxed':
		prefix: 'c_uiModeLetterboxed'
		body: 'c_uiModeLetterboxed'
	'int c_uiModeConsole':
		prefix: 'c_uiModeConsole'
		body: 'c_uiModeConsole'
	'int c_mouseButtonNone':
		prefix: 'c_mouseButtonNone'
		body: 'c_mouseButtonNone'
	'int c_mouseButtonLeft':
		prefix: 'c_mouseButtonLeft'
		body: 'c_mouseButtonLeft'
	'int c_mouseButtonMiddle':
		prefix: 'c_mouseButtonMiddle'
		body: 'c_mouseButtonMiddle'
	'int c_mouseButtonRight':
		prefix: 'c_mouseButtonRight'
		body: 'c_mouseButtonRight'
	'int c_mouseButtonXButton1':
		prefix: 'c_mouseButtonXButton1'
		body: 'c_mouseButtonXButton1'
	'int c_mouseButtonXButton2':
		prefix: 'c_mouseButtonXButton2'
		body: 'c_mouseButtonXButton2'
	'int c_mouseButtonFlagLeft':
		prefix: 'c_mouseButtonFlagLeft'
		body: 'c_mouseButtonFlagLeft'
	'int c_mouseButtonFlagMiddle':
		prefix: 'c_mouseButtonFlagMiddle'
		body: 'c_mouseButtonFlagMiddle'
	'int c_mouseButtonFlagRight':
		prefix: 'c_mouseButtonFlagRight'
		body: 'c_mouseButtonFlagRight'
	'int c_mouseButtonFlagXButton1':
		prefix: 'c_mouseButtonFlagXButton1'
		body: 'c_mouseButtonFlagXButton1'
	'int c_mouseButtonFlagXButton2':
		prefix: 'c_mouseButtonFlagXButton2'
		body: 'c_mouseButtonFlagXButton2'
	'int c_scaleNormal':
		prefix: 'c_scaleNormal'
		body: 'c_scaleNormal'
	'int c_scaleAspect':
		prefix: 'c_scaleAspect'
		body: 'c_scaleAspect'
	'int c_scaleStretch':
		prefix: 'c_scaleStretch'
		body: 'c_scaleStretch'
	'int c_achievementToastStyleTerran':
		prefix: 'c_achievementToastStyleTerran'
		body: 'c_achievementToastStyleTerran'
	'int c_achievementToastStyleZerg':
		prefix: 'c_achievementToastStyleZerg'
		body: 'c_achievementToastStyleZerg'
	'int c_achievementToastStyleProtoss':
		prefix: 'c_achievementToastStyleProtoss'
		body: 'c_achievementToastStyleProtoss'
	'int c_keyNone':
		prefix: 'c_keyNone'
		body: 'c_keyNone'
	'int c_keyShift':
		prefix: 'c_keyShift'
		body: 'c_keyShift'
	'int c_keyControl':
		prefix: 'c_keyControl'
		body: 'c_keyControl'
	'int c_keyAlt':
		prefix: 'c_keyAlt'
		body: 'c_keyAlt'
	'int c_key0':
		prefix: 'c_key0'
		body: 'c_key0'
	'int c_key1':
		prefix: 'c_key1'
		body: 'c_key1'
	'int c_key2':
		prefix: 'c_key2'
		body: 'c_key2'
	'int c_key3':
		prefix: 'c_key3'
		body: 'c_key3'
	'int c_key4':
		prefix: 'c_key4'
		body: 'c_key4'
	'int c_key5':
		prefix: 'c_key5'
		body: 'c_key5'
	'int c_key6':
		prefix: 'c_key6'
		body: 'c_key6'
	'int c_key7':
		prefix: 'c_key7'
		body: 'c_key7'
	'int c_key8':
		prefix: 'c_key8'
		body: 'c_key8'
	'int c_key9':
		prefix: 'c_key9'
		body: 'c_key9'
	'int c_keyA':
		prefix: 'c_keyA'
		body: 'c_keyA'
	'int c_keyB':
		prefix: 'c_keyB'
		body: 'c_keyB'
	'int c_keyC':
		prefix: 'c_keyC'
		body: 'c_keyC'
	'int c_keyD':
		prefix: 'c_keyD'
		body: 'c_keyD'
	'int c_keyE':
		prefix: 'c_keyE'
		body: 'c_keyE'
	'int c_keyF':
		prefix: 'c_keyF'
		body: 'c_keyF'
	'int c_keyG':
		prefix: 'c_keyG'
		body: 'c_keyG'
	'int c_keyH':
		prefix: 'c_keyH'
		body: 'c_keyH'
	'int c_keyI':
		prefix: 'c_keyI'
		body: 'c_keyI'
	'int c_keyJ':
		prefix: 'c_keyJ'
		body: 'c_keyJ'
	'int c_keyK':
		prefix: 'c_keyK'
		body: 'c_keyK'
	'int c_keyL':
		prefix: 'c_keyL'
		body: 'c_keyL'
	'int c_keyM':
		prefix: 'c_keyM'
		body: 'c_keyM'
	'int c_keyN':
		prefix: 'c_keyN'
		body: 'c_keyN'
	'int c_keyO':
		prefix: 'c_keyO'
		body: 'c_keyO'
	'int c_keyP':
		prefix: 'c_keyP'
		body: 'c_keyP'
	'int c_keyQ':
		prefix: 'c_keyQ'
		body: 'c_keyQ'
	'int c_keyR':
		prefix: 'c_keyR'
		body: 'c_keyR'
	'int c_keyS':
		prefix: 'c_keyS'
		body: 'c_keyS'
	'int c_keyT':
		prefix: 'c_keyT'
		body: 'c_keyT'
	'int c_keyU':
		prefix: 'c_keyU'
		body: 'c_keyU'
	'int c_keyV':
		prefix: 'c_keyV'
		body: 'c_keyV'
	'int c_keyW':
		prefix: 'c_keyW'
		body: 'c_keyW'
	'int c_keyX':
		prefix: 'c_keyX'
		body: 'c_keyX'
	'int c_keyY':
		prefix: 'c_keyY'
		body: 'c_keyY'
	'int c_keyZ':
		prefix: 'c_keyZ'
		body: 'c_keyZ'
	'int c_keySpace':
		prefix: 'c_keySpace'
		body: 'c_keySpace'
	'int c_keyGrave':
		prefix: 'c_keyGrave'
		body: 'c_keyGrave'
	'int c_keyNumPad0':
		prefix: 'c_keyNumPad0'
		body: 'c_keyNumPad0'
	'int c_keyNumPad1':
		prefix: 'c_keyNumPad1'
		body: 'c_keyNumPad1'
	'int c_keyNumPad2':
		prefix: 'c_keyNumPad2'
		body: 'c_keyNumPad2'
	'int c_keyNumPad3':
		prefix: 'c_keyNumPad3'
		body: 'c_keyNumPad3'
	'int c_keyNumPad4':
		prefix: 'c_keyNumPad4'
		body: 'c_keyNumPad4'
	'int c_keyNumPad5':
		prefix: 'c_keyNumPad5'
		body: 'c_keyNumPad5'
	'int c_keyNumPad6':
		prefix: 'c_keyNumPad6'
		body: 'c_keyNumPad6'
	'int c_keyNumPad7':
		prefix: 'c_keyNumPad7'
		body: 'c_keyNumPad7'
	'int c_keyNumPad8':
		prefix: 'c_keyNumPad8'
		body: 'c_keyNumPad8'
	'int c_keyNumPad9':
		prefix: 'c_keyNumPad9'
		body: 'c_keyNumPad9'
	'int c_keyNumPadPlus':
		prefix: 'c_keyNumPadPlus'
		body: 'c_keyNumPadPlus'
	'int c_keyNumPadMinus':
		prefix: 'c_keyNumPadMinus'
		body: 'c_keyNumPadMinus'
	'int c_keyNumPadMultiply':
		prefix: 'c_keyNumPadMultiply'
		body: 'c_keyNumPadMultiply'
	'int c_keyNumPadDivide':
		prefix: 'c_keyNumPadDivide'
		body: 'c_keyNumPadDivide'
	'int c_keyNumPadDecimal':
		prefix: 'c_keyNumPadDecimal'
		body: 'c_keyNumPadDecimal'
	'int c_keyEquals':
		prefix: 'c_keyEquals'
		body: 'c_keyEquals'
	'int c_keyMinus':
		prefix: 'c_keyMinus'
		body: 'c_keyMinus'
	'int c_keyBracketOpen':
		prefix: 'c_keyBracketOpen'
		body: 'c_keyBracketOpen'
	'int c_keyBracketClose':
		prefix: 'c_keyBracketClose'
		body: 'c_keyBracketClose'
	'int c_keyBackSlash':
		prefix: 'c_keyBackSlash'
		body: 'c_keyBackSlash'
	'int c_keySemiColon':
		prefix: 'c_keySemiColon'
		body: 'c_keySemiColon'
	'int c_keyApostrophe':
		prefix: 'c_keyApostrophe'
		body: 'c_keyApostrophe'
	'int c_keyComma':
		prefix: 'c_keyComma'
		body: 'c_keyComma'
	'int c_keyPeriod':
		prefix: 'c_keyPeriod'
		body: 'c_keyPeriod'
	'int c_keySlash':
		prefix: 'c_keySlash'
		body: 'c_keySlash'
	'int c_keyEscape':
		prefix: 'c_keyEscape'
		body: 'c_keyEscape'
	'int c_keyEnter':
		prefix: 'c_keyEnter'
		body: 'c_keyEnter'
	'int c_keyBackSpace':
		prefix: 'c_keyBackSpace'
		body: 'c_keyBackSpace'
	'int c_keyTab':
		prefix: 'c_keyTab'
		body: 'c_keyTab'
	'int c_keyLeft':
		prefix: 'c_keyLeft'
		body: 'c_keyLeft'
	'int c_keyUp':
		prefix: 'c_keyUp'
		body: 'c_keyUp'
	'int c_keyRight':
		prefix: 'c_keyRight'
		body: 'c_keyRight'
	'int c_keyDown':
		prefix: 'c_keyDown'
		body: 'c_keyDown'
	'int c_keyInsert':
		prefix: 'c_keyInsert'
		body: 'c_keyInsert'
	'int c_keyDelete':
		prefix: 'c_keyDelete'
		body: 'c_keyDelete'
	'int c_keyHome':
		prefix: 'c_keyHome'
		body: 'c_keyHome'
	'int c_keyEnd':
		prefix: 'c_keyEnd'
		body: 'c_keyEnd'
	'int c_keyPageUp':
		prefix: 'c_keyPageUp'
		body: 'c_keyPageUp'
	'int c_keyPageDown':
		prefix: 'c_keyPageDown'
		body: 'c_keyPageDown'
	'int c_keyCapsLock':
		prefix: 'c_keyCapsLock'
		body: 'c_keyCapsLock'
	'int c_keyNumLock':
		prefix: 'c_keyNumLock'
		body: 'c_keyNumLock'
	'int c_keyScrollLock':
		prefix: 'c_keyScrollLock'
		body: 'c_keyScrollLock'
	'int c_keyPause':
		prefix: 'c_keyPause'
		body: 'c_keyPause'
	'int c_keyPrintScreen':
		prefix: 'c_keyPrintScreen'
		body: 'c_keyPrintScreen'
	'int c_keyNextTrack':
		prefix: 'c_keyNextTrack'
		body: 'c_keyNextTrack'
	'int c_keyPrevTrack':
		prefix: 'c_keyPrevTrack'
		body: 'c_keyPrevTrack'
	'int c_keyF1':
		prefix: 'c_keyF1'
		body: 'c_keyF1'
	'int c_keyF2':
		prefix: 'c_keyF2'
		body: 'c_keyF2'
	'int c_keyF3':
		prefix: 'c_keyF3'
		body: 'c_keyF3'
	'int c_keyF4':
		prefix: 'c_keyF4'
		body: 'c_keyF4'
	'int c_keyF5':
		prefix: 'c_keyF5'
		body: 'c_keyF5'
	'int c_keyF6':
		prefix: 'c_keyF6'
		body: 'c_keyF6'
	'int c_keyF7':
		prefix: 'c_keyF7'
		body: 'c_keyF7'
	'int c_keyF8':
		prefix: 'c_keyF8'
		body: 'c_keyF8'
	'int c_keyF9':
		prefix: 'c_keyF9'
		body: 'c_keyF9'
	'int c_keyF10':
		prefix: 'c_keyF10'
		body: 'c_keyF10'
	'int c_keyF11':
		prefix: 'c_keyF11'
		body: 'c_keyF11'
	'int c_keyF12':
		prefix: 'c_keyF12'
		body: 'c_keyF12'
	'int c_keyModifierStateIgnore':
		prefix: 'c_keyModifierStateIgnore'
		body: 'c_keyModifierStateIgnore'
	'int c_keyModifierStateRequire':
		prefix: 'c_keyModifierStateRequire'
		body: 'c_keyModifierStateRequire'
	'int c_keyModifierStateExclude':
		prefix: 'c_keyModifierStateExclude'
		body: 'c_keyModifierStateExclude'
	'int c_customDialogTypeMessage':
		prefix: 'c_customDialogTypeMessage'
		body: 'c_customDialogTypeMessage'
	'int c_customDialogTypeQuery':
		prefix: 'c_customDialogTypeQuery'
		body: 'c_customDialogTypeQuery'
	'int c_customDialogResultAny':
		prefix: 'c_customDialogResultAny'
		body: 'c_customDialogResultAny'
	'int c_customDialogResultYes':
		prefix: 'c_customDialogResultYes'
		body: 'c_customDialogResultYes'
	'int c_customDialogResultNo':
		prefix: 'c_customDialogResultNo'
		body: 'c_customDialogResultNo'
	'int c_syncFrameTypeMenuBar':
		prefix: 'c_syncFrameTypeMenuBar'
		body: 'c_syncFrameTypeMenuBar'
	'int c_syncFrameTypeCashPanel':
		prefix: 'c_syncFrameTypeCashPanel'
		body: 'c_syncFrameTypeCashPanel'
	'int c_syncFrameTypeTipAlertPanel':
		prefix: 'c_syncFrameTypeTipAlertPanel'
		body: 'c_syncFrameTypeTipAlertPanel'
	'int c_syncFrameTypeObjectivePanel':
		prefix: 'c_syncFrameTypeObjectivePanel'
		body: 'c_syncFrameTypeObjectivePanel'
	'int c_syncFrameTypeCharacterSheetButton':
		prefix: 'c_syncFrameTypeCharacterSheetButton'
		body: 'c_syncFrameTypeCharacterSheetButton'
	'int c_syncFrameTypeSupply':
		prefix: 'c_syncFrameTypeSupply'
		body: 'c_syncFrameTypeSupply'
	'int c_syncFrameTypeResourcePanel':
		prefix: 'c_syncFrameTypeResourcePanel'
		body: 'c_syncFrameTypeResourcePanel'
	'int c_syncFrameTypeRoomPanel':
		prefix: 'c_syncFrameTypeRoomPanel'
		body: 'c_syncFrameTypeRoomPanel'
	'int c_syncFrameTypePlanetPanel':
		prefix: 'c_syncFrameTypePlanetPanel'
		body: 'c_syncFrameTypePlanetPanel'
	'int c_syncFrameTypeMercenaryPanel':
		prefix: 'c_syncFrameTypeMercenaryPanel'
		body: 'c_syncFrameTypeMercenaryPanel'
	'int c_syncFrameTypeResearchPanel':
		prefix: 'c_syncFrameTypeResearchPanel'
		body: 'c_syncFrameTypeResearchPanel'
	'int c_syncFrameTypePurchasePanel':
		prefix: 'c_syncFrameTypePurchasePanel'
		body: 'c_syncFrameTypePurchasePanel'
	'int c_syncFrameTypeVictoryPanel':
		prefix: 'c_syncFrameTypeVictoryPanel'
		body: 'c_syncFrameTypeVictoryPanel'
	'int c_syncFrameTypeBattleReportPanel':
		prefix: 'c_syncFrameTypeBattleReportPanel'
		body: 'c_syncFrameTypeBattleReportPanel'
	'int c_syncFrameTypeAlertPanel':
		prefix: 'c_syncFrameTypeAlertPanel'
		body: 'c_syncFrameTypeAlertPanel'
	'int c_syncFrameTypeHeroPanel':
		prefix: 'c_syncFrameTypeHeroPanel'
		body: 'c_syncFrameTypeHeroPanel'
	'int c_syncFrameTypeErrorDisplayPanel':
		prefix: 'c_syncFrameTypeErrorDisplayPanel'
		body: 'c_syncFrameTypeErrorDisplayPanel'
	'int c_syncFrameTypeCreditsPanel':
		prefix: 'c_syncFrameTypeCreditsPanel'
		body: 'c_syncFrameTypeCreditsPanel'
	'int c_syncFrameTypeTechTreePanel':
		prefix: 'c_syncFrameTypeTechTreePanel'
		body: 'c_syncFrameTypeTechTreePanel'
	'int c_syncFrameTypeTechGlossaryPanel':
		prefix: 'c_syncFrameTypeTechGlossaryPanel'
		body: 'c_syncFrameTypeTechGlossaryPanel'
	'int c_syncFrameTypeBattleUI':
		prefix: 'c_syncFrameTypeBattleUI'
		body: 'c_syncFrameTypeBattleUI'
	'int c_syncFrameTypeMinimapPanel':
		prefix: 'c_syncFrameTypeMinimapPanel'
		body: 'c_syncFrameTypeMinimapPanel'
	'int c_syncFrameTypeCommandPanel':
		prefix: 'c_syncFrameTypeCommandPanel'
		body: 'c_syncFrameTypeCommandPanel'
	'int c_syncFrameTypeInventoryPanel':
		prefix: 'c_syncFrameTypeInventoryPanel'
		body: 'c_syncFrameTypeInventoryPanel'
	'int c_syncFrameTypeAllianceButton':
		prefix: 'c_syncFrameTypeAllianceButton'
		body: 'c_syncFrameTypeAllianceButton'
	'int c_syncFrameTypeTeamResourceButton':
		prefix: 'c_syncFrameTypeTeamResourceButton'
		body: 'c_syncFrameTypeTeamResourceButton'
	'int c_syncFrameTypeAchievementMenuButton':
		prefix: 'c_syncFrameTypeAchievementMenuButton'
		body: 'c_syncFrameTypeAchievementMenuButton'
	'int c_syncFrameTypeHelpMenuButton':
		prefix: 'c_syncFrameTypeHelpMenuButton'
		body: 'c_syncFrameTypeHelpMenuButton'
	'int c_syncFrameTypeMissionTimePanel':
		prefix: 'c_syncFrameTypeMissionTimePanel'
		body: 'c_syncFrameTypeMissionTimePanel'
	'int c_syncFrameTypeControlGroupPanel':
		prefix: 'c_syncFrameTypeControlGroupPanel'
		body: 'c_syncFrameTypeControlGroupPanel'
	'int c_syncFrameTypeInfoPanel':
		prefix: 'c_syncFrameTypeInfoPanel'
		body: 'c_syncFrameTypeInfoPanel'
	'int c_syncFrameTypeConsolePanel':
		prefix: 'c_syncFrameTypeConsolePanel'
		body: 'c_syncFrameTypeConsolePanel'
	'int c_syncFrameTypeIdleWorkerButton':
		prefix: 'c_syncFrameTypeIdleWorkerButton'
		body: 'c_syncFrameTypeIdleWorkerButton'
	'int c_syncFrameTypePylonButton':
		prefix: 'c_syncFrameTypePylonButton'
		body: 'c_syncFrameTypePylonButton'
	'int c_syncFrameTypeLeaderPanel':
		prefix: 'c_syncFrameTypeLeaderPanel'
		body: 'c_syncFrameTypeLeaderPanel'
	'int c_syncFrameTypeStatusUI':
		prefix: 'c_syncFrameTypeStatusUI'
		body: 'c_syncFrameTypeStatusUI'
	'int c_syncFrameTypeArmyButton':
		prefix: 'c_syncFrameTypeArmyButton'
		body: 'c_syncFrameTypeArmyButton'
	'int c_syncFrameTypeTextTag':
		prefix: 'c_syncFrameTypeTextTag'
		body: 'c_syncFrameTypeTextTag'
	'int c_syncFrameTypePingPanel':
		prefix: 'c_syncFrameTypePingPanel'
		body: 'c_syncFrameTypePingPanel'
	'int c_syncFrameTypeFirst':
		prefix: 'c_syncFrameTypeFirst'
		body: 'c_syncFrameTypeFirst'
	'int c_syncFrameTypeLast':
		prefix: 'c_syncFrameTypeLast'
		body: 'c_syncFrameTypeLast'
	'int c_gameMenuDialogItemAny':
		prefix: 'c_gameMenuDialogItemAny'
		body: 'c_gameMenuDialogItemAny'
	'int c_gameMenuDialogAbortButton':
		prefix: 'c_gameMenuDialogAbortButton'
		body: 'c_gameMenuDialogAbortButton'
	'int c_gameMenuDialogGenericButton1':
		prefix: 'c_gameMenuDialogGenericButton1'
		body: 'c_gameMenuDialogGenericButton1'
	'int c_gameMenuDialogGenericButton2':
		prefix: 'c_gameMenuDialogGenericButton2'
		body: 'c_gameMenuDialogGenericButton2'
	'int c_gameMenuDialogGenericButton3':
		prefix: 'c_gameMenuDialogGenericButton3'
		body: 'c_gameMenuDialogGenericButton3'
	'int c_gameMenuDialogGenericButton4':
		prefix: 'c_gameMenuDialogGenericButton4'
		body: 'c_gameMenuDialogGenericButton4'
	'int c_gameMenuDialogGenericButton5':
		prefix: 'c_gameMenuDialogGenericButton5'
		body: 'c_gameMenuDialogGenericButton5'
	'int c_gameMenuDialogGenericButton6':
		prefix: 'c_gameMenuDialogGenericButton6'
		body: 'c_gameMenuDialogGenericButton6'
	'int c_gameMenuDialogGenericButton7':
		prefix: 'c_gameMenuDialogGenericButton7'
		body: 'c_gameMenuDialogGenericButton7'
	'int c_gameMenuDialogGenericButton8':
		prefix: 'c_gameMenuDialogGenericButton8'
		body: 'c_gameMenuDialogGenericButton8'
	'int c_gameMenuDialogGenericButton9':
		prefix: 'c_gameMenuDialogGenericButton9'
		body: 'c_gameMenuDialogGenericButton9'
	'int c_gameMenuDialogGenericButton10':
		prefix: 'c_gameMenuDialogGenericButton10'
		body: 'c_gameMenuDialogGenericButton10'
	'int c_gameMenuDialogOptionsButton':
		prefix: 'c_gameMenuDialogOptionsButton'
		body: 'c_gameMenuDialogOptionsButton'
	'int c_gameMenuDIalogHotkeysButton':
		prefix: 'c_gameMenuDIalogHotkeysButton'
		body: 'c_gameMenuDIalogHotkeysButton'
	'int c_gameMenuDialogLoadButton':
		prefix: 'c_gameMenuDialogLoadButton'
		body: 'c_gameMenuDialogLoadButton'
	'int c_gameMenuDialogSaveButton':
		prefix: 'c_gameMenuDialogSaveButton'
		body: 'c_gameMenuDialogSaveButton'
	'int c_gameMenuDialogPauseButton':
		prefix: 'c_gameMenuDialogPauseButton'
		body: 'c_gameMenuDialogPauseButton'
	'int c_gameMenuDialogRestartButton':
		prefix: 'c_gameMenuDialogRestartButton'
		body: 'c_gameMenuDialogRestartButton'
	'int c_gameMenuDialogReturnToGameplayButton':
		prefix: 'c_gameMenuDialogReturnToGameplayButton'
		body: 'c_gameMenuDialogReturnToGameplayButton'
	'int c_gameMenuDialogRestartDifficultyPulldown':
		prefix: 'c_gameMenuDialogRestartDifficultyPulldown'
		body: 'c_gameMenuDialogRestartDifficultyPulldown'
	'int c_gameMenuDialogQuitButton':
		prefix: 'c_gameMenuDialogQuitButton'
		body: 'c_gameMenuDialogQuitButton'
	'int c_gameMenuDialogLoadReplayButton':
		prefix: 'c_gameMenuDialogLoadReplayButton'
		body: 'c_gameMenuDialogLoadReplayButton'
	'int c_gameMenuDialogLoadLastButton':
		prefix: 'c_gameMenuDialogLoadLastButton'
		body: 'c_gameMenuDialogLoadLastButton'
	'int c_gameMenuDialogMoreOptionsButton':
		prefix: 'c_gameMenuDialogMoreOptionsButton'
		body: 'c_gameMenuDialogMoreOptionsButton'
	'int c_gameMenuDialogEndGameButton':
		prefix: 'c_gameMenuDialogEndGameButton'
		body: 'c_gameMenuDialogEndGameButton'
	'int c_gameMenuDialogAchievementsButton':
		prefix: 'c_gameMenuDialogAchievementsButton'
		body: 'c_gameMenuDialogAchievementsButton'
	'int c_gameMenuDialogMessageLogButton':
		prefix: 'c_gameMenuDialogMessageLogButton'
		body: 'c_gameMenuDialogMessageLogButton'
	'int c_gameMenuDialogExitButton':
		prefix: 'c_gameMenuDialogExitButton'
		body: 'c_gameMenuDialogExitButton'
	'int c_uiCommandAllowButtons':
		prefix: 'c_uiCommandAllowButtons'
		body: 'c_uiCommandAllowButtons'
	'int c_uiCommandAllowHotkeys':
		prefix: 'c_uiCommandAllowHotkeys'
		body: 'c_uiCommandAllowHotkeys'
	'int c_uiCommandAllowSmartClick':
		prefix: 'c_uiCommandAllowSmartClick'
		body: 'c_uiCommandAllowSmartClick'
	'int c_uiCommandAllowModifiers':
		prefix: 'c_uiCommandAllowModifiers'
		body: 'c_uiCommandAllowModifiers'
	'int c_uiCommandAllowInfoPanel':
		prefix: 'c_uiCommandAllowInfoPanel'
		body: 'c_uiCommandAllowInfoPanel'
	'int c_uiCommandAllowMinimap':
		prefix: 'c_uiCommandAllowMinimap'
		body: 'c_uiCommandAllowMinimap'
	'int c_uiCommandAllowPings':
		prefix: 'c_uiCommandAllowPings'
		body: 'c_uiCommandAllowPings'
	'int c_localSelectionTypeUnknown':
		prefix: 'c_localSelectionTypeUnknown'
		body: 'c_localSelectionTypeUnknown'
	'int c_localSelectionTypeControlGroup':
		prefix: 'c_localSelectionTypeControlGroup'
		body: 'c_localSelectionTypeControlGroup'
	'int c_localSelectionTypeIdleButton':
		prefix: 'c_localSelectionTypeIdleButton'
		body: 'c_localSelectionTypeIdleButton'
	'int c_localSelectionTypePylonButton':
		prefix: 'c_localSelectionTypePylonButton'
		body: 'c_localSelectionTypePylonButton'
	'int c_localSelectionTypeSelectLarva':
		prefix: 'c_localSelectionTypeSelectLarva'
		body: 'c_localSelectionTypeSelectLarva'
	'int c_localSelectionTypeSelectBuilder':
		prefix: 'c_localSelectionTypeSelectBuilder'
		body: 'c_localSelectionTypeSelectBuilder'
	'int c_localSelectionTypeAlert':
		prefix: 'c_localSelectionTypeAlert'
		body: 'c_localSelectionTypeAlert'
	'int c_localSelectionTypeHeroPanel':
		prefix: 'c_localSelectionTypeHeroPanel'
		body: 'c_localSelectionTypeHeroPanel'
	'int c_localSelectionTypeInfoPanel':
		prefix: 'c_localSelectionTypeInfoPanel'
		body: 'c_localSelectionTypeInfoPanel'
	'int c_localSelectionTypeWorldPanel':
		prefix: 'c_localSelectionTypeWorldPanel'
		body: 'c_localSelectionTypeWorldPanel'
	'int c_localSelectionTypeArmyButton':
		prefix: 'c_localSelectionTypeArmyButton'
		body: 'c_localSelectionTypeArmyButton'
	'int c_targetModeStateAny':
		prefix: 'c_targetModeStateAny'
		body: 'c_targetModeStateAny'
	'int c_targetModeStateOff':
		prefix: 'c_targetModeStateOff'
		body: 'c_targetModeStateOff'
	'int c_targetModeStateOn':
		prefix: 'c_targetModeStateOn'
		body: 'c_targetModeStateOn'
	'int c_visTypeMask':
		prefix: 'c_visTypeMask'
		body: 'c_visTypeMask'
	'int c_visTypeFog':
		prefix: 'c_visTypeFog'
		body: 'c_visTypeFog'
	'int c_fillTypeFogged':
		prefix: 'c_fillTypeFogged'
		body: 'c_fillTypeFogged'
	'int c_fillTypeMasked':
		prefix: 'c_fillTypeMasked'
		body: 'c_fillTypeMasked'
	'int c_fillTypeHidden':
		prefix: 'c_fillTypeHidden'
		body: 'c_fillTypeHidden'
	'int c_fillTypeUnexplored':
		prefix: 'c_fillTypeUnexplored'
		body: 'c_fillTypeUnexplored'
	'int libNtve_ge_CinematicTransitionStyle_Mission':
		prefix: 'libNtve_ge_CinematicTransitionStyle_Mission'
		body: 'libNtve_ge_CinematicTransitionStyle_Mission'
	'int libNtve_ge_CinematicTransitionStyle_Story':
		prefix: 'libNtve_ge_CinematicTransitionStyle_Story'
		body: 'libNtve_ge_CinematicTransitionStyle_Story'
	'int libNtve_ge_ExplosionSize_Large':
		prefix: 'libNtve_ge_ExplosionSize_Large'
		body: 'libNtve_ge_ExplosionSize_Large'
	'int libNtve_ge_ExplosionSize_Small':
		prefix: 'libNtve_ge_ExplosionSize_Small'
		body: 'libNtve_ge_ExplosionSize_Small'
	'int libNtve_ge_ExplosionType_Terran':
		prefix: 'libNtve_ge_ExplosionType_Terran'
		body: 'libNtve_ge_ExplosionType_Terran'
	'int libNtve_ge_ExplosionType_Protoss':
		prefix: 'libNtve_ge_ExplosionType_Protoss'
		body: 'libNtve_ge_ExplosionType_Protoss'
	'int libNtve_ge_ExplosionType_Zerg':
		prefix: 'libNtve_ge_ExplosionType_Zerg'
		body: 'libNtve_ge_ExplosionType_Zerg'
	'int libNtve_ge_AllianceSetting_Ally':
		prefix: 'libNtve_ge_AllianceSetting_Ally'
		body: 'libNtve_ge_AllianceSetting_Ally'
	'int libNtve_ge_AllianceSetting_AllyWithSharedVision':
		prefix: 'libNtve_ge_AllianceSetting_AllyWithSharedVision'
		body: 'libNtve_ge_AllianceSetting_AllyWithSharedVision'
	'int libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable':
		prefix: 'libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable'
		body: 'libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable'
	'int libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl':
		prefix: 'libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl'
		body: 'libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl'
	'int libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending':
		prefix: 'libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending'
		body: 'libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending'
	'int libNtve_ge_AllianceSetting_Enemy':
		prefix: 'libNtve_ge_AllianceSetting_Enemy'
		body: 'libNtve_ge_AllianceSetting_Enemy'
	'int libNtve_ge_AllianceSetting_EnemyWithSharedVision':
		prefix: 'libNtve_ge_AllianceSetting_EnemyWithSharedVision'
		body: 'libNtve_ge_AllianceSetting_EnemyWithSharedVision'
	'int libNtve_ge_AllianceSetting_Neutral':
		prefix: 'libNtve_ge_AllianceSetting_Neutral'
		body: 'libNtve_ge_AllianceSetting_Neutral'
	'int libNtve_ge_AllianceSetting_NeutralWithSharedVision':
		prefix: 'libNtve_ge_AllianceSetting_NeutralWithSharedVision'
		body: 'libNtve_ge_AllianceSetting_NeutralWithSharedVision'
	'int libNtve_ge_AllianceSetting_NeutralWithSharedVisionAndPushable':
		prefix: 'libNtve_ge_AllianceSetting_NeutralWithSharedVisionAndPushable'
		body: 'libNtve_ge_AllianceSetting_NeutralWithSharedVisionAndPushable'
	'int libNtve_ge_PlayerRelation_Ally':
		prefix: 'libNtve_ge_PlayerRelation_Ally'
		body: 'libNtve_ge_PlayerRelation_Ally'
	'int libNtve_ge_PlayerRelation_AllyMutual':
		prefix: 'libNtve_ge_PlayerRelation_AllyMutual'
		body: 'libNtve_ge_PlayerRelation_AllyMutual'
	'int libNtve_ge_PlayerRelation_Neutral':
		prefix: 'libNtve_ge_PlayerRelation_Neutral'
		body: 'libNtve_ge_PlayerRelation_Neutral'
	'int libNtve_ge_PlayerRelation_NeutralMutual':
		prefix: 'libNtve_ge_PlayerRelation_NeutralMutual'
		body: 'libNtve_ge_PlayerRelation_NeutralMutual'
	'int libNtve_ge_PlayerRelation_Enemy':
		prefix: 'libNtve_ge_PlayerRelation_Enemy'
		body: 'libNtve_ge_PlayerRelation_Enemy'
	'int libNtve_ge_PlayerRelation_EnemyMutual':
		prefix: 'libNtve_ge_PlayerRelation_EnemyMutual'
		body: 'libNtve_ge_PlayerRelation_EnemyMutual'
	'int libNtve_ge_CinematicPortraitIndex_CinematicPortraitTopLeft':
		prefix: 'libNtve_ge_CinematicPortraitIndex_CinematicPortraitTopLeft'
		body: 'libNtve_ge_CinematicPortraitIndex_CinematicPortraitTopLeft'
	'int libNtve_ge_CinematicPortraitIndex_CinematicPortraitTopRight':
		prefix: 'libNtve_ge_CinematicPortraitIndex_CinematicPortraitTopRight'
		body: 'libNtve_ge_CinematicPortraitIndex_CinematicPortraitTopRight'
	'int libNtve_ge_CinematicPortraitIndex_CinematicPortraitBottomLeft':
		prefix: 'libNtve_ge_CinematicPortraitIndex_CinematicPortraitBottomLeft'
		body: 'libNtve_ge_CinematicPortraitIndex_CinematicPortraitBottomLeft'
	'int libNtve_ge_CinematicPortraitIndex_CinematicPortraitBottomRight':
		prefix: 'libNtve_ge_CinematicPortraitIndex_CinematicPortraitBottomRight'
		body: 'libNtve_ge_CinematicPortraitIndex_CinematicPortraitBottomRight'
	'int libNtve_ge_CinematicPortraitIndex_CinematicPortraitCenterLeft':
		prefix: 'libNtve_ge_CinematicPortraitIndex_CinematicPortraitCenterLeft'
		body: 'libNtve_ge_CinematicPortraitIndex_CinematicPortraitCenterLeft'
	'int libNtve_ge_CinematicPortraitIndex_CinematicPortraitCenterRight':
		prefix: 'libNtve_ge_CinematicPortraitIndex_CinematicPortraitCenterRight'
		body: 'libNtve_ge_CinematicPortraitIndex_CinematicPortraitCenterRight'
	'int libNtve_ge_CinematicPortraitIndex_FullscreenPortrait':
		prefix: 'libNtve_ge_CinematicPortraitIndex_FullscreenPortrait'
		body: 'libNtve_ge_CinematicPortraitIndex_FullscreenPortrait'
	'int libNtve_ge_CinematicPortraitPosition_TopLeft':
		prefix: 'libNtve_ge_CinematicPortraitPosition_TopLeft'
		body: 'libNtve_ge_CinematicPortraitPosition_TopLeft'
	'int libNtve_ge_CinematicPortraitPosition_TopRight':
		prefix: 'libNtve_ge_CinematicPortraitPosition_TopRight'
		body: 'libNtve_ge_CinematicPortraitPosition_TopRight'
	'int libNtve_ge_CinematicPortraitPosition_BottomLeft':
		prefix: 'libNtve_ge_CinematicPortraitPosition_BottomLeft'
		body: 'libNtve_ge_CinematicPortraitPosition_BottomLeft'
	'int libNtve_ge_CinematicPortraitPosition_BottomRight':
		prefix: 'libNtve_ge_CinematicPortraitPosition_BottomRight'
		body: 'libNtve_ge_CinematicPortraitPosition_BottomRight'
	'int libNtve_ge_CinematicPortraitPosition_CenterLeft':
		prefix: 'libNtve_ge_CinematicPortraitPosition_CenterLeft'
		body: 'libNtve_ge_CinematicPortraitPosition_CenterLeft'
	'int libNtve_ge_CinematicPortraitPosition_CenterRight':
		prefix: 'libNtve_ge_CinematicPortraitPosition_CenterRight'
		body: 'libNtve_ge_CinematicPortraitPosition_CenterRight'
	'int libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection':
		prefix: 'libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection'
		body: 'libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection'
	'int libNtve_ge_UnitSelectionStoreOption_DoNotClearUnitSelection':
		prefix: 'libNtve_ge_UnitSelectionStoreOption_DoNotClearUnitSelection'
		body: 'libNtve_ge_UnitSelectionStoreOption_DoNotClearUnitSelection'
	'int libNtve_ge_VolumeChannelMode_Cinematic':
		prefix: 'libNtve_ge_VolumeChannelMode_Cinematic'
		body: 'libNtve_ge_VolumeChannelMode_Cinematic'
	'int libNtve_ge_VolumeChannelMode_Speech':
		prefix: 'libNtve_ge_VolumeChannelMode_Speech'
		body: 'libNtve_ge_VolumeChannelMode_Speech'
	'int libNtve_ge_VolumeChannelMode_Game':
		prefix: 'libNtve_ge_VolumeChannelMode_Game'
		body: 'libNtve_ge_VolumeChannelMode_Game'
	'int libNtve_ge_VolumeChannelMode_Victory':
		prefix: 'libNtve_ge_VolumeChannelMode_Victory'
		body: 'libNtve_ge_VolumeChannelMode_Victory'
	'int libNtve_ge_BossBarRace_Terran':
		prefix: 'libNtve_ge_BossBarRace_Terran'
		body: 'libNtve_ge_BossBarRace_Terran'
	'int libNtve_ge_BossBarRace_Protoss':
		prefix: 'libNtve_ge_BossBarRace_Protoss'
		body: 'libNtve_ge_BossBarRace_Protoss'
	'int libNtve_ge_BossBarRace_Zerg':
		prefix: 'libNtve_ge_BossBarRace_Zerg'
		body: 'libNtve_ge_BossBarRace_Zerg'
	'int libNtve_ge_GameUIStoreIndex_GameUI':
		prefix: 'libNtve_ge_GameUIStoreIndex_GameUI'
		body: 'libNtve_ge_GameUIStoreIndex_GameUI'
	'int libNtve_ge_GameUIStoreIndex_CinematicMode':
		prefix: 'libNtve_ge_GameUIStoreIndex_CinematicMode'
		body: 'libNtve_ge_GameUIStoreIndex_CinematicMode'
	'int libNtve_ge_GameUIStoreIndex_StoryMode':
		prefix: 'libNtve_ge_GameUIStoreIndex_StoryMode'
		body: 'libNtve_ge_GameUIStoreIndex_StoryMode'
	'int libNtve_ge_UIFrameFlag_StoryModeFrame':
		prefix: 'libNtve_ge_UIFrameFlag_StoryModeFrame'
		body: 'libNtve_ge_UIFrameFlag_StoryModeFrame'
	'int libNtve_ge_TipType_NormalTip':
		prefix: 'libNtve_ge_TipType_NormalTip'
		body: 'libNtve_ge_TipType_NormalTip'
	'int libNtve_ge_TipType_NewUnit':
		prefix: 'libNtve_ge_TipType_NewUnit'
		body: 'libNtve_ge_TipType_NewUnit'
	'int libNtve_ge_TipType_NewStructure':
		prefix: 'libNtve_ge_TipType_NewStructure'
		body: 'libNtve_ge_TipType_NewStructure'
	'int libNtve_ge_TipType_NewAbility':
		prefix: 'libNtve_ge_TipType_NewAbility'
		body: 'libNtve_ge_TipType_NewAbility'
	'int libNtve_ge_TipType_MissionStrategy':
		prefix: 'libNtve_ge_TipType_MissionStrategy'
		body: 'libNtve_ge_TipType_MissionStrategy'
	'int libNtve_ge_CustomDialogResult_c_customDialogResultAny':
		prefix: 'libNtve_ge_CustomDialogResult_c_customDialogResultAny'
		body: 'libNtve_ge_CustomDialogResult_c_customDialogResultAny'
	'int libNtve_ge_CustomDialogResult_c_customDialogResultYes':
		prefix: 'libNtve_ge_CustomDialogResult_c_customDialogResultYes'
		body: 'libNtve_ge_CustomDialogResult_c_customDialogResultYes'
	'int libNtve_ge_CustomDialogResult_c_customDialogResultNo':
		prefix: 'libNtve_ge_CustomDialogResult_c_customDialogResultNo'
		body: 'libNtve_ge_CustomDialogResult_c_customDialogResultNo'
	'int libNtve_ge_CustomDialogType_c_customDialogTypeMessage':
		prefix: 'libNtve_ge_CustomDialogType_c_customDialogTypeMessage'
		body: 'libNtve_ge_CustomDialogType_c_customDialogTypeMessage'
	'int libNtve_ge_CustomDialogType_c_customDialogTypeQuery':
		prefix: 'libNtve_ge_CustomDialogType_c_customDialogTypeQuery'
		body: 'libNtve_ge_CustomDialogType_c_customDialogTypeQuery'
	'int libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone':
		prefix: 'libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone'
		body: 'libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone'
	'int libNtve_ge_FlyerHelperDisplay_c_flyerDisplaySelected':
		prefix: 'libNtve_ge_FlyerHelperDisplay_c_flyerDisplaySelected'
		body: 'libNtve_ge_FlyerHelperDisplay_c_flyerDisplaySelected'
	'int libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll':
		prefix: 'libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll'
		body: 'libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll'
	'int libNtve_ge_ReplaceUnitOptions_OldUnits':
		prefix: 'libNtve_ge_ReplaceUnitOptions_OldUnits'
		body: 'libNtve_ge_ReplaceUnitOptions_OldUnits'
	'int libNtve_ge_ReplaceUnitOptions_OldUnitsRelative':
		prefix: 'libNtve_ge_ReplaceUnitOptions_OldUnitsRelative'
		body: 'libNtve_ge_ReplaceUnitOptions_OldUnitsRelative'
	'int libNtve_ge_ReplaceUnitOptions_NewUnitsDefault':
		prefix: 'libNtve_ge_ReplaceUnitOptions_NewUnitsDefault'
		body: 'libNtve_ge_ReplaceUnitOptions_NewUnitsDefault'
	'int libNtve_ge_ReplaceUnitOptions_NewUnitssMax':
		prefix: 'libNtve_ge_ReplaceUnitOptions_NewUnitssMax'
		body: 'libNtve_ge_ReplaceUnitOptions_NewUnitssMax'
	'int libNtve_ge_UnitDamageTakenDealt_Damage_Take':
		prefix: 'libNtve_ge_UnitDamageTakenDealt_Damage_Take'
		body: 'libNtve_ge_UnitDamageTakenDealt_Damage_Take'
	'int libNtve_ge_UnitDamageTakenDealt_Damage_Deal':
		prefix: 'libNtve_ge_UnitDamageTakenDealt_Damage_Deal'
		body: 'libNtve_ge_UnitDamageTakenDealt_Damage_Deal'
	'int libNtve_ge_UnitDamageChangeOption_Full':
		prefix: 'libNtve_ge_UnitDamageChangeOption_Full'
		body: 'libNtve_ge_UnitDamageChangeOption_Full'
	'int libNtve_ge_UnitDamageChangeOption_No':
		prefix: 'libNtve_ge_UnitDamageChangeOption_No'
		body: 'libNtve_ge_UnitDamageChangeOption_No'
	'int libNtve_ge_UnitDamageChangeOption_Minimal':
		prefix: 'libNtve_ge_UnitDamageChangeOption_Minimal'
		body: 'libNtve_ge_UnitDamageChangeOption_Minimal'
	'int libNtve_ge_UnitDamageChangeOption_Mega':
		prefix: 'libNtve_ge_UnitDamageChangeOption_Mega'
		body: 'libNtve_ge_UnitDamageChangeOption_Mega'
	'int libNtve_ge_UnitDamageChangeOption_Mega2':
		prefix: 'libNtve_ge_UnitDamageChangeOption_Mega2'
		body: 'libNtve_ge_UnitDamageChangeOption_Mega2'
	'int libNtve_gv_c_ScreenButtonMaxCount':
		prefix: 'libNtve_gv_c_ScreenButtonMaxCount'
		body: 'libNtve_gv_c_ScreenButtonMaxCount'
	'int libNtve_gv_c_ScreenImageMaxCount':
		prefix: 'libNtve_gv_c_ScreenImageMaxCount'
		body: 'libNtve_gv_c_ScreenImageMaxCount'
	'int libNtve_gv_c_ScreenLabelMaxCount':
		prefix: 'libNtve_gv_c_ScreenLabelMaxCount'
		body: 'libNtve_gv_c_ScreenLabelMaxCount'
	'int libNtve_gv_pLAYERMAX':
		prefix: 'libNtve_gv_pLAYERMAX'
		body: 'libNtve_gv_pLAYERMAX'
	'int libNtve_gv__BBC_BossBarMaxCount':
		prefix: 'libNtve_gv__BBC_BossBarMaxCount'
		body: 'libNtve_gv__BBC_BossBarMaxCount'
	'int c_ScoutStartLocations':
		prefix: 'c_ScoutStartLocations'
		body: 'c_ScoutStartLocations'
	'int c_ScoutBlockedPath':
		prefix: 'c_ScoutBlockedPath'
		body: 'c_ScoutBlockedPath'
	'int c_ScoutMinerals':
		prefix: 'c_ScoutMinerals'
		body: 'c_ScoutMinerals'
	'int c_ScoutDefault':
		prefix: 'c_ScoutDefault'
		body: 'c_ScoutDefault'
	'int c_ScoutPlayers':
		prefix: 'c_ScoutPlayers'
		body: 'c_ScoutPlayers'
	'int c_noFlags':
		prefix: 'c_noFlags'
		body: 'c_noFlags'
	'point c_nullPoint':
		prefix: 'c_nullPoint'
		body: 'c_nullPoint'
	'marker c_noMarker':
		prefix: 'c_noMarker'
		body: 'c_noMarker'
	'string c_noTech':
		prefix: 'c_noTech'
		body: 'c_noTech'
	'abilcmd c_nullCmd':
		prefix: 'c_nullCmd'
		body: 'c_nullCmd'
	'wave c_nullWave':
		prefix: 'c_nullWave'
		body: 'c_nullWave'
	'unit c_nullUnit':
		prefix: 'c_nullUnit'
		body: 'c_nullUnit'
	'string c_emptyString':
		prefix: 'c_emptyString'
		body: 'c_emptyString'
	'string c_nullString':
		prefix: 'c_nullString'
		body: 'c_nullString'
	'bool c_stockIdle':
		prefix: 'c_stockIdle'
		body: 'c_stockIdle'
	'bool c_stockAlways':
		prefix: 'c_stockAlways'
		body: 'c_stockAlways'
	'bool c_stockMinPeons':
		prefix: 'c_stockMinPeons'
		body: 'c_stockMinPeons'
	'bool c_stockMaxPeons':
		prefix: 'c_stockMaxPeons'
		body: 'c_stockMaxPeons'
	'bool c_stockNeededFarms':
		prefix: 'c_stockNeededFarms'
		body: 'c_stockNeededFarms'
	'bool c_stockNormalFarms':
		prefix: 'c_stockNormalFarms'
		body: 'c_stockNormalFarms'
	'int c_allEnemies':
		prefix: 'c_allEnemies'
		body: 'c_allEnemies'
	'int c_defaultGasPeonCount':
		prefix: 'c_defaultGasPeonCount'
		body: 'c_defaultGasPeonCount'
	'int c_expandDefault':
		prefix: 'c_expandDefault'
		body: 'c_expandDefault'
	'int c_expandVitalHard':
		prefix: 'c_expandVitalHard'
		body: 'c_expandVitalHard'
	'int c_expandNormalHard':
		prefix: 'c_expandNormalHard'
		body: 'c_expandNormalHard'
	'int c_expandIdleHard':
		prefix: 'c_expandIdleHard'
		body: 'c_expandIdleHard'
	'int c_prioNone':
		prefix: 'c_prioNone'
		body: 'c_prioNone'
	'int c_prioExtraScout':
		prefix: 'c_prioExtraScout'
		body: 'c_prioExtraScout'
	'int c_prioWorkerJob':
		prefix: 'c_prioWorkerJob'
		body: 'c_prioWorkerJob'
	'int c_prioUseableBully':
		prefix: 'c_prioUseableBully'
		body: 'c_prioUseableBully'
	'int c_prioStaticBully':
		prefix: 'c_prioStaticBully'
		body: 'c_prioStaticBully'
	'int c_prioGather':
		prefix: 'c_prioGather'
		body: 'c_prioGather'
	'int c_prioExpand':
		prefix: 'c_prioExpand'
		body: 'c_prioExpand'
	'int c_prioCombat':
		prefix: 'c_prioCombat'
		body: 'c_prioCombat'
	'int c_prioWaveIdle':
		prefix: 'c_prioWaveIdle'
		body: 'c_prioWaveIdle'
	'int c_prioScout':
		prefix: 'c_prioScout'
		body: 'c_prioScout'
	'int c_prioEarlyDefense':
		prefix: 'c_prioEarlyDefense'
		body: 'c_prioEarlyDefense'
	'int c_prioWavePeon':
		prefix: 'c_prioWavePeon'
		body: 'c_prioWavePeon'
	'int c_prioWave':
		prefix: 'c_prioWave'
		body: 'c_prioWave'
	'int c_prioTransport':
		prefix: 'c_prioTransport'
		body: 'c_prioTransport'
	'int c_prioDetect':
		prefix: 'c_prioDetect'
		body: 'c_prioDetect'
	'int c_prioNuke':
		prefix: 'c_prioNuke'
		body: 'c_prioNuke'
	'int c_prioScriptControlled':
		prefix: 'c_prioScriptControlled'
		body: 'c_prioScriptControlled'
	'int c_raceMulti':
		prefix: 'c_raceMulti'
		body: 'c_raceMulti'
	'int c_raceUnknown':
		prefix: 'c_raceUnknown'
		body: 'c_raceUnknown'
	'int c_raceProtoss':
		prefix: 'c_raceProtoss'
		body: 'c_raceProtoss'
	'int c_raceTerran':
		prefix: 'c_raceTerran'
		body: 'c_raceTerran'
	'int c_raceZerg':
		prefix: 'c_raceZerg'
		body: 'c_raceZerg'
	'int c_makePriorityLowest':
		prefix: 'c_makePriorityLowest'
		body: 'c_makePriorityLowest'
	'int c_makePriorityBully':
		prefix: 'c_makePriorityBully'
		body: 'c_makePriorityBully'
	'int c_makePriorityTown':
		prefix: 'c_makePriorityTown'
		body: 'c_makePriorityTown'
	'int c_makePriorityResearch':
		prefix: 'c_makePriorityResearch'
		body: 'c_makePriorityResearch'
	'int c_makePriorityAttack':
		prefix: 'c_makePriorityAttack'
		body: 'c_makePriorityAttack'
	'int c_makePriorityDefense':
		prefix: 'c_makePriorityDefense'
		body: 'c_makePriorityDefense'
	'int c_makePriorityExpand':
		prefix: 'c_makePriorityExpand'
		body: 'c_makePriorityExpand'
	'int c_makePriorityContinue':
		prefix: 'c_makePriorityContinue'
		body: 'c_makePriorityContinue'
	'int c_makePriorityDetection':
		prefix: 'c_makePriorityDetection'
		body: 'c_makePriorityDetection'
	'int c_makePriorityFood':
		prefix: 'c_makePriorityFood'
		body: 'c_makePriorityFood'
	'int c_makePriorityPowerCreep':
		prefix: 'c_makePriorityPowerCreep'
		body: 'c_makePriorityPowerCreep'
	'int c_makePriorityDropoff':
		prefix: 'c_makePriorityDropoff'
		body: 'c_makePriorityDropoff'
	'int c_makePriorityHighest':
		prefix: 'c_makePriorityHighest'
		body: 'c_makePriorityHighest'
	'int c_townInvalid':
		prefix: 'c_townInvalid'
		body: 'c_townInvalid'
	'int c_townMain':
		prefix: 'c_townMain'
		body: 'c_townMain'
	'int c_townOne':
		prefix: 'c_townOne'
		body: 'c_townOne'
	'int c_townTwo':
		prefix: 'c_townTwo'
		body: 'c_townTwo'
	'int c_townThree':
		prefix: 'c_townThree'
		body: 'c_townThree'
	'int c_townFour':
		prefix: 'c_townFour'
		body: 'c_townFour'
	'int c_townFive':
		prefix: 'c_townFive'
		body: 'c_townFive'
	'int c_townSix':
		prefix: 'c_townSix'
		body: 'c_townSix'
	'int c_townSeven':
		prefix: 'c_townSeven'
		body: 'c_townSeven'
	'int c_townEight':
		prefix: 'c_townEight'
		body: 'c_townEight'
	'int c_townMax':
		prefix: 'c_townMax'
		body: 'c_townMax'
	'int c_townStateInvalid':
		prefix: 'c_townStateInvalid'
		body: 'c_townStateInvalid'
	'int c_townStateUnused':
		prefix: 'c_townStateUnused'
		body: 'c_townStateUnused'
	'int c_townStateClaimed':
		prefix: 'c_townStateClaimed'
		body: 'c_townStateClaimed'
	'int c_townStateBuilding':
		prefix: 'c_townStateBuilding'
		body: 'c_townStateBuilding'
	'int c_townStateEstablished':
		prefix: 'c_townStateEstablished'
		body: 'c_townStateEstablished'
	'int c_waveStateUnknown':
		prefix: 'c_waveStateUnknown'
		body: 'c_waveStateUnknown'
	'int c_waveStateIdle':
		prefix: 'c_waveStateIdle'
		body: 'c_waveStateIdle'
	'int c_waveStateSuicide':
		prefix: 'c_waveStateSuicide'
		body: 'c_waveStateSuicide'
	'int c_waveStateMerge':
		prefix: 'c_waveStateMerge'
		body: 'c_waveStateMerge'
	'int c_waveStateAttack':
		prefix: 'c_waveStateAttack'
		body: 'c_waveStateAttack'
	'int c_waveStateDropAttack':
		prefix: 'c_waveStateDropAttack'
		body: 'c_waveStateDropAttack'
	'int c_waveStateDefend':
		prefix: 'c_waveStateDefend'
		body: 'c_waveStateDefend'
	'int c_waveStateScout':
		prefix: 'c_waveStateScout'
		body: 'c_waveStateScout'
	'int c_waveStateRetreat':
		prefix: 'c_waveStateRetreat'
		body: 'c_waveStateRetreat'
	'int c_waveStateDropRetreat':
		prefix: 'c_waveStateDropRetreat'
		body: 'c_waveStateDropRetreat'
	'int c_waveStateClearObs':
		prefix: 'c_waveStateClearObs'
		body: 'c_waveStateClearObs'
	'int c_waveStateGuardHome':
		prefix: 'c_waveStateGuardHome'
		body: 'c_waveStateGuardHome'
	'int c_waveStateBeacon':
		prefix: 'c_waveStateBeacon'
		body: 'c_waveStateBeacon'
	'int c_waveMain':
		prefix: 'c_waveMain'
		body: 'c_waveMain'
	'int c_waveDefend':
		prefix: 'c_waveDefend'
		body: 'c_waveDefend'
	'int c_waveAttack':
		prefix: 'c_waveAttack'
		body: 'c_waveAttack'
	'int c_waveDivert1':
		prefix: 'c_waveDivert1'
		body: 'c_waveDivert1'
	'int c_waveDivert2':
		prefix: 'c_waveDivert2'
		body: 'c_waveDivert2'
	'int c_waveClearObs':
		prefix: 'c_waveClearObs'
		body: 'c_waveClearObs'
	'int c_waveHome':
		prefix: 'c_waveHome'
		body: 'c_waveHome'
	'int c_dtIncludeSelfThreat':
		prefix: 'c_dtIncludeSelfThreat'
		body: 'c_dtIncludeSelfThreat'
	'int c_dtIncludeAllyThreat':
		prefix: 'c_dtIncludeAllyThreat'
		body: 'c_dtIncludeAllyThreat'
	'int c_dtIncludeMinorThreat':
		prefix: 'c_dtIncludeMinorThreat'
		body: 'c_dtIncludeMinorThreat'
	'int c_dtIncludeCantAttack':
		prefix: 'c_dtIncludeCantAttack'
		body: 'c_dtIncludeCantAttack'
	'int c_dtRealSelfThreat':
		prefix: 'c_dtRealSelfThreat'
		body: 'c_dtRealSelfThreat'
	'int c_dtRealThreat':
		prefix: 'c_dtRealThreat'
		body: 'c_dtRealThreat'
	'int c_dtAnySelfThreat':
		prefix: 'c_dtAnySelfThreat'
		body: 'c_dtAnySelfThreat'
	'int c_dtAnyThreat':
		prefix: 'c_dtAnyThreat'
		body: 'c_dtAnyThreat'
	'int c_btNeedsPath':
		prefix: 'c_btNeedsPath'
		body: 'c_btNeedsPath'
	'int c_btBuildingOrNeedsPath':
		prefix: 'c_btBuildingOrNeedsPath'
		body: 'c_btBuildingOrNeedsPath'
	'int c_btPrefersPath':
		prefix: 'c_btPrefersPath'
		body: 'c_btPrefersPath'
	'int c_btAllowJumping':
		prefix: 'c_btAllowJumping'
		body: 'c_btAllowJumping'
	'int c_btSortByDistance':
		prefix: 'c_btSortByDistance'
		body: 'c_btSortByDistance'
	'int c_btSortByFullType':
		prefix: 'c_btSortByFullType'
		body: 'c_btSortByFullType'
	'int c_btSortByLeastRecent':
		prefix: 'c_btSortByLeastRecent'
		body: 'c_btSortByLeastRecent'
	'int c_btSortByMeleeRules':
		prefix: 'c_btSortByMeleeRules'
		body: 'c_btSortByMeleeRules'
	'int c_btSortMeleeAllyAttackOnly':
		prefix: 'c_btSortMeleeAllyAttackOnly'
		body: 'c_btSortMeleeAllyAttackOnly'
	'int c_btSortMeleeAllyDefendOnly':
		prefix: 'c_btSortMeleeAllyDefendOnly'
		body: 'c_btSortMeleeAllyDefendOnly'
	'int c_btMeleePreferSplitAttacking':
		prefix: 'c_btMeleePreferSplitAttacking'
		body: 'c_btMeleePreferSplitAttacking'
	'int c_btDefaultNeedsPath':
		prefix: 'c_btDefaultNeedsPath'
		body: 'c_btDefaultNeedsPath'
	'int c_btDefaultPrefersPath':
		prefix: 'c_btDefaultPrefersPath'
		body: 'c_btDefaultPrefersPath'
	'int c_btDefaultAllyAttackOnly':
		prefix: 'c_btDefaultAllyAttackOnly'
		body: 'c_btDefaultAllyAttackOnly'
	'int c_btDefaultAllyDefendOnly':
		prefix: 'c_btDefaultAllyDefendOnly'
		body: 'c_btDefaultAllyDefendOnly'
	'int c_diffPressForward':
		prefix: 'c_diffPressForward'
		body: 'c_diffPressForward'
	'int c_diffRepairDamage':
		prefix: 'c_diffRepairDamage'
		body: 'c_diffRepairDamage'
	'int c_diffFleeDamage':
		prefix: 'c_diffFleeDamage'
		body: 'c_diffFleeDamage'
	'int c_diffOptimizeGas':
		prefix: 'c_diffOptimizeGas'
		body: 'c_diffOptimizeGas'
	'int c_diffDefendWithPeons':
		prefix: 'c_diffDefendWithPeons'
		body: 'c_diffDefendWithPeons'
	'int c_diffNormalVision':
		prefix: 'c_diffNormalVision'
		body: 'c_diffNormalVision'
	'int c_diffLimitAPM':
		prefix: 'c_diffLimitAPM'
		body: 'c_diffLimitAPM'
	'int c_diffLimitAPMCombat':
		prefix: 'c_diffLimitAPMCombat'
		body: 'c_diffLimitAPMCombat'
	'int c_diffAutoLoadBunkers':
		prefix: 'c_diffAutoLoadBunkers'
		body: 'c_diffAutoLoadBunkers'
	'int c_diffEarlyGameRepair':
		prefix: 'c_diffEarlyGameRepair'
		body: 'c_diffEarlyGameRepair'
	'int c_diffEnableDangerMap':
		prefix: 'c_diffEnableDangerMap'
		body: 'c_diffEnableDangerMap'
	'int c_diffWaveAvoidDanger':
		prefix: 'c_diffWaveAvoidDanger'
		body: 'c_diffWaveAvoidDanger'
	'int c_diffNormalTargetPrio':
		prefix: 'c_diffNormalTargetPrio'
		body: 'c_diffNormalTargetPrio'
	'int c_diffEarlyDefenseScout':
		prefix: 'c_diffEarlyDefenseScout'
		body: 'c_diffEarlyDefenseScout'
	'int c_diffSpotChangelings':
		prefix: 'c_diffSpotChangelings'
		body: 'c_diffSpotChangelings'
	'int c_diffUseExtraScouts':
		prefix: 'c_diffUseExtraScouts'
		body: 'c_diffUseExtraScouts'
	'int c_diffFleeWorkers':
		prefix: 'c_diffFleeWorkers'
		body: 'c_diffFleeWorkers'
	'int c_diffFleeDanger':
		prefix: 'c_diffFleeDanger'
		body: 'c_diffFleeDanger'
	'int c_diffHoldAtIdleChokes':
		prefix: 'c_diffHoldAtIdleChokes'
		body: 'c_diffHoldAtIdleChokes'
	'int c_diffAllowResourceReq':
		prefix: 'c_diffAllowResourceReq'
		body: 'c_diffAllowResourceReq'
	'int c_diffAdvancedRetreatLogic':
		prefix: 'c_diffAdvancedRetreatLogic'
		body: 'c_diffAdvancedRetreatLogic'
	'int c_diffSupportsBeacons':
		prefix: 'c_diffSupportsBeacons'
		body: 'c_diffSupportsBeacons'
	'int c_diffAutoBuildPrereqs':
		prefix: 'c_diffAutoBuildPrereqs'
		body: 'c_diffAutoBuildPrereqs'
	'int c_diffAllowBuildInDanger':
		prefix: 'c_diffAllowBuildInDanger'
		body: 'c_diffAllowBuildInDanger'
	'int c_diffTimeoutMakeRequests':
		prefix: 'c_diffTimeoutMakeRequests'
		body: 'c_diffTimeoutMakeRequests'
	'int c_diffSetRallyPoints':
		prefix: 'c_diffSetRallyPoints'
		body: 'c_diffSetRallyPoints'
	'int c_diffAllowLongDistanceMining':
		prefix: 'c_diffAllowLongDistanceMining'
		body: 'c_diffAllowLongDistanceMining'
	'int c_diffBalancePeonsAcrossBases':
		prefix: 'c_diffBalancePeonsAcrossBases'
		body: 'c_diffBalancePeonsAcrossBases'
	'int c_diffWaveLeashing':
		prefix: 'c_diffWaveLeashing'
		body: 'c_diffWaveLeashing'
	'int c_diffTargetSpawners':
		prefix: 'c_diffTargetSpawners'
		body: 'c_diffTargetSpawners'
	'int c_diffDelayAdvTargetting':
		prefix: 'c_diffDelayAdvTargetting'
		body: 'c_diffDelayAdvTargetting'
	'int c_diffAutoTransport':
		prefix: 'c_diffAutoTransport'
		body: 'c_diffAutoTransport'
	'int c_diffSplitAttacking':
		prefix: 'c_diffSplitAttacking'
		body: 'c_diffSplitAttacking'
	'int c_diffAllowTransportGather':
		prefix: 'c_diffAllowTransportGather'
		body: 'c_diffAllowTransportGather'
	'int c_diffAvoidMindControlled':
		prefix: 'c_diffAvoidMindControlled'
		body: 'c_diffAvoidMindControlled'
	'int c_skirVeryEasy':
		prefix: 'c_skirVeryEasy'
		body: 'c_skirVeryEasy'
	'int c_skirEasy':
		prefix: 'c_skirEasy'
		body: 'c_skirEasy'
	'int c_skirMedium':
		prefix: 'c_skirMedium'
		body: 'c_skirMedium'
	'int c_skirMed_Hard':
		prefix: 'c_skirMed_Hard'
		body: 'c_skirMed_Hard'
	'int c_skirHard':
		prefix: 'c_skirHard'
		body: 'c_skirHard'
	'int c_skirHard_VH':
		prefix: 'c_skirHard_VH'
		body: 'c_skirHard_VH'
	'int c_skirVeryHard':
		prefix: 'c_skirVeryHard'
		body: 'c_skirVeryHard'
	'int c_skirChVision':
		prefix: 'c_skirChVision'
		body: 'c_skirChVision'
	'int c_skirChMoney':
		prefix: 'c_skirChMoney'
		body: 'c_skirChMoney'
	'int c_skirChInsane':
		prefix: 'c_skirChInsane'
		body: 'c_skirChInsane'
	'int c_campBeginner':
		prefix: 'c_campBeginner'
		body: 'c_campBeginner'
	'int c_campNormal':
		prefix: 'c_campNormal'
		body: 'c_campNormal'
	'int c_campAdvanced':
		prefix: 'c_campAdvanced'
		body: 'c_campAdvanced'
	'int c_campExpert':
		prefix: 'c_campExpert'
		body: 'c_campExpert'
	'bool c_ignoreEnemyBuildings':
		prefix: 'c_ignoreEnemyBuildings'
		body: 'c_ignoreEnemyBuildings'
	'bool c_includeAllBuildings':
		prefix: 'c_includeAllBuildings'
		body: 'c_includeAllBuildings'
	'int c_coopTraining':
		prefix: 'c_coopTraining'
		body: 'c_coopTraining'
	'int c_coopWaveDefender':
		prefix: 'c_coopWaveDefender'
		body: 'c_coopWaveDefender'
	'int c_coopWaveAttacker':
		prefix: 'c_coopWaveAttacker'
		body: 'c_coopWaveAttacker'
	'int c_coopTurtle':
		prefix: 'c_coopTurtle'
		body: 'c_coopTurtle'
	'int c_coopCasterOnly':
		prefix: 'c_coopCasterOnly'
		body: 'c_coopCasterOnly'
	'int c_coopAirOnly':
		prefix: 'c_coopAirOnly'
		body: 'c_coopAirOnly'
	'int c_coopMultiRacial':
		prefix: 'c_coopMultiRacial'
		body: 'c_coopMultiRacial'
	'int c_stockNormal':
		prefix: 'c_stockNormal'
		body: 'c_stockNormal'
	'int c_stockOptional':
		prefix: 'c_stockOptional'
		body: 'c_stockOptional'
	'int c_stockExpansion':
		prefix: 'c_stockExpansion'
		body: 'c_stockExpansion'
	'int c_stockDefense':
		prefix: 'c_stockDefense'
		body: 'c_stockDefense'
	'int c_stockForced':
		prefix: 'c_stockForced'
		body: 'c_stockForced'
	'bool c_castRetreat':
		prefix: 'c_castRetreat'
		body: 'c_castRetreat'
	'bool c_castHold':
		prefix: 'c_castHold'
		body: 'c_castHold'
	'int c_tactTimerFirst':
		prefix: 'c_tactTimerFirst'
		body: 'c_tactTimerFirst'
	'int c_tactTimerSecond':
		prefix: 'c_tactTimerSecond'
		body: 'c_tactTimerSecond'
	'int c_tactTimerThird':
		prefix: 'c_tactTimerThird'
		body: 'c_tactTimerThird'
	'int c_tactTimerFourth':
		prefix: 'c_tactTimerFourth'
		body: 'c_tactTimerFourth'
	'int c_cloakMaxRange':
		prefix: 'c_cloakMaxRange'
		body: 'c_cloakMaxRange'
	'int c_combatFlagDisable':
		prefix: 'c_combatFlagDisable'
		body: 'c_combatFlagDisable'
	'int c_combatFlagEnable':
		prefix: 'c_combatFlagEnable'
		body: 'c_combatFlagEnable'
	'int c_combatFlagRead':
		prefix: 'c_combatFlagRead'
		body: 'c_combatFlagRead'
	'int c_difficultyAll':
		prefix: 'c_difficultyAll'
		body: 'c_difficultyAll'
	'int libLbty_gv_c_PINGMAXCOUNT':
		prefix: 'libLbty_gv_c_PINGMAXCOUNT'
		body: 'libLbty_gv_c_PINGMAXCOUNT'
	'fixed libLbty_gv_c_PINGRESETTIME':
		prefix: 'libLbty_gv_c_PINGRESETTIME'
		body: 'libLbty_gv_c_PINGRESETTIME'
	'fixed libLbty_gv_c_PINGSUPPRESSIONTIME':
		prefix: 'libLbty_gv_c_PINGSUPPRESSIONTIME'
		body: 'libLbty_gv_c_PINGSUPPRESSIONTIME'
	'fixed libLbty_gv_c_PINGLOCKOUTTIME':
		prefix: 'libLbty_gv_c_PINGLOCKOUTTIME'
		body: 'libLbty_gv_c_PINGLOCKOUTTIME'
	'int c_gameCatalogAbil':
		prefix: 'c_gameCatalogAbil'
		body: 'c_gameCatalogAbil'
	'int c_gameCatalogAchievement':
		prefix: 'c_gameCatalogAchievement'
		body: 'c_gameCatalogAchievement'
	'int c_gameCatalogAchievementTerm':
		prefix: 'c_gameCatalogAchievementTerm'
		body: 'c_gameCatalogAchievementTerm'
	'int c_gameCatalogActor':
		prefix: 'c_gameCatalogActor'
		body: 'c_gameCatalogActor'
	'int c_gameCatalogActorSupport':
		prefix: 'c_gameCatalogActorSupport'
		body: 'c_gameCatalogActorSupport'
	'int c_gameCatalogAlert':
		prefix: 'c_gameCatalogAlert'
		body: 'c_gameCatalogAlert'
	'int c_gameCatalogArmyCategory':
		prefix: 'c_gameCatalogArmyCategory'
		body: 'c_gameCatalogArmyCategory'
	'int c_gameCatalogArmyUnit':
		prefix: 'c_gameCatalogArmyUnit'
		body: 'c_gameCatalogArmyUnit'
	'int c_gameCatalogArmyUpgrade':
		prefix: 'c_gameCatalogArmyUpgrade'
		body: 'c_gameCatalogArmyUpgrade'
	'int c_gameCatalogArtifact':
		prefix: 'c_gameCatalogArtifact'
		body: 'c_gameCatalogArtifact'
	'int c_gameCatalogArtifactSlot':
		prefix: 'c_gameCatalogArtifactSlot'
		body: 'c_gameCatalogArtifactSlot'
	'int c_gameCatalogAttachMethod':
		prefix: 'c_gameCatalogAttachMethod'
		body: 'c_gameCatalogAttachMethod'
	'int c_gameCatalogBankCondition':
		prefix: 'c_gameCatalogBankCondition'
		body: 'c_gameCatalogBankCondition'
	'int c_gameCatalogBeam':
		prefix: 'c_gameCatalogBeam'
		body: 'c_gameCatalogBeam'
	'int c_gameCatalogBehavior':
		prefix: 'c_gameCatalogBehavior'
		body: 'c_gameCatalogBehavior'
	'int c_gameCatalogBundle':
		prefix: 'c_gameCatalogBundle'
		body: 'c_gameCatalogBundle'
	'int c_gameCatalogBoost':
		prefix: 'c_gameCatalogBoost'
		body: 'c_gameCatalogBoost'
	'int c_gameCatalogButton':
		prefix: 'c_gameCatalogButton'
		body: 'c_gameCatalogButton'
	'int c_gameCatalogCamera':
		prefix: 'c_gameCatalogCamera'
		body: 'c_gameCatalogCamera'
	'int c_gameCatalogCampaign':
		prefix: 'c_gameCatalogCampaign'
		body: 'c_gameCatalogCampaign'
	'int c_gameCatalogCharacter':
		prefix: 'c_gameCatalogCharacter'
		body: 'c_gameCatalogCharacter'
	'int c_gameCatalogCliff':
		prefix: 'c_gameCatalogCliff'
		body: 'c_gameCatalogCliff'
	'int c_gameCatalogCliffMesh':
		prefix: 'c_gameCatalogCliffMesh'
		body: 'c_gameCatalogCliffMesh'
	'int c_gameCatalogCommander':
		prefix: 'c_gameCatalogCommander'
		body: 'c_gameCatalogCommander'
	'int c_gameCatalogConfig':
		prefix: 'c_gameCatalogConfig'
		body: 'c_gameCatalogConfig'
	'int c_gameCatalogConversation':
		prefix: 'c_gameCatalogConversation'
		body: 'c_gameCatalogConversation'
	'int c_gameCatalogConversationState':
		prefix: 'c_gameCatalogConversationState'
		body: 'c_gameCatalogConversationState'
	'int c_gameCatalogCursor':
		prefix: 'c_gameCatalogCursor'
		body: 'c_gameCatalogCursor'
	'int c_gameCatalogDSP':
		prefix: 'c_gameCatalogDSP'
		body: 'c_gameCatalogDSP'
	'int c_gameCatalogEffect':
		prefix: 'c_gameCatalogEffect'
		body: 'c_gameCatalogEffect'
	'int c_gameCatalogError':
		prefix: 'c_gameCatalogError'
		body: 'c_gameCatalogError'
	'int c_gameCatalogFootprint':
		prefix: 'c_gameCatalogFootprint'
		body: 'c_gameCatalogFootprint'
	'int c_gameCatalogFoW':
		prefix: 'c_gameCatalogFoW'
		body: 'c_gameCatalogFoW'
	'int c_gameCatalogGame':
		prefix: 'c_gameCatalogGame'
		body: 'c_gameCatalogGame'
	'int c_gameCatalogGameUI':
		prefix: 'c_gameCatalogGameUI'
		body: 'c_gameCatalogGameUI'
	'int c_gameCatalogHerd':
		prefix: 'c_gameCatalogHerd'
		body: 'c_gameCatalogHerd'
	'int c_gameCatalogHerdNode':
		prefix: 'c_gameCatalogHerdNode'
		body: 'c_gameCatalogHerdNode'
	'int c_gameCatalogHero':
		prefix: 'c_gameCatalogHero'
		body: 'c_gameCatalogHero'
	'int c_gameCatalogHeroAbil':
		prefix: 'c_gameCatalogHeroAbil'
		body: 'c_gameCatalogHeroAbil'
	'int c_gameCatalogHeroStat':
		prefix: 'c_gameCatalogHeroStat'
		body: 'c_gameCatalogHeroStat'
	'int c_gameCatalogItem':
		prefix: 'c_gameCatalogItem'
		body: 'c_gameCatalogItem'
	'int c_gameCatalogItemClass':
		prefix: 'c_gameCatalogItemClass'
		body: 'c_gameCatalogItemClass'
	'int c_gameCatalogItemContainer':
		prefix: 'c_gameCatalogItemContainer'
		body: 'c_gameCatalogItemContainer'
	'int c_gameCatalogKinetic':
		prefix: 'c_gameCatalogKinetic'
		body: 'c_gameCatalogKinetic'
	'int c_gameCatalogLensFlareSet':
		prefix: 'c_gameCatalogLensFlareSet'
		body: 'c_gameCatalogLensFlareSet'
	'int c_gameCatalogLight':
		prefix: 'c_gameCatalogLight'
		body: 'c_gameCatalogLight'
	'int c_gameCatalogLocation':
		prefix: 'c_gameCatalogLocation'
		body: 'c_gameCatalogLocation'
	'int c_gameCatalogLoot':
		prefix: 'c_gameCatalogLoot'
		body: 'c_gameCatalogLoot'
	'int c_gameCatalogMap':
		prefix: 'c_gameCatalogMap'
		body: 'c_gameCatalogMap'
	'int c_gameCatalogModel':
		prefix: 'c_gameCatalogModel'
		body: 'c_gameCatalogModel'
	'int c_gameCatalogMount':
		prefix: 'c_gameCatalogMount'
		body: 'c_gameCatalogMount'
	'int c_gameCatalogMover':
		prefix: 'c_gameCatalogMover'
		body: 'c_gameCatalogMover'
	'int c_gameCatalogObjective':
		prefix: 'c_gameCatalogObjective'
		body: 'c_gameCatalogObjective'
	'int c_gameCatalogPhysicsMaterial':
		prefix: 'c_gameCatalogPhysicsMaterial'
		body: 'c_gameCatalogPhysicsMaterial'
	'int c_gameCatalogPing':
		prefix: 'c_gameCatalogPing'
		body: 'c_gameCatalogPing'
	'int c_gameCatalogPreload':
		prefix: 'c_gameCatalogPreload'
		body: 'c_gameCatalogPreload'
	'int c_gameCatalogRace':
		prefix: 'c_gameCatalogRace'
		body: 'c_gameCatalogRace'
	'int c_gameCatalogRequirement':
		prefix: 'c_gameCatalogRequirement'
		body: 'c_gameCatalogRequirement'
	'int c_gameCatalogRequirementNode':
		prefix: 'c_gameCatalogRequirementNode'
		body: 'c_gameCatalogRequirementNode'
	'int c_gameCatalogReverb':
		prefix: 'c_gameCatalogReverb'
		body: 'c_gameCatalogReverb'
	'int c_gameCatalogReward':
		prefix: 'c_gameCatalogReward'
		body: 'c_gameCatalogReward'
	'int c_gameCatalogScoreResult':
		prefix: 'c_gameCatalogScoreResult'
		body: 'c_gameCatalogScoreResult'
	'int c_gameCatalogScoreValue':
		prefix: 'c_gameCatalogScoreValue'
		body: 'c_gameCatalogScoreValue'
	'int c_gameCatalogShape':
		prefix: 'c_gameCatalogShape'
		body: 'c_gameCatalogShape'
	'int c_gameCatalogSkin':
		prefix: 'c_gameCatalogSkin'
		body: 'c_gameCatalogSkin'
	'int c_gameCatalogSound':
		prefix: 'c_gameCatalogSound'
		body: 'c_gameCatalogSound'
	'int c_gameCatalogSoundExclusivity':
		prefix: 'c_gameCatalogSoundExclusivity'
		body: 'c_gameCatalogSoundExclusivity'
	'int c_gameCatalogSoundMixSnapshot':
		prefix: 'c_gameCatalogSoundMixSnapshot'
		body: 'c_gameCatalogSoundMixSnapshot'
	'int c_gameCatalogSoundtrack':
		prefix: 'c_gameCatalogSoundtrack'
		body: 'c_gameCatalogSoundtrack'
	'int c_gameCatalogTacCooldown':
		prefix: 'c_gameCatalogTacCooldown'
		body: 'c_gameCatalogTacCooldown'
	'int c_gameCatalogTactical':
		prefix: 'c_gameCatalogTactical'
		body: 'c_gameCatalogTactical'
	'int c_gameCatalogTalent':
		prefix: 'c_gameCatalogTalent'
		body: 'c_gameCatalogTalent'
	'int c_gameCatalogTalentProfile':
		prefix: 'c_gameCatalogTalentProfile'
		body: 'c_gameCatalogTalentProfile'
	'int c_gameCatalogTargetFind':
		prefix: 'c_gameCatalogTargetFind'
		body: 'c_gameCatalogTargetFind'
	'int c_gameCatalogTargetSort':
		prefix: 'c_gameCatalogTargetSort'
		body: 'c_gameCatalogTargetSort'
	'int c_gameCatalogTerrain':
		prefix: 'c_gameCatalogTerrain'
		body: 'c_gameCatalogTerrain'
	'int c_gameCatalogTerrainObject':
		prefix: 'c_gameCatalogTerrainObject'
		body: 'c_gameCatalogTerrainObject'
	'int c_gameCatalogTerrainTex':
		prefix: 'c_gameCatalogTerrainTex'
		body: 'c_gameCatalogTerrainTex'
	'int c_gameCatalogTexture':
		prefix: 'c_gameCatalogTexture'
		body: 'c_gameCatalogTexture'
	'int c_gameCatalogTile':
		prefix: 'c_gameCatalogTile'
		body: 'c_gameCatalogTile'
	'int c_gameCatalogTrophy':
		prefix: 'c_gameCatalogTrophy'
		body: 'c_gameCatalogTrophy'
	'int c_gameCatalogTurret':
		prefix: 'c_gameCatalogTurret'
		body: 'c_gameCatalogTurret'
	'int c_gameCatalogUnit':
		prefix: 'c_gameCatalogUnit'
		body: 'c_gameCatalogUnit'
	'int c_gameCatalogUpgrade':
		prefix: 'c_gameCatalogUpgrade'
		body: 'c_gameCatalogUpgrade'
	'int c_gameCatalogUser':
		prefix: 'c_gameCatalogUser'
		body: 'c_gameCatalogUser'
	'int c_gameCatalogValidator':
		prefix: 'c_gameCatalogValidator'
		body: 'c_gameCatalogValidator'
	'int c_gameCatalogVoiceOver':
		prefix: 'c_gameCatalogVoiceOver'
		body: 'c_gameCatalogVoiceOver'
	'int c_gameCatalogWater':
		prefix: 'c_gameCatalogWater'
		body: 'c_gameCatalogWater'
	'int c_gameCatalogWeapon':
		prefix: 'c_gameCatalogWeapon'
		body: 'c_gameCatalogWeapon'
	'string c_gameCatalogAbilName':
		prefix: 'c_gameCatalogAbilName'
		body: 'c_gameCatalogAbilName'
	'string c_gameCatalogAchievementName':
		prefix: 'c_gameCatalogAchievementName'
		body: 'c_gameCatalogAchievementName'
	'string c_gameCatalogAchievementTermName':
		prefix: 'c_gameCatalogAchievementTermName'
		body: 'c_gameCatalogAchievementTermName'
	'string c_gameCatalogActorName':
		prefix: 'c_gameCatalogActorName'
		body: 'c_gameCatalogActorName'
	'string c_gameCatalogActorSupportName':
		prefix: 'c_gameCatalogActorSupportName'
		body: 'c_gameCatalogActorSupportName'
	'string c_gameCatalogAlertName':
		prefix: 'c_gameCatalogAlertName'
		body: 'c_gameCatalogAlertName'
	'string c_gameCatalogArmyCategoryName':
		prefix: 'c_gameCatalogArmyCategoryName'
		body: 'c_gameCatalogArmyCategoryName'
	'string c_gameCatalogArmyUnitName':
		prefix: 'c_gameCatalogArmyUnitName'
		body: 'c_gameCatalogArmyUnitName'
	'string c_gameCatalogArmyUpgradeName':
		prefix: 'c_gameCatalogArmyUpgradeName'
		body: 'c_gameCatalogArmyUpgradeName'
	'string c_gameCatalogArtifactName':
		prefix: 'c_gameCatalogArtifactName'
		body: 'c_gameCatalogArtifactName'
	'string c_gameCatalogArtifactSlotName':
		prefix: 'c_gameCatalogArtifactSlotName'
		body: 'c_gameCatalogArtifactSlotName'
	'string c_gameCatalogAttachMethodName':
		prefix: 'c_gameCatalogAttachMethodName'
		body: 'c_gameCatalogAttachMethodName'
	'string c_gameCatalogBankConditionName':
		prefix: 'c_gameCatalogBankConditionName'
		body: 'c_gameCatalogBankConditionName'
	'string c_gameCatalogBeamName':
		prefix: 'c_gameCatalogBeamName'
		body: 'c_gameCatalogBeamName'
	'string c_gameCatalogBehaviorName':
		prefix: 'c_gameCatalogBehaviorName'
		body: 'c_gameCatalogBehaviorName'
	'string c_gameCatalogBundleName':
		prefix: 'c_gameCatalogBundleName'
		body: 'c_gameCatalogBundleName'
	'string c_gameCatalogBoostName':
		prefix: 'c_gameCatalogBoostName'
		body: 'c_gameCatalogBoostName'
	'string c_gameCatalogButtonName':
		prefix: 'c_gameCatalogButtonName'
		body: 'c_gameCatalogButtonName'
	'string c_gameCatalogCameraName':
		prefix: 'c_gameCatalogCameraName'
		body: 'c_gameCatalogCameraName'
	'string c_gameCatalogCampaignName':
		prefix: 'c_gameCatalogCampaignName'
		body: 'c_gameCatalogCampaignName'
	'string c_gameCatalogCharacterName':
		prefix: 'c_gameCatalogCharacterName'
		body: 'c_gameCatalogCharacterName'
	'string c_gameCatalogCliffName':
		prefix: 'c_gameCatalogCliffName'
		body: 'c_gameCatalogCliffName'
	'string c_gameCatalogCliffMeshName':
		prefix: 'c_gameCatalogCliffMeshName'
		body: 'c_gameCatalogCliffMeshName'
	'string c_gameCatalogCommanderName':
		prefix: 'c_gameCatalogCommanderName'
		body: 'c_gameCatalogCommanderName'
	'string c_gameCatalogConfigName':
		prefix: 'c_gameCatalogConfigName'
		body: 'c_gameCatalogConfigName'
	'string c_gameCatalogConversationName':
		prefix: 'c_gameCatalogConversationName'
		body: 'c_gameCatalogConversationName'
	'string c_gameCatalogConversationStateName':
		prefix: 'c_gameCatalogConversationStateName'
		body: 'c_gameCatalogConversationStateName'
	'string c_gameCatalogCursorName':
		prefix: 'c_gameCatalogCursorName'
		body: 'c_gameCatalogCursorName'
	'string c_gameCatalogDSPName':
		prefix: 'c_gameCatalogDSPName'
		body: 'c_gameCatalogDSPName'
	'string c_gameCatalogEffectName':
		prefix: 'c_gameCatalogEffectName'
		body: 'c_gameCatalogEffectName'
	'string c_gameCatalogErrorName':
		prefix: 'c_gameCatalogErrorName'
		body: 'c_gameCatalogErrorName'
	'string c_gameCatalogFootprintName':
		prefix: 'c_gameCatalogFootprintName'
		body: 'c_gameCatalogFootprintName'
	'string c_gameCatalogFoWName':
		prefix: 'c_gameCatalogFoWName'
		body: 'c_gameCatalogFoWName'
	'string c_gameCatalogGameName':
		prefix: 'c_gameCatalogGameName'
		body: 'c_gameCatalogGameName'
	'string c_gameCatalogGameUIName':
		prefix: 'c_gameCatalogGameUIName'
		body: 'c_gameCatalogGameUIName'
	'string c_gameCatalogHerdName':
		prefix: 'c_gameCatalogHerdName'
		body: 'c_gameCatalogHerdName'
	'string c_gameCatalogHerdNodeName':
		prefix: 'c_gameCatalogHerdNodeName'
		body: 'c_gameCatalogHerdNodeName'
	'string c_gameCatalogHeroName':
		prefix: 'c_gameCatalogHeroName'
		body: 'c_gameCatalogHeroName'
	'string c_gameCatalogHeroAbilName':
		prefix: 'c_gameCatalogHeroAbilName'
		body: 'c_gameCatalogHeroAbilName'
	'string c_gameCatalogHeroStatName':
		prefix: 'c_gameCatalogHeroStatName'
		body: 'c_gameCatalogHeroStatName'
	'string c_gameCatalogItemName':
		prefix: 'c_gameCatalogItemName'
		body: 'c_gameCatalogItemName'
	'string c_gameCatalogItemClassName':
		prefix: 'c_gameCatalogItemClassName'
		body: 'c_gameCatalogItemClassName'
	'string c_gameCatalogItemContainerName':
		prefix: 'c_gameCatalogItemContainerName'
		body: 'c_gameCatalogItemContainerName'
	'string c_gameCatalogKineticName':
		prefix: 'c_gameCatalogKineticName'
		body: 'c_gameCatalogKineticName'
	'string c_gameCatalogLensFlareSetName':
		prefix: 'c_gameCatalogLensFlareSetName'
		body: 'c_gameCatalogLensFlareSetName'
	'string c_gameCatalogLightName':
		prefix: 'c_gameCatalogLightName'
		body: 'c_gameCatalogLightName'
	'string c_gameCatalogLocationName':
		prefix: 'c_gameCatalogLocationName'
		body: 'c_gameCatalogLocationName'
	'string c_gameCatalogLootName':
		prefix: 'c_gameCatalogLootName'
		body: 'c_gameCatalogLootName'
	'string c_gameCatalogMapName':
		prefix: 'c_gameCatalogMapName'
		body: 'c_gameCatalogMapName'
	'string c_gameCatalogModelName':
		prefix: 'c_gameCatalogModelName'
		body: 'c_gameCatalogModelName'
	'string c_gameCatalogMountName':
		prefix: 'c_gameCatalogMountName'
		body: 'c_gameCatalogMountName'
	'string c_gameCatalogMoverName':
		prefix: 'c_gameCatalogMoverName'
		body: 'c_gameCatalogMoverName'
	'string c_gameCatalogObjectiveName':
		prefix: 'c_gameCatalogObjectiveName'
		body: 'c_gameCatalogObjectiveName'
	'string c_gameCatalogPhysicsMaterialName':
		prefix: 'c_gameCatalogPhysicsMaterialName'
		body: 'c_gameCatalogPhysicsMaterialName'
	'string c_gameCatalogPingName':
		prefix: 'c_gameCatalogPingName'
		body: 'c_gameCatalogPingName'
	'string c_gameCatalogPreloadName':
		prefix: 'c_gameCatalogPreloadName'
		body: 'c_gameCatalogPreloadName'
	'string c_gameCatalogRaceName':
		prefix: 'c_gameCatalogRaceName'
		body: 'c_gameCatalogRaceName'
	'string c_gameCatalogRequirementName':
		prefix: 'c_gameCatalogRequirementName'
		body: 'c_gameCatalogRequirementName'
	'string c_gameCatalogRequirementNodeName':
		prefix: 'c_gameCatalogRequirementNodeName'
		body: 'c_gameCatalogRequirementNodeName'
	'string c_gameCatalogReverbName':
		prefix: 'c_gameCatalogReverbName'
		body: 'c_gameCatalogReverbName'
	'string c_gameCatalogRewardName':
		prefix: 'c_gameCatalogRewardName'
		body: 'c_gameCatalogRewardName'
	'string c_gameCatalogScoreResultName':
		prefix: 'c_gameCatalogScoreResultName'
		body: 'c_gameCatalogScoreResultName'
	'string c_gameCatalogScoreValueName':
		prefix: 'c_gameCatalogScoreValueName'
		body: 'c_gameCatalogScoreValueName'
	'string c_gameCatalogShapeName':
		prefix: 'c_gameCatalogShapeName'
		body: 'c_gameCatalogShapeName'
	'string c_gameCatalogSkinName':
		prefix: 'c_gameCatalogSkinName'
		body: 'c_gameCatalogSkinName'
	'string c_gameCatalogSoundName':
		prefix: 'c_gameCatalogSoundName'
		body: 'c_gameCatalogSoundName'
	'string c_gameCatalogSoundExclusivityName':
		prefix: 'c_gameCatalogSoundExclusivityName'
		body: 'c_gameCatalogSoundExclusivityName'
	'string c_gameCatalogSoundMixSnapshotName':
		prefix: 'c_gameCatalogSoundMixSnapshotName'
		body: 'c_gameCatalogSoundMixSnapshotName'
	'string c_gameCatalogSoundtrackName':
		prefix: 'c_gameCatalogSoundtrackName'
		body: 'c_gameCatalogSoundtrackName'
	'string c_gameCatalogTacCooldownName':
		prefix: 'c_gameCatalogTacCooldownName'
		body: 'c_gameCatalogTacCooldownName'
	'string c_gameCatalogTacticalName':
		prefix: 'c_gameCatalogTacticalName'
		body: 'c_gameCatalogTacticalName'
	'string c_gameCatalogTalentName':
		prefix: 'c_gameCatalogTalentName'
		body: 'c_gameCatalogTalentName'
	'string c_gameCatalogTalentProfileName':
		prefix: 'c_gameCatalogTalentProfileName'
		body: 'c_gameCatalogTalentProfileName'
	'string c_gameCatalogTargetFindName':
		prefix: 'c_gameCatalogTargetFindName'
		body: 'c_gameCatalogTargetFindName'
	'string c_gameCatalogTargetSortName':
		prefix: 'c_gameCatalogTargetSortName'
		body: 'c_gameCatalogTargetSortName'
	'string c_gameCatalogTerrainName':
		prefix: 'c_gameCatalogTerrainName'
		body: 'c_gameCatalogTerrainName'
	'string c_gameCatalogTerrainObjectName':
		prefix: 'c_gameCatalogTerrainObjectName'
		body: 'c_gameCatalogTerrainObjectName'
	'string c_gameCatalogTerrainTexName':
		prefix: 'c_gameCatalogTerrainTexName'
		body: 'c_gameCatalogTerrainTexName'
	'string c_gameCatalogTextureName':
		prefix: 'c_gameCatalogTextureName'
		body: 'c_gameCatalogTextureName'
	'string c_gameCatalogTileName':
		prefix: 'c_gameCatalogTileName'
		body: 'c_gameCatalogTileName'
	'string c_gameCatalogTrophyName':
		prefix: 'c_gameCatalogTrophyName'
		body: 'c_gameCatalogTrophyName'
	'string c_gameCatalogTurretName':
		prefix: 'c_gameCatalogTurretName'
		body: 'c_gameCatalogTurretName'
	'string c_gameCatalogUnitName':
		prefix: 'c_gameCatalogUnitName'
		body: 'c_gameCatalogUnitName'
	'string c_gameCatalogUpgradeName':
		prefix: 'c_gameCatalogUpgradeName'
		body: 'c_gameCatalogUpgradeName'
	'string c_gameCatalogUserName':
		prefix: 'c_gameCatalogUserName'
		body: 'c_gameCatalogUserName'
	'string c_gameCatalogValidatorName':
		prefix: 'c_gameCatalogValidatorName'
		body: 'c_gameCatalogValidatorName'
	'string c_gameCatalogVoiceOverName':
		prefix: 'c_gameCatalogVoiceOverName'
		body: 'c_gameCatalogVoiceOverName'
	'string c_gameCatalogWaterName':
		prefix: 'c_gameCatalogWaterName'
		body: 'c_gameCatalogWaterName'
	'string c_gameCatalogWeaponName':
		prefix: 'c_gameCatalogWeaponName'
		body: 'c_gameCatalogWeaponName'
	'void AchievementAward':
		prefix: 'AchievementAward'
		body: 'AchievementAward(${1:int player}, ${2:string name})'
	'void AchievementErase':
		prefix: 'AchievementErase'
		body: 'AchievementErase(${1:int player}, ${2:string name})'
	'void AchievementPanelSetCategory':
		prefix: 'AchievementPanelSetCategory'
		body: 'AchievementPanelSetCategory(${1:playergroup players}, ${2:string name})'
	'void AchievementPanelSetVisible':
		prefix: 'AchievementPanelSetVisible'
		body: 'AchievementPanelSetVisible(${1:playergroup players}, ${2:bool visible})'
	'text AchievementPercentText':
		prefix: 'AchievementPercentText'
		body: 'AchievementPercentText(${1:int player}, ${2:string category})'
	'void AchievementTermQuantitySet':
		prefix: 'AchievementTermQuantitySet'
		body: 'AchievementTermQuantitySet(${1:int player}, ${2:string term}, ${3:int quantity})'
	'void AchievementTermQuantityAdd':
		prefix: 'AchievementTermQuantityAdd'
		body: 'AchievementTermQuantityAdd(${1:int player}, ${2:string term}, ${3:int quantity})'
	'void AchievementsDisable':
		prefix: 'AchievementsDisable'
		body: 'AchievementsDisable(${1:int player})'
	'bool AchievementsDisabled':
		prefix: 'AchievementsDisabled'
		body: 'AchievementsDisabled(${1:int player})'
	'actorscope ActorScopeCreate':
		prefix: 'ActorScopeCreate'
		body: 'ActorScopeCreate(${1:string optionalCreateWithActorName})'
	'actorscope ActorScopeLastCreated':
		prefix: 'ActorScopeLastCreated'
		body: 'ActorScopeLastCreated()'
	'actorscope ActorScopeLastCreatedSend':
		prefix: 'ActorScopeLastCreatedSend'
		body: 'ActorScopeLastCreatedSend()'
	'actorscope ActorScopeFrom':
		prefix: 'ActorScopeFrom'
		body: 'ActorScopeFrom(${1:string name})'
	'actorscope ActorScopeFromActor':
		prefix: 'ActorScopeFromActor'
		body: 'ActorScopeFromActor(${1:actor a})'
	'actorscope ActorScopeFromUnit':
		prefix: 'ActorScopeFromUnit'
		body: 'ActorScopeFromUnit(${1:unit u})'
	'actorscope ActorScopeFromPortrait':
		prefix: 'ActorScopeFromPortrait'
		body: 'ActorScopeFromPortrait(${1:int p})'
	'actorscope ActorScopeFromDialogControl':
		prefix: 'ActorScopeFromDialogControl'
		body: 'ActorScopeFromDialogControl(${1:int p})'
	'text ActorScopeGetText':
		prefix: 'ActorScopeGetText'
		body: 'ActorScopeGetText(${1:actorscope as})'
	'void ActorScopeKill':
		prefix: 'ActorScopeKill'
		body: 'ActorScopeKill(${1:actorscope as})'
	'void ActorScopeOrphan':
		prefix: 'ActorScopeOrphan'
		body: 'ActorScopeOrphan(${1:actorscope as})'
	'actor ActorScopeRefGet':
		prefix: 'ActorScopeRefGet'
		body: 'ActorScopeRefGet(${1:actorscope as}, ${2:string refName})'
	'void ActorScopeRefSet':
		prefix: 'ActorScopeRefSet'
		body: 'ActorScopeRefSet(${1:actorscope as}, ${2:string refName}, ${3:actor aValue})'
	'void ActorScopeSend':
		prefix: 'ActorScopeSend'
		body: 'ActorScopeSend(${1:actorscope as}, ${2:string msg})'
	'actor ActorCreate':
		prefix: 'ActorCreate'
		body: 'ActorCreate(${1:actorscope as}, ${2:string actorName}, ${3:string content1Name}, ${4:string content2Name}, ${5:string content3Name})'
	'actor ActorLastCreated':
		prefix: 'ActorLastCreated'
		body: 'ActorLastCreated()'
	'actor ActorLastCreatedSend':
		prefix: 'ActorLastCreatedSend'
		body: 'ActorLastCreatedSend()'
	'actor ActorFrom':
		prefix: 'ActorFrom'
		body: 'ActorFrom(${1:string name})'
	'actor ActorFromActor':
		prefix: 'ActorFromActor'
		body: 'ActorFromActor(${1:actor a}, ${2:string name})'
	'actor ActorFromScope':
		prefix: 'ActorFromScope'
		body: 'ActorFromScope(${1:actorscope as}, ${2:string name})'
	'actor ActorFromDoodad':
		prefix: 'ActorFromDoodad'
		body: 'ActorFromDoodad(${1:doodad d})'
	'actor ActorFromPortrait':
		prefix: 'ActorFromPortrait'
		body: 'ActorFromPortrait(${1:int p})'
	'actor ActorFromDialogControl':
		prefix: 'ActorFromDialogControl'
		body: 'ActorFromDialogControl(${1:int p})'
	'text ActorGetText':
		prefix: 'ActorGetText'
		body: 'ActorGetText(${1:actor a})'
	'actor ActorRefGet':
		prefix: 'ActorRefGet'
		body: 'ActorRefGet(${1:actor a}, ${2:string refName})'
	'void ActorRefSet':
		prefix: 'ActorRefSet'
		body: 'ActorRefSet(${1:actor a}, ${2:string refName}, ${3:actor aValue})'
	'void ActorSend':
		prefix: 'ActorSend'
		body: 'ActorSend(${1:actor a}, ${2:string msg})'
	'void ActorSendAsText':
		prefix: 'ActorSendAsText'
		body: 'ActorSendAsText(${1:actor a}, ${2:text msg})'
	'void ActorSendTo':
		prefix: 'ActorSendTo'
		body: 'ActorSendTo(${1:actor a}, ${2:string refName}, ${3:string msg})'
	'void ActorSendToAsText':
		prefix: 'ActorSendToAsText'
		body: 'ActorSendToAsText(${1:actor a}, ${2:string refName}, ${3:text msg})'
	'void ActorLookAtStart':
		prefix: 'ActorLookAtStart'
		body: 'ActorLookAtStart(${1:actor s}, ${2:string lookAt}, ${3:int weight}, ${4:fixed time}, ${5:actor t})'
	'void ActorLookAtStop':
		prefix: 'ActorLookAtStop'
		body: 'ActorLookAtStop(${1:actor s}, ${2:string lookAt}, ${3:int weight}, ${4:fixed time})'
	'void ActorLookAtTypeStart':
		prefix: 'ActorLookAtTypeStart'
		body: 'ActorLookAtTypeStart(${1:actor s}, ${2:string type}, ${3:actor t})'
	'void ActorLookAtTypeStop':
		prefix: 'ActorLookAtTypeStop'
		body: 'ActorLookAtTypeStop(${1:actor s}, ${2:string type})'
	'void ActorTextureGroupApplyGlobal':
		prefix: 'ActorTextureGroupApplyGlobal'
		body: 'ActorTextureGroupApplyGlobal(${1:string textureProps})'
	'void ActorTextureGroupRemoveGlobal':
		prefix: 'ActorTextureGroupRemoveGlobal'
		body: 'ActorTextureGroupRemoveGlobal(${1:string textureProps})'
	'void ActorTextureGroupPush':
		prefix: 'ActorTextureGroupPush'
		body: 'ActorTextureGroupPush()'
	'void ActorTextureGroupPop':
		prefix: 'ActorTextureGroupPop'
		body: 'ActorTextureGroupPop()'
	'void ActorWorldParticleFXDestroy':
		prefix: 'ActorWorldParticleFXDestroy'
		body: 'ActorWorldParticleFXDestroy()'
	'actor ActorRegionCreate':
		prefix: 'ActorRegionCreate'
		body: 'ActorRegionCreate(${1:actorscope as}, ${2:string actorName}, ${3:region r})'
	'void ActorRegionSend':
		prefix: 'ActorRegionSend'
		body: 'ActorRegionSend(${1:actor a}, ${2:int intersect}, ${3:string msg}, ${4:string filters}, ${5:string terms})'
	'string MakeMsgAnimBracketResume':
		prefix: 'MakeMsgAnimBracketResume'
		body: 'MakeMsgAnimBracketResume(${1:string animName}, ${2:int animTransitionFlags}, ${3:fixed timeVariant}, ${4:int timeType})'
	'string MakeMsgAnimBracketStart':
		prefix: 'MakeMsgAnimBracketStart'
		body: 'MakeMsgAnimBracketStart(${1:string animName}, ${2:string propsOpening}, ${3:string propsContent}, ${4:string propsClosing}, ${5:int animBracketStartFlags}, ${6:fixed timeVariant}, ${7:int timeType})'
	'string MakeMsgAnimBracketStop':
		prefix: 'MakeMsgAnimBracketStop'
		body: 'MakeMsgAnimBracketStop(${1:string animName}, ${2:int animTransitionFlags}, ${3:fixed timeVariant}, ${4:int timeType})'
	'string MakeMsgAnimGroupApply':
		prefix: 'MakeMsgAnimGroupApply'
		body: 'MakeMsgAnimGroupApply(${1:string animGroup}, ${2:string atApply}, ${3:string atRemove}, ${4:int animGroupApplyFlags}, ${5:fixed timeVariant}, ${6:int timeType})'
	'string MakeMsgAnimGroupRemove':
		prefix: 'MakeMsgAnimGroupRemove'
		body: 'MakeMsgAnimGroupRemove(${1:string animGroup}, ${2:int animTransitionFlags}, ${3:fixed timeVariant}, ${4:int timeType})'
	'string MakeMsgAnimPlay':
		prefix: 'MakeMsgAnimPlay'
		body: 'MakeMsgAnimPlay(${1:string animName}, ${2:string animProps}, ${3:int animFlags}, ${4:fixed blendIn}, ${5:fixed blendOut}, ${6:fixed timeVariant}, ${7:int timeType})'
	'string MakeMsgRefCreate':
		prefix: 'MakeMsgRefCreate'
		body: 'MakeMsgRefCreate(${1:string refName})'
	'string MakeMsgRefSetFromRequest':
		prefix: 'MakeMsgRefSetFromRequest'
		body: 'MakeMsgRefSetFromRequest(${1:string refName}, ${2:string subject}, ${3:string effectName}, ${4:int requestScope}, ${5:int requestActor})'
	'string MakeMsgRefTableDump':
		prefix: 'MakeMsgRefTableDump'
		body: 'MakeMsgRefTableDump(${1:int space})'
	'string MakeMsgSetPhysicsState':
		prefix: 'MakeMsgSetPhysicsState'
		body: 'MakeMsgSetPhysicsState(${1:int physicsState}, ${2:fixed delayLow}, ${3:fixed delayHigh})'
	'string MakeMsgTextureSelectByMatch':
		prefix: 'MakeMsgTextureSelectByMatch'
		body: 'MakeMsgTextureSelectByMatch(${1:string slotName}, ${2:int slotComponent}, ${3:string sourceSlotName}, ${4:int sourceSlotComponent})'
	'string MakeMsgTextureSelectBySlot':
		prefix: 'MakeMsgTextureSelectBySlot'
		body: 'MakeMsgTextureSelectBySlot(${1:string slotName}, ${2:int slotComponent}, ${3:string textureExpression})'
	'string MakeMsgTextureVideoPlay':
		prefix: 'MakeMsgTextureVideoPlay'
		body: 'MakeMsgTextureVideoPlay(${1:string slotName}, ${2:int slotComponent}, ${3:int fps}, ${4:int textureVideoPlayFlags}, ${5:int videoSoundType}, ${6:string attachQuery})'
	'string MakeMsgTextureVideoStop':
		prefix: 'MakeMsgTextureVideoStop'
		body: 'MakeMsgTextureVideoStop(${1:string slotName}, ${2:int slotComponent})'
	'string MakeMsgTextureVideoSetFrame':
		prefix: 'MakeMsgTextureVideoSetFrame'
		body: 'MakeMsgTextureVideoSetFrame(${1:string slotName}, ${2:int slotComponent}, ${3:int frame})'
	'string MakeMsgTextureVideoSetPaused':
		prefix: 'MakeMsgTextureVideoSetPaused'
		body: 'MakeMsgTextureVideoSetPaused(${1:string slotName}, ${2:int slotComponent}, ${3:bool isPaused})'
	'string MakeMsgTextureVideoSetTime':
		prefix: 'MakeMsgTextureVideoSetTime'
		body: 'MakeMsgTextureVideoSetTime(${1:string slotName}, ${2:int slotComponent}, ${3:fixed time})'
	'string MakeMsgTransition':
		prefix: 'MakeMsgTransition'
		body: 'MakeMsgTransition(${1:int transitionType}, ${2:fixed durationBase}, ${3:fixed durationRange})'
	'string TextureGetSlotName':
		prefix: 'TextureGetSlotName'
		body: 'TextureGetSlotName(${1:string textureLink})'
	'int TextureGetSlotComponent':
		prefix: 'TextureGetSlotComponent'
		body: 'TextureGetSlotComponent(${1:string textureLink})'
	'doodad DoodadFromId':
		prefix: 'DoodadFromId'
		body: 'DoodadFromId(${1:int id})'
	'void ModelAnimationLoad':
		prefix: 'ModelAnimationLoad'
		body: 'ModelAnimationLoad(${1:string modelPath}, ${2:string animPath})'
	'void ModelAnimationLoadOverriding':
		prefix: 'ModelAnimationLoadOverriding'
		body: 'ModelAnimationLoadOverriding(${1:string modelPath}, ${2:string animPath})'
	'void ModelAnimationUnload':
		prefix: 'ModelAnimationUnload'
		body: 'ModelAnimationUnload(${1:string modelPath}, ${2:string animPath})'
	'void AnimLengthQueryByName':
		prefix: 'AnimLengthQueryByName'
		body: 'AnimLengthQueryByName(${1:actor a}, ${2:string animName}, ${3:bool scaledTime})'
	'void AnimLengthQueryByProps':
		prefix: 'AnimLengthQueryByProps'
		body: 'AnimLengthQueryByProps(${1:actor a}, ${2:string animProps})'
	'generichandle AnimLengthQueryLastCreated':
		prefix: 'AnimLengthQueryLastCreated'
		body: 'AnimLengthQueryLastCreated()'
	'void AnimLengthQueryWait':
		prefix: 'AnimLengthQueryWait'
		body: 'AnimLengthQueryWait()'
	'fixed AnimLengthSync':
		prefix: 'AnimLengthSync'
		body: 'AnimLengthSync(${1:generichandle h})'
	'fixed AnimLengthRemainingSync':
		prefix: 'AnimLengthRemainingSync'
		body: 'AnimLengthRemainingSync(${1:generichandle h})'
	'void AnimWait':
		prefix: 'AnimWait'
		body: 'AnimWait(${1:actor a}, ${2:string animName}, ${3:fixed offset}, ${4:int offsetType})'
	'string AutomationLuaGlobalGetAsString':
		prefix: 'AutomationLuaGlobalGetAsString'
		body: 'AutomationLuaGlobalGetAsString(${1:string name})'
	'bool BankConditionEvaluate':
		prefix: 'BankConditionEvaluate'
		body: 'BankConditionEvaluate(${1:int player}, ${2:string bankCondition})'
	'void BankDeleteCampaignBanks':
		prefix: 'BankDeleteCampaignBanks'
		body: 'BankDeleteCampaignBanks(${1:int player}, ${2:int index})'
	'bool BankExists':
		prefix: 'BankExists'
		body: 'BankExists(${1:string name}, ${2:int player})'
	'text BankSizeAsText':
		prefix: 'BankSizeAsText'
		body: 'BankSizeAsText(${1:string name}, ${2:int player})'
	'bank BankLastCreated':
		prefix: 'BankLastCreated'
		body: 'BankLastCreated()'
	'bank BankLoad':
		prefix: 'BankLoad'
		body: 'BankLoad(${1:string name}, ${2:int player})'
	'string BankName':
		prefix: 'BankName'
		body: 'BankName(${1:bank b})'
	'int BankPlayer':
		prefix: 'BankPlayer'
		body: 'BankPlayer(${1:bank b})'
	'void BankReload':
		prefix: 'BankReload'
		body: 'BankReload(${1:bank b})'
	'void BankRemove':
		prefix: 'BankRemove'
		body: 'BankRemove(${1:bank b})'
	'void BankSave':
		prefix: 'BankSave'
		body: 'BankSave(${1:bank b})'
	'bool BankVerify':
		prefix: 'BankVerify'
		body: 'BankVerify(${1:bank b})'
	'void BankWait':
		prefix: 'BankWait'
		body: 'BankWait(${1:bank b})'
	'bool BankOptionGet':
		prefix: 'BankOptionGet'
		body: 'BankOptionGet(${1:bank b}, ${2:int option})'
	'void BankOptionSet':
		prefix: 'BankOptionSet'
		body: 'BankOptionSet(${1:bank b}, ${2:int option}, ${3:bool enable})'
	'int BankSectionCount':
		prefix: 'BankSectionCount'
		body: 'BankSectionCount(${1:bank b})'
	'void BankSectionCreate':
		prefix: 'BankSectionCreate'
		body: 'BankSectionCreate(${1:bank b}, ${2:string section})'
	'bool BankSectionExists':
		prefix: 'BankSectionExists'
		body: 'BankSectionExists(${1:bank b}, ${2:string section})'
	'text BankSectionSizeAsText':
		prefix: 'BankSectionSizeAsText'
		body: 'BankSectionSizeAsText(${1:bank b}, ${2:string section})'
	'string BankSectionName':
		prefix: 'BankSectionName'
		body: 'BankSectionName(${1:bank b}, ${2:int index})'
	'void BankSectionRemove':
		prefix: 'BankSectionRemove'
		body: 'BankSectionRemove(${1:bank b}, ${2:string section})'
	'int BankKeyCount':
		prefix: 'BankKeyCount'
		body: 'BankKeyCount(${1:bank b}, ${2:string section})'
	'bool BankKeyExists':
		prefix: 'BankKeyExists'
		body: 'BankKeyExists(${1:bank b}, ${2:string section}, ${3:string key})'
	'text BankKeySizeAsText':
		prefix: 'BankKeySizeAsText'
		body: 'BankKeySizeAsText(${1:bank b}, ${2:string section}, ${3:string key})'
	'string BankKeyName':
		prefix: 'BankKeyName'
		body: 'BankKeyName(${1:bank b}, ${2:string section}, ${3:int index})'
	'void BankKeyRemove':
		prefix: 'BankKeyRemove'
		body: 'BankKeyRemove(${1:bank b}, ${2:string section}, ${3:string key})'
	'bool BankValueIsType':
		prefix: 'BankValueIsType'
		body: 'BankValueIsType(${1:bank b}, ${2:string section}, ${3:string key}, ${4:int type})'
	'fixed BankValueGetAsFixed':
		prefix: 'BankValueGetAsFixed'
		body: 'BankValueGetAsFixed(${1:bank b}, ${2:string section}, ${3:string key})'
	'void BankValueSetFromFixed':
		prefix: 'BankValueSetFromFixed'
		body: 'BankValueSetFromFixed(${1:bank b}, ${2:string section}, ${3:string key}, ${4:fixed value})'
	'bool BankValueGetAsFlag':
		prefix: 'BankValueGetAsFlag'
		body: 'BankValueGetAsFlag(${1:bank b}, ${2:string section}, ${3:string key})'
	'void BankValueSetFromFlag':
		prefix: 'BankValueSetFromFlag'
		body: 'BankValueSetFromFlag(${1:bank b}, ${2:string section}, ${3:string key}, ${4:bool value})'
	'int BankValueGetAsInt':
		prefix: 'BankValueGetAsInt'
		body: 'BankValueGetAsInt(${1:bank b}, ${2:string section}, ${3:string key})'
	'void BankValueSetFromInt':
		prefix: 'BankValueSetFromInt'
		body: 'BankValueSetFromInt(${1:bank b}, ${2:string section}, ${3:string key}, ${4:int value})'
	'point BankValueGetAsPoint':
		prefix: 'BankValueGetAsPoint'
		body: 'BankValueGetAsPoint(${1:bank b}, ${2:string section}, ${3:string key})'
	'void BankValueSetFromPoint':
		prefix: 'BankValueSetFromPoint'
		body: 'BankValueSetFromPoint(${1:bank b}, ${2:string section}, ${3:string key}, ${4:point value})'
	'string BankValueGetAsString':
		prefix: 'BankValueGetAsString'
		body: 'BankValueGetAsString(${1:bank b}, ${2:string section}, ${3:string key})'
	'void BankValueSetFromString':
		prefix: 'BankValueSetFromString'
		body: 'BankValueSetFromString(${1:bank b}, ${2:string section}, ${3:string key}, ${4:string value})'
	'text BankValueGetAsText':
		prefix: 'BankValueGetAsText'
		body: 'BankValueGetAsText(${1:bank b}, ${2:string section}, ${3:string key})'
	'void BankValueSetFromText':
		prefix: 'BankValueSetFromText'
		body: 'BankValueSetFromText(${1:bank b}, ${2:string section}, ${3:string key}, ${4:text value})'
	'unit BankLastRestoredUnit':
		prefix: 'BankLastRestoredUnit'
		body: 'BankLastRestoredUnit()'
	'unit BankValueGetAsUnit':
		prefix: 'BankValueGetAsUnit'
		body: 'BankValueGetAsUnit(${1:bank b}, ${2:string section}, ${3:string key}, ${4:int player}, ${5:point p}, ${6:fixed facing})'
	'void BankValueSetFromUnit':
		prefix: 'BankValueSetFromUnit'
		body: 'BankValueSetFromUnit(${1:bank b}, ${2:string section}, ${3:string key}, ${4:unit value})'
	'int BattleReportGetDialogControl':
		prefix: 'BattleReportGetDialogControl'
		body: 'BattleReportGetDialogControl()'
	'void BattleReportPanelSetSelectedBattleReport':
		prefix: 'BattleReportPanelSetSelectedBattleReport'
		body: 'BattleReportPanelSetSelectedBattleReport(${1:playergroup players}, ${2:int inBattleReport})'
	'int BattleReportPanelGetSelectedBattleReport':
		prefix: 'BattleReportPanelGetSelectedBattleReport'
		body: 'BattleReportPanelGetSelectedBattleReport(${1:int inPlayer})'
	'int BattleReportCreate':
		prefix: 'BattleReportCreate'
		body: 'BattleReportCreate(${1:playergroup inPlayerGroup}, ${2:text inText}, ${3:int inType}, ${4:int inState})'
	'int BattleReportLastCreated':
		prefix: 'BattleReportLastCreated'
		body: 'BattleReportLastCreated()'
	'void BattleReportDestroy':
		prefix: 'BattleReportDestroy'
		body: 'BattleReportDestroy(${1:int inBattleReportId})'
	'void BattleReportSetState':
		prefix: 'BattleReportSetState'
		body: 'BattleReportSetState(${1:int inBattleReportId}, ${2:int inState})'
	'void BattleReportSetPriority':
		prefix: 'BattleReportSetPriority'
		body: 'BattleReportSetPriority(${1:int inBattleReportId}, ${2:int inPriority})'
	'void BattleReportSetButtonText':
		prefix: 'BattleReportSetButtonText'
		body: 'BattleReportSetButtonText(${1:int inBattleReportId}, ${2:text inText})'
	'void BattleReportSetButtonImage':
		prefix: 'BattleReportSetButtonImage'
		body: 'BattleReportSetButtonImage(${1:int inBattleReportId}, ${2:string inImage})'
	'void BattleReportSetMissionText':
		prefix: 'BattleReportSetMissionText'
		body: 'BattleReportSetMissionText(${1:int inBattleReportId}, ${2:text inText})'
	'void BattleReportSetResearchTitle':
		prefix: 'BattleReportSetResearchTitle'
		body: 'BattleReportSetResearchTitle(${1:int inBattleReportId}, ${2:text inText})'
	'void BattleReportSetResearchText':
		prefix: 'BattleReportSetResearchText'
		body: 'BattleReportSetResearchText(${1:int inBattleReportId}, ${2:text inText})'
	'void BattleReportSetBonusTitle':
		prefix: 'BattleReportSetBonusTitle'
		body: 'BattleReportSetBonusTitle(${1:int inBattleReportId}, ${2:text inText})'
	'void BattleReportSetBonusText':
		prefix: 'BattleReportSetBonusText'
		body: 'BattleReportSetBonusText(${1:int inBattleReportId}, ${2:text inText})'
	'void BattleReportSetBestTimeText':
		prefix: 'BattleReportSetBestTimeText'
		body: 'BattleReportSetBestTimeText(${1:int inBattleReportId}, ${2:text inText})'
	'void BattleReportSetMissionImage':
		prefix: 'BattleReportSetMissionImage'
		body: 'BattleReportSetMissionImage(${1:int inBattleReportId}, ${2:string inImage})'
	'void BattleReportSetDifficultyLevelCompleted':
		prefix: 'BattleReportSetDifficultyLevelCompleted'
		body: 'BattleReportSetDifficultyLevelCompleted(${1:int inBattleReportId}, ${2:int inDifficultyLevel}, ${3:bool inCompleted})'
	'void BattleReportSetDifficultyLevelBestTimeText':
		prefix: 'BattleReportSetDifficultyLevelBestTimeText'
		body: 'BattleReportSetDifficultyLevelBestTimeText(${1:int inBattleReportId}, ${2:int inDifficultyLevel}, ${3:text inText})'
	'void BattleReportAddAchievement':
		prefix: 'BattleReportAddAchievement'
		body: 'BattleReportAddAchievement(${1:int inBattleReportId}, ${2:string inAchievement})'
	'void BattleReportSetSceneText':
		prefix: 'BattleReportSetSceneText'
		body: 'BattleReportSetSceneText(${1:int inBattleReportId}, ${2:text inText})'
	'void BattleReportSetSceneImage':
		prefix: 'BattleReportSetSceneImage'
		body: 'BattleReportSetSceneImage(${1:int inBattleReportId}, ${2:string inImage})'
	'void BattleReportSetShownInMissionTotal':
		prefix: 'BattleReportSetShownInMissionTotal'
		body: 'BattleReportSetShownInMissionTotal(${1:int inBattleReportId}, ${2:bool inShown})'
	'int BattleReportGetState':
		prefix: 'BattleReportGetState'
		body: 'BattleReportGetState(${1:int inBattleReportId})'
	'int BattleReportGetPriority':
		prefix: 'BattleReportGetPriority'
		body: 'BattleReportGetPriority(${1:int inBattleReportId})'
	'text BattleReportGetButtonText':
		prefix: 'BattleReportGetButtonText'
		body: 'BattleReportGetButtonText(${1:int inBattleReportId})'
	'string BattleReportGetButtonImage':
		prefix: 'BattleReportGetButtonImage'
		body: 'BattleReportGetButtonImage(${1:int inBattleReportId})'
	'text BattleReportGetMissionText':
		prefix: 'BattleReportGetMissionText'
		body: 'BattleReportGetMissionText(${1:int inBattleReportId})'
	'text BattleReportGetResearchTitle':
		prefix: 'BattleReportGetResearchTitle'
		body: 'BattleReportGetResearchTitle(${1:int inBattleReportId})'
	'text BattleReportGetResearchText':
		prefix: 'BattleReportGetResearchText'
		body: 'BattleReportGetResearchText(${1:int inBattleReportId})'
	'text BattleReportGetBonusTitle':
		prefix: 'BattleReportGetBonusTitle'
		body: 'BattleReportGetBonusTitle(${1:int inBattleReportId})'
	'text BattleReportGetBonusText':
		prefix: 'BattleReportGetBonusText'
		body: 'BattleReportGetBonusText(${1:int inBattleReportId})'
	'text BattleReportGetBestTimeText':
		prefix: 'BattleReportGetBestTimeText'
		body: 'BattleReportGetBestTimeText(${1:int inBattleReportId})'
	'string BattleReportGetMissionImage':
		prefix: 'BattleReportGetMissionImage'
		body: 'BattleReportGetMissionImage(${1:int inBattleReportId})'
	'bool BattleReportGetDifficultyLevelCompleted':
		prefix: 'BattleReportGetDifficultyLevelCompleted'
		body: 'BattleReportGetDifficultyLevelCompleted(${1:int inBattleReportId}, ${2:int inDifficultyLevel})'
	'text BattleReportGetDifficultyLevelBestTimeText':
		prefix: 'BattleReportGetDifficultyLevelBestTimeText'
		body: 'BattleReportGetDifficultyLevelBestTimeText(${1:int inBattleReportId}, ${2:int inDifficultyLevel})'
	'text BattleReportGetSceneText':
		prefix: 'BattleReportGetSceneText'
		body: 'BattleReportGetSceneText(${1:int inBattleReportId})'
	'string BattleReportGetSceneImage':
		prefix: 'BattleReportGetSceneImage'
		body: 'BattleReportGetSceneImage(${1:int inBattleReportId})'
	'bool BattleReportGetShownInMissionTotal':
		prefix: 'BattleReportGetShownInMissionTotal'
		body: 'BattleReportGetShownInMissionTotal(${1:int inBattleReportId})'
	'void TriggerAddEventBattleReportPanelExit':
		prefix: 'TriggerAddEventBattleReportPanelExit'
		body: 'TriggerAddEventBattleReportPanelExit(${1:trigger t}, ${2:int inPlayer})'
	'void TriggerAddEventBattleReportPanelPlayMission':
		prefix: 'TriggerAddEventBattleReportPanelPlayMission'
		body: 'TriggerAddEventBattleReportPanelPlayMission(${1:trigger t}, ${2:int inPlayer})'
	'void TriggerAddEventBattleReportPanelPlayScene':
		prefix: 'TriggerAddEventBattleReportPanelPlayScene'
		body: 'TriggerAddEventBattleReportPanelPlayScene(${1:trigger t}, ${2:int inPlayer})'
	'void TriggerAddEventBattleReportPanelSelectionChanged':
		prefix: 'TriggerAddEventBattleReportPanelSelectionChanged'
		body: 'TriggerAddEventBattleReportPanelSelectionChanged(${1:trigger t}, ${2:int inPlayer})'
	'int EventBattleReportPanelMissionSelected':
		prefix: 'EventBattleReportPanelMissionSelected'
		body: 'EventBattleReportPanelMissionSelected()'
	'int EventBattleReportPanelDifficultySelected':
		prefix: 'EventBattleReportPanelDifficultySelected'
		body: 'EventBattleReportPanelDifficultySelected()'
	'int EventBattleReportPanelSceneSelected':
		prefix: 'EventBattleReportPanelSceneSelected'
		body: 'EventBattleReportPanelSceneSelected()'
	'int BoardCreate':
		prefix: 'BoardCreate'
		body: 'BoardCreate(${1:int inCols}, ${2:int inRows}, ${3:text inName}, ${4:color inColor})'
	'int BoardLastCreated':
		prefix: 'BoardLastCreated'
		body: 'BoardLastCreated()'
	'void BoardDestroy':
		prefix: 'BoardDestroy'
		body: 'BoardDestroy(${1:int inBoard})'
	'void BoardShowAll':
		prefix: 'BoardShowAll'
		body: 'BoardShowAll(${1:bool inShow}, ${2:playergroup inPlayers})'
	'void BoardSetAnchor':
		prefix: 'BoardSetAnchor'
		body: 'BoardSetAnchor(${1:int inBoard}, ${2:int inAnchor}, ${3:int inOffsetX}, ${4:int inOffsetY})'
	'void BoardSetPosition':
		prefix: 'BoardSetPosition'
		body: 'BoardSetPosition(${1:int inBoard}, ${2:int inX}, ${3:int inY})'
	'void BoardResetPosition':
		prefix: 'BoardResetPosition'
		body: 'BoardResetPosition(${1:int inBoard})'
	'void BoardTitleShow':
		prefix: 'BoardTitleShow'
		body: 'BoardTitleShow(${1:int inBoard}, ${2:playergroup inPlayers}, ${3:bool inShow})'
	'void BoardTitleSetText':
		prefix: 'BoardTitleSetText'
		body: 'BoardTitleSetText(${1:int inBoard}, ${2:text inText})'
	'void BoardTitleSetColor':
		prefix: 'BoardTitleSetColor'
		body: 'BoardTitleSetColor(${1:int inBoard}, ${2:int inType}, ${3:color inColor})'
	'void BoardTitleSetIcon':
		prefix: 'BoardTitleSetIcon'
		body: 'BoardTitleSetIcon(${1:int inBoard}, ${2:string inIcon})'
	'void BoardTitleSetAlignment':
		prefix: 'BoardTitleSetAlignment'
		body: 'BoardTitleSetAlignment(${1:int inBoard}, ${2:int inAlign}, ${3:int inIconPos})'
	'void BoardTitleSetClickable':
		prefix: 'BoardTitleSetClickable'
		body: 'BoardTitleSetClickable(${1:int inBoard}, ${2:bool inClickable})'
	'void BoardSetName':
		prefix: 'BoardSetName'
		body: 'BoardSetName(${1:int inBoard}, ${2:text inName}, ${3:color inColor})'
	'void BoardSetState':
		prefix: 'BoardSetState'
		body: 'BoardSetState(${1:int inBoard}, ${2:playergroup inPlayers}, ${3:int inState}, ${4:bool inVal})'
	'void BoardMinimizeShow':
		prefix: 'BoardMinimizeShow'
		body: 'BoardMinimizeShow(${1:int inBoard}, ${2:playergroup inPlayers}, ${3:bool inShow})'
	'void BoardMinimizeEnable':
		prefix: 'BoardMinimizeEnable'
		body: 'BoardMinimizeEnable(${1:int inBoard}, ${2:playergroup inPlayers}, ${3:bool inEnable})'
	'void BoardMinimizeSetState':
		prefix: 'BoardMinimizeSetState'
		body: 'BoardMinimizeSetState(${1:int inBoard}, ${2:playergroup inPlayers}, ${3:bool inVal})'
	'void BoardMinimizeSetColor':
		prefix: 'BoardMinimizeSetColor'
		body: 'BoardMinimizeSetColor(${1:int inBoard}, ${2:color inColor})'
	'void BoardSetColumnCount':
		prefix: 'BoardSetColumnCount'
		body: 'BoardSetColumnCount(${1:int inBoard}, ${2:int inCols})'
	'void BoardSetRowCount':
		prefix: 'BoardSetRowCount'
		body: 'BoardSetRowCount(${1:int inBoard}, ${2:int inRows})'
	'void BoardSetColumnWidth':
		prefix: 'BoardSetColumnWidth'
		body: 'BoardSetColumnWidth(${1:int inBoard}, ${2:int inCol}, ${3:fixed inWidth})'
	'void BoardSetGroupCount':
		prefix: 'BoardSetGroupCount'
		body: 'BoardSetGroupCount(${1:int inBoard}, ${2:int inGroups})'
	'void BoardRowSetGroup':
		prefix: 'BoardRowSetGroup'
		body: 'BoardRowSetGroup(${1:int inBoard}, ${2:int inRow}, ${3:int inGroup})'
	'void BoardItemSetText':
		prefix: 'BoardItemSetText'
		body: 'BoardItemSetText(${1:int inBoard}, ${2:int inCol}, ${3:int inRow}, ${4:text inText})'
	'void BoardItemSetTextColor':
		prefix: 'BoardItemSetTextColor'
		body: 'BoardItemSetTextColor(${1:int inBoard}, ${2:int inCol}, ${3:int inRow}, ${4:color inColor})'
	'void BoardItemSetBackgroundColor':
		prefix: 'BoardItemSetBackgroundColor'
		body: 'BoardItemSetBackgroundColor(${1:int inBoard}, ${2:int inCol}, ${3:int inRow}, ${4:color inColor})'
	'void BoardItemSetIcon':
		prefix: 'BoardItemSetIcon'
		body: 'BoardItemSetIcon(${1:int inBoard}, ${2:int inCol}, ${3:int inRow}, ${4:string inIcon}, ${5:bool inLeft})'
	'void BoardItemSetAlignment':
		prefix: 'BoardItemSetAlignment'
		body: 'BoardItemSetAlignment(${1:int inBoard}, ${2:int inCol}, ${3:int inRow}, ${4:int inAlign})'
	'void BoardItemSetFontSize':
		prefix: 'BoardItemSetFontSize'
		body: 'BoardItemSetFontSize(${1:int inBoard}, ${2:int inCol}, ${3:int inRow}, ${4:int inSize})'
	'void BoardItemSetSortValue':
		prefix: 'BoardItemSetSortValue'
		body: 'BoardItemSetSortValue(${1:int inBoard}, ${2:int inCol}, ${3:int inRow}, ${4:int inVal})'
	'void BoardItemSetProgressShow':
		prefix: 'BoardItemSetProgressShow'
		body: 'BoardItemSetProgressShow(${1:int inBoard}, ${2:int inCol}, ${3:int inRow}, ${4:bool inShow})'
	'void BoardItemSetProgressRange':
		prefix: 'BoardItemSetProgressRange'
		body: 'BoardItemSetProgressRange(${1:int inBoard}, ${2:int inCol}, ${3:int inRow}, ${4:fixed inMin}, ${5:fixed inMax})'
	'void BoardItemSetProgressValue':
		prefix: 'BoardItemSetProgressValue'
		body: 'BoardItemSetProgressValue(${1:int inBoard}, ${2:int inCol}, ${3:int inRow}, ${4:fixed inVal})'
	'void BoardItemSetProgressColor':
		prefix: 'BoardItemSetProgressColor'
		body: 'BoardItemSetProgressColor(${1:int inBoard}, ${2:int inCol}, ${3:int inRow}, ${4:color inColor}, ${5:int inStep})'
	'void BoardSort':
		prefix: 'BoardSort'
		body: 'BoardSort(${1:int inBoard}, ${2:int inCol}, ${3:bool inAscending}, ${4:int inPriority})'
	'void BoardSetPlayerColumn':
		prefix: 'BoardSetPlayerColumn'
		body: 'BoardSetPlayerColumn(${1:int inBoard}, ${2:int inCol}, ${3:bool inGroupByTeams})'
	'void BoardPlayerAdd':
		prefix: 'BoardPlayerAdd'
		body: 'BoardPlayerAdd(${1:int inBoard}, ${2:int inPlayer})'
	'void BoardPlayerRemove':
		prefix: 'BoardPlayerRemove'
		body: 'BoardPlayerRemove(${1:int inBoard}, ${2:int inPlayer})'
	'camerainfo CameraInfoDefault':
		prefix: 'CameraInfoDefault'
		body: 'CameraInfoDefault()'
	'camerainfo CameraInfoFromId':
		prefix: 'CameraInfoFromId'
		body: 'CameraInfoFromId(${1:int id})'
	'void CameraInfoSetValue':
		prefix: 'CameraInfoSetValue'
		body: 'CameraInfoSetValue(${1:camerainfo c}, ${2:int type}, ${3:fixed value})'
	'fixed CameraInfoGetValue':
		prefix: 'CameraInfoGetValue'
		body: 'CameraInfoGetValue(${1:camerainfo c}, ${2:int type})'
	'void CameraInfoSetTarget':
		prefix: 'CameraInfoSetTarget'
		body: 'CameraInfoSetTarget(${1:camerainfo c}, ${2:point p})'
	'point CameraInfoGetTarget':
		prefix: 'CameraInfoGetTarget'
		body: 'CameraInfoGetTarget(${1:camerainfo c})'
	'void CameraApplyInfo':
		prefix: 'CameraApplyInfo'
		body: 'CameraApplyInfo(${1:int player}, ${2:camerainfo c}, ${3:fixed duration}, ${4:fixed velocity}, ${5:fixed decelerate}, ${6:bool useTarget})'
	'void CameraPan':
		prefix: 'CameraPan'
		body: 'CameraPan(${1:int player}, ${2:point p}, ${3:fixed duration}, ${4:fixed velocity}, ${5:fixed decelerate}, ${6:bool smart})'
	'void CameraSetValue':
		prefix: 'CameraSetValue'
		body: 'CameraSetValue(${1:int player}, ${2:int type}, ${3:fixed value}, ${4:fixed duration}, ${5:fixed velocity}, ${6:fixed decelerate})'
	'void CameraUseModel':
		prefix: 'CameraUseModel'
		body: 'CameraUseModel(${1:int player}, ${2:unit u}, ${3:string name}, ${4:fixed duration})'
	'void CameraForceMouseRelative':
		prefix: 'CameraForceMouseRelative'
		body: 'CameraForceMouseRelative(${1:int player}, ${2:bool value})'
	'void CameraLockInput':
		prefix: 'CameraLockInput'
		body: 'CameraLockInput(${1:int player}, ${2:bool lock})'
	'void CameraSetMouseRotates':
		prefix: 'CameraSetMouseRotates'
		body: 'CameraSetMouseRotates(${1:int player}, ${2:bool value})'
	'void CameraSetMouseRotationSpeed':
		prefix: 'CameraSetMouseRotationSpeed'
		body: 'CameraSetMouseRotationSpeed(${1:int player}, ${2:int direction}, ${3:fixed value})'
	'void CameraSetVerticalFieldOfView':
		prefix: 'CameraSetVerticalFieldOfView'
		body: 'CameraSetVerticalFieldOfView(${1:int player}, ${2:bool value})'
	'void CameraUseHeightDisplacement':
		prefix: 'CameraUseHeightDisplacement'
		body: 'CameraUseHeightDisplacement(${1:int player}, ${2:bool value})'
	'void CameraUseHeightSmoothing':
		prefix: 'CameraUseHeightSmoothing'
		body: 'CameraUseHeightSmoothing(${1:int player}, ${2:bool value})'
	'void CameraSetChannel':
		prefix: 'CameraSetChannel'
		body: 'CameraSetChannel(${1:int player}, ${2:unit cameraUnit}, ${3:string cameraName}, ${4:int channel}, ${5:fixed aspectRatio})'
	'void CameraClearChannel':
		prefix: 'CameraClearChannel'
		body: 'CameraClearChannel(${1:int player}, ${2:int channel})'
	'void CameraSetChannelOnPortrait':
		prefix: 'CameraSetChannelOnPortrait'
		body: 'CameraSetChannelOnPortrait(${1:int player}, ${2:camerainfo c}, ${3:fixed aspectRatio}, ${4:int portraitId}, ${5:int channel})'
	'void CameraClearChannelOnPortrait':
		prefix: 'CameraClearChannelOnPortrait'
		body: 'CameraClearChannelOnPortrait(${1:int player}, ${2:int portraitId}, ${3:int channel})'
	'void CameraShake':
		prefix: 'CameraShake'
		body: 'CameraShake(${1:int player}, ${2:string amplitude}, ${3:string frequency}, ${4:fixed blendIn}, ${5:fixed blendOut}, ${6:fixed duration})'
	'void CameraShakeStart':
		prefix: 'CameraShakeStart'
		body: 'CameraShakeStart(${1:int player}, ${2:int position}, ${3:// c_cameraPosition*}, ${4:int direction}, ${5:// c_cameraDirection*}, ${6:fixed amplitude}, ${7:fixed frequency}, ${8:fixed randomPercent}, ${9:fixed duration})'
	'void CameraShakeStop':
		prefix: 'CameraShakeStop'
		body: 'CameraShakeStop(${1:int player})'
	'void CameraSave':
		prefix: 'CameraSave'
		body: 'CameraSave(${1:int player})'
	'void CameraRestore':
		prefix: 'CameraRestore'
		body: 'CameraRestore(${1:int player}, ${2:fixed duration}, ${3:fixed velocity}, ${4:fixed decelerate})'
	'point CameraGetTarget':
		prefix: 'CameraGetTarget'
		body: 'CameraGetTarget(${1:int player})'
	'fixed CameraGetPitch':
		prefix: 'CameraGetPitch'
		body: 'CameraGetPitch(${1:int player})'
	'fixed CameraGetYaw':
		prefix: 'CameraGetYaw'
		body: 'CameraGetYaw(${1:int player})'
	'fixed CameraGetDistance':
		prefix: 'CameraGetDistance'
		body: 'CameraGetDistance(${1:int player})'
	'void CameraSetData':
		prefix: 'CameraSetData'
		body: 'CameraSetData(${1:playergroup players}, ${2:string cameraId})'
	'void CameraSetBounds':
		prefix: 'CameraSetBounds'
		body: 'CameraSetBounds(${1:playergroup players}, ${2:region bounds}, ${3:bool includeMinimap})'
	'void CameraFollowUnitGroup':
		prefix: 'CameraFollowUnitGroup'
		body: 'CameraFollowUnitGroup(${1:int player}, ${2:unitgroup group}, ${3:bool follow}, ${4:bool isOffset})'
	'unitgroup CameraFollowUnitGroupGet':
		prefix: 'CameraFollowUnitGroupGet'
		body: 'CameraFollowUnitGroupGet(${1:int player})'
	'void CameraForceFollowUnitGroup':
		prefix: 'CameraForceFollowUnitGroup'
		body: 'CameraForceFollowUnitGroup(${1:int player}, ${2:bool forced})'
	'void CameraLookAt':
		prefix: 'CameraLookAt'
		body: 'CameraLookAt(${1:int player}, ${2:point p}, ${3:fixed duration}, ${4:fixed velocity}, ${5:fixed decelerate})'
	'void CameraLookAtActor':
		prefix: 'CameraLookAtActor'
		body: 'CameraLookAtActor(${1:int player}, ${2:actor a})'
	'void CameraLookAtUnit':
		prefix: 'CameraLookAtUnit'
		body: 'CameraLookAtUnit(${1:int player}, ${2:unit u})'
	'void TriggerAddEventCameraMove':
		prefix: 'TriggerAddEventCameraMove'
		body: 'TriggerAddEventCameraMove(${1:trigger t}, ${2:int player}, ${3:int reason})'
	'int EventCameraMoveReason':
		prefix: 'EventCameraMoveReason'
		body: 'EventCameraMoveReason()'
	'void CampaignInitAI':
		prefix: 'CampaignInitAI'
		body: 'CampaignInitAI()'
	'void CampaignProgressSetText':
		prefix: 'CampaignProgressSetText'
		body: 'CampaignProgressSetText(${1:playergroup players}, ${2:string campaignId}, ${3:text inText})'
	'void CampaignProgressSetImageFilePath':
		prefix: 'CampaignProgressSetImageFilePath'
		body: 'CampaignProgressSetImageFilePath(${1:playergroup players}, ${2:string campaignId}, ${3:string inFilePath})'
	'void CampaignProgressSetTutorialFinished':
		prefix: 'CampaignProgressSetTutorialFinished'
		body: 'CampaignProgressSetTutorialFinished(${1:playergroup players}, ${2:string campaignId}, ${3:bool inFinished})'
	'void CampaignProgressSetCampaignFinished':
		prefix: 'CampaignProgressSetCampaignFinished'
		body: 'CampaignProgressSetCampaignFinished(${1:playergroup players}, ${2:string campaignId}, ${3:bool inFinished})'
	'void CampaignProgressDeleteCampaignSave':
		prefix: 'CampaignProgressDeleteCampaignSave'
		body: 'CampaignProgressDeleteCampaignSave(${1:playergroup players})'
	'void CampaignProgressEnableCampaignSaves':
		prefix: 'CampaignProgressEnableCampaignSaves'
		body: 'CampaignProgressEnableCampaignSaves(${1:playergroup players}, ${2:bool inDisable})'
	'void CampaignProgressEnableCampaignCompletedSaves':
		prefix: 'CampaignProgressEnableCampaignCompletedSaves'
		body: 'CampaignProgressEnableCampaignCompletedSaves(${1:playergroup players}, ${2:bool inDisable})'
	'int AbilityClass':
		prefix: 'AbilityClass'
		body: 'AbilityClass(${1:string ability})'
	'int CatalogEntryCount':
		prefix: 'CatalogEntryCount'
		body: 'CatalogEntryCount(${1:int catalog})'
	'string CatalogEntryGet':
		prefix: 'CatalogEntryGet'
		body: 'CatalogEntryGet(${1:int catalog}, ${2:int index})'
	'bool CatalogEntryIsDefault':
		prefix: 'CatalogEntryIsDefault'
		body: 'CatalogEntryIsDefault(${1:int catalog}, ${2:string entry})'
	'bool CatalogEntryIsValid':
		prefix: 'CatalogEntryIsValid'
		body: 'CatalogEntryIsValid(${1:int catalog}, ${2:string entry})'
	'int CatalogEntryClass':
		prefix: 'CatalogEntryClass'
		body: 'CatalogEntryClass(${1:int catalog}, ${2:string entry})'
	'string CatalogEntryParent':
		prefix: 'CatalogEntryParent'
		body: 'CatalogEntryParent(${1:int catalog}, ${2:string entry})'
	'string CatalogEntryScope':
		prefix: 'CatalogEntryScope'
		body: 'CatalogEntryScope(${1:int catalog}, ${2:string entry})'
	'int CatalogFieldCount':
		prefix: 'CatalogFieldCount'
		body: 'CatalogFieldCount(${1:string scope})'
	'string CatalogFieldGet':
		prefix: 'CatalogFieldGet'
		body: 'CatalogFieldGet(${1:string scope}, ${2:int index})'
	'bool CatalogFieldExists':
		prefix: 'CatalogFieldExists'
		body: 'CatalogFieldExists(${1:string scope}, ${2:string field})'
	'bool CatalogFieldIsArray':
		prefix: 'CatalogFieldIsArray'
		body: 'CatalogFieldIsArray(${1:string scope}, ${2:string field})'
	'bool CatalogFieldIsScope':
		prefix: 'CatalogFieldIsScope'
		body: 'CatalogFieldIsScope(${1:string scope}, ${2:string field})'
	'string CatalogFieldType':
		prefix: 'CatalogFieldType'
		body: 'CatalogFieldType(${1:string scope}, ${2:string field})'
	'int CatalogFieldTypeCategory':
		prefix: 'CatalogFieldTypeCategory'
		body: 'CatalogFieldTypeCategory(${1:string scope}, ${2:string field})'
	'int CatalogFieldValueCount':
		prefix: 'CatalogFieldValueCount'
		body: 'CatalogFieldValueCount(${1:int catalog}, ${2:string entry}, ${3:string fieldPath}, ${4:int player})'
	'string CatalogFieldValueGet':
		prefix: 'CatalogFieldValueGet'
		body: 'CatalogFieldValueGet(${1:int catalog}, ${2:string entry}, ${3:string fieldPath}, ${4:int player})'
	'int CatalogFieldValueGetAsInt':
		prefix: 'CatalogFieldValueGetAsInt'
		body: 'CatalogFieldValueGetAsInt(${1:int catalog}, ${2:string entry}, ${3:string fieldPath}, ${4:int player})'
	'int CatalogFieldValueGetFlagsAsInt':
		prefix: 'CatalogFieldValueGetFlagsAsInt'
		body: 'CatalogFieldValueGetFlagsAsInt(${1:int catalog}, ${2:string entry}, ${3:string fieldPath}, ${4:int player})'
	'bool CatalogFieldValueModify':
		prefix: 'CatalogFieldValueModify'
		body: 'CatalogFieldValueModify(${1:int catalog}, ${2:string entry}, ${3:string fieldPath}, ${4:int player}, ${5:string value}, ${6:int operation})'
	'bool CatalogFieldValueSet':
		prefix: 'CatalogFieldValueSet'
		body: 'CatalogFieldValueSet(${1:int catalog}, ${2:string entry}, ${3:string fieldPath}, ${4:int player}, ${5:string value})'
	'int CatalogReferenceCount':
		prefix: 'CatalogReferenceCount'
		body: 'CatalogReferenceCount(${1:string reference}, ${2:int player})'
	'string CatalogReferenceGet':
		prefix: 'CatalogReferenceGet'
		body: 'CatalogReferenceGet(${1:string reference}, ${2:int player})'
	'int CatalogReferenceGetAsInt':
		prefix: 'CatalogReferenceGetAsInt'
		body: 'CatalogReferenceGetAsInt(${1:string reference}, ${2:int player})'
	'bool CatalogReferenceModify':
		prefix: 'CatalogReferenceModify'
		body: 'CatalogReferenceModify(${1:string reference}, ${2:int player}, ${3:string value}, ${4:int operation})'
	'bool CatalogReferenceSet':
		prefix: 'CatalogReferenceSet'
		body: 'CatalogReferenceSet(${1:string reference}, ${2:int player}, ${3:string value})'
	'void CatalogLinkReplace':
		prefix: 'CatalogLinkReplace'
		body: 'CatalogLinkReplace(${1:int player}, ${2:int catalog}, ${3:string idA}, ${4:string idB})'
	'string CatalogLinkReplacement':
		prefix: 'CatalogLinkReplacement'
		body: 'CatalogLinkReplacement(${1:int player}, ${2:int catalog}, ${3:string id})'
	'void CharacterSheetPanelSetNameText':
		prefix: 'CharacterSheetPanelSetNameText'
		body: 'CharacterSheetPanelSetNameText(${1:playergroup players}, ${2:text inText})'
	'void CharacterSheetPanelSetDescriptionText':
		prefix: 'CharacterSheetPanelSetDescriptionText'
		body: 'CharacterSheetPanelSetDescriptionText(${1:playergroup players}, ${2:text inText})'
	'void CharacterSheetPanelSetPortraitModelLink':
		prefix: 'CharacterSheetPanelSetPortraitModelLink'
		body: 'CharacterSheetPanelSetPortraitModelLink(${1:playergroup players}, ${2:string inModelLink})'
	'void CinematicMode':
		prefix: 'CinematicMode'
		body: 'CinematicMode(${1:playergroup players}, ${2:bool cinematicMode}, ${3:fixed duration})'
	'void CinematicFade':
		prefix: 'CinematicFade'
		body: 'CinematicFade(${1:bool fadeIn}, ${2:fixed duration}, ${3:int style}, ${4:color inColor}, ${5:fixed transparency}, ${6:bool waitUntilDone})'
	'void CinematicOverlay':
		prefix: 'CinematicOverlay'
		body: 'CinematicOverlay(${1:bool fadeIn}, ${2:fixed duration}, ${3:string imagePath}, ${4:fixed transparency}, ${5:bool waitUntilDone})'
	'void CinematicDataRun':
		prefix: 'CinematicDataRun'
		body: 'CinematicDataRun(${1:int id}, ${2:playergroup players}, ${3:bool waitUntilDone})'
	'void CinematicDataStop':
		prefix: 'CinematicDataStop'
		body: 'CinematicDataStop()'
	'int BoolToInt':
		prefix: 'BoolToInt'
		body: 'BoolToInt(${1:bool f})'
	'int Color255FromFixed':
		prefix: 'Color255FromFixed'
		body: 'Color255FromFixed(${1:fixed f})'
	'fixed IntToFixed':
		prefix: 'IntToFixed'
		body: 'IntToFixed(${1:int x})'
	'string IntToString':
		prefix: 'IntToString'
		body: 'IntToString(${1:int x})'
	'text IntToText':
		prefix: 'IntToText'
		body: 'IntToText(${1:int x})'
	'int FixedToInt':
		prefix: 'FixedToInt'
		body: 'FixedToInt(${1:fixed x})'
	'string FixedToString':
		prefix: 'FixedToString'
		body: 'FixedToString(${1:fixed x}, ${2:int precision})'
	'text FixedToText':
		prefix: 'FixedToText'
		body: 'FixedToText(${1:fixed x}, ${2:int precision})'
	'text FixedToTextAdvanced':
		prefix: 'FixedToTextAdvanced'
		body: 'FixedToTextAdvanced(${1:fixed inNumber}, ${2:int inStyle}, ${3:bool inGroup}, ${4:int inMinDigits}, ${5:int inMaxDigits})'
	'int StringToInt':
		prefix: 'StringToInt'
		body: 'StringToInt(${1:string x})'
	'fixed StringToFixed':
		prefix: 'StringToFixed'
		body: 'StringToFixed(${1:string x})'
	'abilcmd StringToAbilCmd':
		prefix: 'StringToAbilCmd'
		body: 'StringToAbilCmd(${1:string x})'
	'color Color':
		prefix: 'Color'
		body: 'Color(${1:fixed r}, ${2:fixed g}, ${3:fixed b})'
	'color ColorWithAlpha':
		prefix: 'ColorWithAlpha'
		body: 'ColorWithAlpha(${1:fixed r}, ${2:fixed g}, ${3:fixed b}, ${4:fixed a})'
	'color ColorFromIndex':
		prefix: 'ColorFromIndex'
		body: 'ColorFromIndex(${1:int inIndex}, ${2:int inType})'
	'fixed ColorGetComponent':
		prefix: 'ColorGetComponent'
		body: 'ColorGetComponent(${1:color c}, ${2:int component})'
	'text FormatNumber':
		prefix: 'FormatNumber'
		body: 'FormatNumber(${1:int number})'
	'text FormatDuration':
		prefix: 'FormatDuration'
		body: 'FormatDuration(${1:int seconds})'
	'int ConversationCreate':
		prefix: 'ConversationCreate'
		body: 'ConversationCreate(${1:bool visible})'
	'int ConversationLastCreated':
		prefix: 'ConversationLastCreated'
		body: 'ConversationLastCreated()'
	'void ConversationDestroy':
		prefix: 'ConversationDestroy'
		body: 'ConversationDestroy(${1:int intId})'
	'void ConversationDestroyAll':
		prefix: 'ConversationDestroyAll'
		body: 'ConversationDestroyAll()'
	'void ConversationShow':
		prefix: 'ConversationShow'
		body: 'ConversationShow(${1:int intId}, ${2:playergroup to}, ${3:bool visible})'
	'bool ConversationVisible':
		prefix: 'ConversationVisible'
		body: 'ConversationVisible(${1:int intId}, ${2:int player})'
	'int ConversationReplyCreate':
		prefix: 'ConversationReplyCreate'
		body: 'ConversationReplyCreate(${1:int intId}, ${2:text inText})'
	'int ConversationReplyLastCreated':
		prefix: 'ConversationReplyLastCreated'
		body: 'ConversationReplyLastCreated()'
	'void ConversationReplyDestroy':
		prefix: 'ConversationReplyDestroy'
		body: 'ConversationReplyDestroy(${1:int intId}, ${2:int replyId})'
	'void ConversationReplyDestroyAll':
		prefix: 'ConversationReplyDestroyAll'
		body: 'ConversationReplyDestroyAll(${1:int intId})'
	'void ConversationReplySetText':
		prefix: 'ConversationReplySetText'
		body: 'ConversationReplySetText(${1:int intId}, ${2:int replyId}, ${3:text inText})'
	'text ConversationReplyGetText':
		prefix: 'ConversationReplyGetText'
		body: 'ConversationReplyGetText(${1:int intId}, ${2:int replyId})'
	'void ConversationReplySetState':
		prefix: 'ConversationReplySetState'
		body: 'ConversationReplySetState(${1:int intId}, ${2:int replyId}, ${3:int state})'
	'int ConversationReplyGetState':
		prefix: 'ConversationReplyGetState'
		body: 'ConversationReplyGetState(${1:int intId}, ${2:int replyId})'
	'void TriggerAddEventConversationReplySelected':
		prefix: 'TriggerAddEventConversationReplySelected'
		body: 'TriggerAddEventConversationReplySelected(${1:trigger t}, ${2:int player}, ${3:int intId}, ${4:int replyId})'
	'int EventConversation':
		prefix: 'EventConversation'
		body: 'EventConversation()'
	'int EventConversationReply':
		prefix: 'EventConversationReply'
		body: 'EventConversationReply()'
	'int ConversationReplyGetIndex':
		prefix: 'ConversationReplyGetIndex'
		body: 'ConversationReplyGetIndex(${1:int intId}, ${2:int replyId})'
	'int ConversationDataStateIndexCount':
		prefix: 'ConversationDataStateIndexCount'
		body: 'ConversationDataStateIndexCount(${1:string inStateId})'
	'string ConversationDataStateIndex':
		prefix: 'ConversationDataStateIndex'
		body: 'ConversationDataStateIndex(${1:string inStateId}, ${2:int inIndex})'
	'text ConversationDataStateName':
		prefix: 'ConversationDataStateName'
		body: 'ConversationDataStateName(${1:string stateIndex})'
	'text ConversationDataStateText':
		prefix: 'ConversationDataStateText'
		body: 'ConversationDataStateText(${1:string stateIndex}, ${2:string inInfoName})'
	'fixed ConversationDataStateFixedValue':
		prefix: 'ConversationDataStateFixedValue'
		body: 'ConversationDataStateFixedValue(${1:string stateIndex}, ${2:string inInfoName})'
	'string ConversationDataStateImagePath':
		prefix: 'ConversationDataStateImagePath'
		body: 'ConversationDataStateImagePath(${1:string stateIndex})'
	'int ConversationDataStateImageEdge':
		prefix: 'ConversationDataStateImageEdge'
		body: 'ConversationDataStateImageEdge(${1:string stateIndex})'
	'string ConversationDataStateAttachPoint':
		prefix: 'ConversationDataStateAttachPoint'
		body: 'ConversationDataStateAttachPoint(${1:string stateIndex})'
	'string ConversationDataStateMoviePath':
		prefix: 'ConversationDataStateMoviePath'
		body: 'ConversationDataStateMoviePath(${1:string stateIndex})'
	'string ConversationDataStateModel':
		prefix: 'ConversationDataStateModel'
		body: 'ConversationDataStateModel(${1:string stateIndex}, ${2:string inInfoName})'
	'string ConversationDataStateUpgrade':
		prefix: 'ConversationDataStateUpgrade'
		body: 'ConversationDataStateUpgrade(${1:string stateIndex}, ${2:string inInfoName})'
	'abilcmd ConversationDataStateAbilCmd':
		prefix: 'ConversationDataStateAbilCmd'
		body: 'ConversationDataStateAbilCmd(${1:string stateIndex}, ${2:string inInfoName})'
	'void ConversationDataRegisterCamera':
		prefix: 'ConversationDataRegisterCamera'
		body: 'ConversationDataRegisterCamera(${1:string camIndex}, ${2:string charIndex}, ${3:camerainfo c}, ${4:trigger t}, ${5:bool wait})'
	'void ConversationDataRegisterUnit':
		prefix: 'ConversationDataRegisterUnit'
		body: 'ConversationDataRegisterUnit(${1:string stateIndex}, ${2:unit u})'
	'void ConversationDataRegisterPortrait':
		prefix: 'ConversationDataRegisterPortrait'
		body: 'ConversationDataRegisterPortrait(${1:string stateIndex}, ${2:int p})'
	'void ConversationDataStateSetValue':
		prefix: 'ConversationDataStateSetValue'
		body: 'ConversationDataStateSetValue(${1:string stateIndex}, ${2:int value})'
	'int ConversationDataStateGetValue':
		prefix: 'ConversationDataStateGetValue'
		body: 'ConversationDataStateGetValue(${1:string stateIndex})'
	'int ConversationDataChoiceCount':
		prefix: 'ConversationDataChoiceCount'
		body: 'ConversationDataChoiceCount(${1:string convId})'
	'string ConversationDataChoiceId':
		prefix: 'ConversationDataChoiceId'
		body: 'ConversationDataChoiceId(${1:string convId}, ${2:int index})'
	'void ConversationDataChoiceSetState':
		prefix: 'ConversationDataChoiceSetState'
		body: 'ConversationDataChoiceSetState(${1:string convId}, ${2:string choiceId}, ${3:int state})'
	'int ConversationDataChoiceGetState':
		prefix: 'ConversationDataChoiceGetState'
		body: 'ConversationDataChoiceGetState(${1:string convId}, ${2:string choiceId})'
	'void ConversationDataChoiceSetPicked':
		prefix: 'ConversationDataChoiceSetPicked'
		body: 'ConversationDataChoiceSetPicked(${1:string convId}, ${2:string choiceId}, ${3:bool picked})'
	'bool ConversationDataChoiceGetPicked':
		prefix: 'ConversationDataChoiceGetPicked'
		body: 'ConversationDataChoiceGetPicked(${1:string convId}, ${2:string choiceId})'
	'void ConversationDataChoiceSetPickedCount':
		prefix: 'ConversationDataChoiceSetPickedCount'
		body: 'ConversationDataChoiceSetPickedCount(${1:string convId}, ${2:string choiceId}, ${3:int count})'
	'int ConversationDataChoiceGetPickedCount':
		prefix: 'ConversationDataChoiceGetPickedCount'
		body: 'ConversationDataChoiceGetPickedCount(${1:string convId}, ${2:string choiceId})'
	'int ConversationDataLineCount':
		prefix: 'ConversationDataLineCount'
		body: 'ConversationDataLineCount(${1:string convId})'
	'string ConversationDataLineId':
		prefix: 'ConversationDataLineId'
		body: 'ConversationDataLineId(${1:string convId}, ${2:int index})'
	'void ConversationDataLineSetPickedCount':
		prefix: 'ConversationDataLineSetPickedCount'
		body: 'ConversationDataLineSetPickedCount(${1:string convId}, ${2:string lineId}, ${3:int count})'
	'int ConversationDataLineGetPickedCount':
		prefix: 'ConversationDataLineGetPickedCount'
		body: 'ConversationDataLineGetPickedCount(${1:string convId}, ${2:string lineId})'
	'void ConversationDataLineSetPlayers':
		prefix: 'ConversationDataLineSetPlayers'
		body: 'ConversationDataLineSetPlayers(${1:string convId}, ${2:string lineId}, ${3:playergroup players})'
	'void ConversationDataLineResetPlayers':
		prefix: 'ConversationDataLineResetPlayers'
		body: 'ConversationDataLineResetPlayers(${1:string convId}, ${2:string lineId})'
	'void ConversationDataLineHideForObservers':
		prefix: 'ConversationDataLineHideForObservers'
		body: 'ConversationDataLineHideForObservers(${1:string convId}, ${2:string lineId}, ${3:bool hide})'
	'void ConversationDataSetListenerGender':
		prefix: 'ConversationDataSetListenerGender'
		body: 'ConversationDataSetListenerGender(${1:string convId}, ${2:int gender})'
	'void ConversationDataSaveStateValues':
		prefix: 'ConversationDataSaveStateValues'
		body: 'ConversationDataSaveStateValues(${1:string stateId}, ${2:bank b}, ${3:string section})'
	'void ConversationDataLoadStateValues':
		prefix: 'ConversationDataLoadStateValues'
		body: 'ConversationDataLoadStateValues(${1:string stateId}, ${2:bank b}, ${3:string section})'
	'void ConversationDataSaveStateValue':
		prefix: 'ConversationDataSaveStateValue'
		body: 'ConversationDataSaveStateValue(${1:string stateIndex}, ${2:bank b}, ${3:string section})'
	'void ConversationDataLoadStateValue':
		prefix: 'ConversationDataLoadStateValue'
		body: 'ConversationDataLoadStateValue(${1:string stateIndex}, ${2:bank b}, ${3:string section})'
	'void ConversationDataResetStateValues':
		prefix: 'ConversationDataResetStateValues'
		body: 'ConversationDataResetStateValues(${1:string stateId})'
	'void ConversationDataSaveNodeState':
		prefix: 'ConversationDataSaveNodeState'
		body: 'ConversationDataSaveNodeState(${1:string convId}, ${2:bank b}, ${3:string section})'
	'void ConversationDataLoadNodeState':
		prefix: 'ConversationDataLoadNodeState'
		body: 'ConversationDataLoadNodeState(${1:string convId}, ${2:bank b}, ${3:string section})'
	'void ConversationDataResetNodeState':
		prefix: 'ConversationDataResetNodeState'
		body: 'ConversationDataResetNodeState(${1:string convId})'
	'void ConversationDataPreloadLines':
		prefix: 'ConversationDataPreloadLines'
		body: 'ConversationDataPreloadLines(${1:string convId})'
	'void ConversationDataPreloadLinesQueue':
		prefix: 'ConversationDataPreloadLinesQueue'
		body: 'ConversationDataPreloadLinesQueue(${1:string convId})'
	'void ConversationDataSimulateRun':
		prefix: 'ConversationDataSimulateRun'
		body: 'ConversationDataSimulateRun(${1:string convId})'
	'string ConversationDataGetSound':
		prefix: 'ConversationDataGetSound'
		body: 'ConversationDataGetSound(${1:string convLine}, ${2:bool checkConditions})'
	'string ConversationDataGetSpeaker':
		prefix: 'ConversationDataGetSpeaker'
		body: 'ConversationDataGetSpeaker(${1:string convLine})'
	'bool ConversationDataCanRun':
		prefix: 'ConversationDataCanRun'
		body: 'ConversationDataCanRun(${1:string convId}, ${2:bool unpickedOnly})'
	'void ConversationDataRun':
		prefix: 'ConversationDataRun'
		body: 'ConversationDataRun(${1:string convId}, ${2:playergroup players}, ${3:int skipType}, ${4:bool waitUntilDone})'
	'void ConversationDataStop':
		prefix: 'ConversationDataStop'
		body: 'ConversationDataStop()'
	'string ConversationDataActiveSound':
		prefix: 'ConversationDataActiveSound'
		body: 'ConversationDataActiveSound()'
	'string ConversationDataActiveCamera':
		prefix: 'ConversationDataActiveCamera'
		body: 'ConversationDataActiveCamera()'
	'bool ConversationDataWasSkipped':
		prefix: 'ConversationDataWasSkipped'
		body: 'ConversationDataWasSkipped()'
	'void TriggerAddEventConversationStateChanged':
		prefix: 'TriggerAddEventConversationStateChanged'
		body: 'TriggerAddEventConversationStateChanged(${1:trigger t}, ${2:string stateIndex})'
	'string EventConversationState':
		prefix: 'EventConversationState'
		body: 'EventConversationState()'
	'int CutsceneCreateNew':
		prefix: 'CutsceneCreateNew'
		body: 'CutsceneCreateNew(${1:string inFilePath}, ${2:point pos}, ${3:fixed inFacing}, ${4:playergroup players}, ${5:bool inAutoPlay})'
	'int CutsceneCreate':
		prefix: 'CutsceneCreate'
		body: 'CutsceneCreate(${1:string inFilePath}, ${2:point pos}, ${3:playergroup players}, ${4:bool inAutoPlay})'
	'int CutsceneLastCreated':
		prefix: 'CutsceneLastCreated'
		body: 'CutsceneLastCreated()'
	'void CutscenePlay':
		prefix: 'CutscenePlay'
		body: 'CutscenePlay(${1:int inCutscene})'
	'void CutscenePause':
		prefix: 'CutscenePause'
		body: 'CutscenePause(${1:int inCutscene})'
	'void CutsceneStop':
		prefix: 'CutsceneStop'
		body: 'CutsceneStop(${1:int inCutscene})'
	'void CutsceneSetTime':
		prefix: 'CutsceneSetTime'
		body: 'CutsceneSetTime(${1:int inCutscene}, ${2:int inTime})'
	'void CutsceneGoToBookmark':
		prefix: 'CutsceneGoToBookmark'
		body: 'CutsceneGoToBookmark(${1:int inCutscene}, ${2:string inBookmarkName})'
	'void CutsceneGoToNextBookmark':
		prefix: 'CutsceneGoToNextBookmark'
		body: 'CutsceneGoToNextBookmark(${1:int inCutscene})'
	'void CutscenePlayCutsceneRangeOverTime':
		prefix: 'CutscenePlayCutsceneRangeOverTime'
		body: 'CutscenePlayCutsceneRangeOverTime(${1:int inCutscene}, ${2:string inBookmarkStart}, ${3:string inBookmarkEnd}, ${4:fixed inDuration})'
	'void CutsceneSetGlobalFilter':
		prefix: 'CutsceneSetGlobalFilter'
		body: 'CutsceneSetGlobalFilter(${1:string inFilter})'
	'void CutsceneSetFilter':
		prefix: 'CutsceneSetFilter'
		body: 'CutsceneSetFilter(${1:int inCutscene}, ${2:string inFilter})'
	'int CutsceneGetTriggerControl':
		prefix: 'CutsceneGetTriggerControl'
		body: 'CutsceneGetTriggerControl(${1:int inControlId})'
	'void WaitForCutsceneToEnd':
		prefix: 'WaitForCutsceneToEnd'
		body: 'WaitForCutsceneToEnd(${1:int inCutscene})'
	'void TriggerAddEventCutsceneBookmarkFired':
		prefix: 'TriggerAddEventCutsceneBookmarkFired'
		body: 'TriggerAddEventCutsceneBookmarkFired(${1:trigger t}, ${2:int inCutscene}, ${3:string inBookmarkName})'
	'void TriggerAddEventCutsceneEndSceneFired':
		prefix: 'TriggerAddEventCutsceneEndSceneFired'
		body: 'TriggerAddEventCutsceneEndSceneFired(${1:trigger t}, ${2:int inCutscene})'
	'void TriggerAddEventCutsceneConversationLine':
		prefix: 'TriggerAddEventCutsceneConversationLine'
		body: 'TriggerAddEventCutsceneConversationLine(${1:trigger t}, ${2:int inCutscene}, ${3:string inConversationLine})'
	'int EventCutsceneId':
		prefix: 'EventCutsceneId'
		body: 'EventCutsceneId()'
	'string EventCutsceneBookmark':
		prefix: 'EventCutsceneBookmark'
		body: 'EventCutsceneBookmark()'
	'void DataTableClear':
		prefix: 'DataTableClear'
		body: 'DataTableClear(${1:bool global})'
	'int DataTableValueCount':
		prefix: 'DataTableValueCount'
		body: 'DataTableValueCount(${1:bool global})'
	'string DataTableValueName':
		prefix: 'DataTableValueName'
		body: 'DataTableValueName(${1:bool global}, ${2:int index})'
	'bool DataTableValueExists':
		prefix: 'DataTableValueExists'
		body: 'DataTableValueExists(${1:bool global}, ${2:string name})'
	'int DataTableValueType':
		prefix: 'DataTableValueType'
		body: 'DataTableValueType(${1:bool global}, ${2:string name})'
	'void DataTableValueRemove':
		prefix: 'DataTableValueRemove'
		body: 'DataTableValueRemove(${1:bool global}, ${2:string name})'
	'void DataTableSetAbilCmd':
		prefix: 'DataTableSetAbilCmd'
		body: 'DataTableSetAbilCmd(${1:bool global}, ${2:string name}, ${3:abilcmd val})'
	'abilcmd DataTableGetAbilCmd':
		prefix: 'DataTableGetAbilCmd'
		body: 'DataTableGetAbilCmd(${1:bool global}, ${2:string name})'
	'void DataTableSetActor':
		prefix: 'DataTableSetActor'
		body: 'DataTableSetActor(${1:bool global}, ${2:string name}, ${3:actor val})'
	'actor DataTableGetActor':
		prefix: 'DataTableGetActor'
		body: 'DataTableGetActor(${1:bool global}, ${2:string name})'
	'void DataTableSetActorScope':
		prefix: 'DataTableSetActorScope'
		body: 'DataTableSetActorScope(${1:bool global}, ${2:string name}, ${3:actorscope val})'
	'actorscope DataTableGetActorScope':
		prefix: 'DataTableGetActorScope'
		body: 'DataTableGetActorScope(${1:bool global}, ${2:string name})'
	'void DataTableSetAIFilter':
		prefix: 'DataTableSetAIFilter'
		body: 'DataTableSetAIFilter(${1:bool global}, ${2:string name}, ${3:aifilter val})'
	'aifilter DataTableGetAIFilter':
		prefix: 'DataTableGetAIFilter'
		body: 'DataTableGetAIFilter(${1:bool global}, ${2:string name})'
	'void DataTableSetBank':
		prefix: 'DataTableSetBank'
		body: 'DataTableSetBank(${1:bool global}, ${2:string name}, ${3:bank val})'
	'bank DataTableGetBank':
		prefix: 'DataTableGetBank'
		body: 'DataTableGetBank(${1:bool global}, ${2:string name})'
	'void DataTableSetBool':
		prefix: 'DataTableSetBool'
		body: 'DataTableSetBool(${1:bool global}, ${2:string name}, ${3:bool val})'
	'bool DataTableGetBool':
		prefix: 'DataTableGetBool'
		body: 'DataTableGetBool(${1:bool global}, ${2:string name})'
	'void DataTableSetByte':
		prefix: 'DataTableSetByte'
		body: 'DataTableSetByte(${1:bool global}, ${2:string name}, ${3:byte val})'
	'byte DataTableGetByte':
		prefix: 'DataTableGetByte'
		body: 'DataTableGetByte(${1:bool global}, ${2:string name})'
	'void DataTableSetCameraInfo':
		prefix: 'DataTableSetCameraInfo'
		body: 'DataTableSetCameraInfo(${1:bool global}, ${2:string name}, ${3:camerainfo val})'
	'camerainfo DataTableGetCameraInfo':
		prefix: 'DataTableGetCameraInfo'
		body: 'DataTableGetCameraInfo(${1:bool global}, ${2:string name})'
	'void DataTableSetCinematic':
		prefix: 'DataTableSetCinematic'
		body: 'DataTableSetCinematic(${1:bool global}, ${2:string name}, ${3:int val})'
	'int DataTableGetCinematic':
		prefix: 'DataTableGetCinematic'
		body: 'DataTableGetCinematic(${1:bool global}, ${2:string name})'
	'void DataTableSetColor':
		prefix: 'DataTableSetColor'
		body: 'DataTableSetColor(${1:bool global}, ${2:string name}, ${3:color val})'
	'color DataTableGetColor':
		prefix: 'DataTableGetColor'
		body: 'DataTableGetColor(${1:bool global}, ${2:string name})'
	'void DataTableSetControl':
		prefix: 'DataTableSetControl'
		body: 'DataTableSetControl(${1:bool global}, ${2:string name}, ${3:int val})'
	'int DataTableGetControl':
		prefix: 'DataTableGetControl'
		body: 'DataTableGetControl(${1:bool global}, ${2:string name})'
	'void DataTableSetConversation':
		prefix: 'DataTableSetConversation'
		body: 'DataTableSetConversation(${1:bool global}, ${2:string name}, ${3:int val})'
	'int DataTableGetConversation':
		prefix: 'DataTableGetConversation'
		body: 'DataTableGetConversation(${1:bool global}, ${2:string name})'
	'void DataTableSetDialog':
		prefix: 'DataTableSetDialog'
		body: 'DataTableSetDialog(${1:bool global}, ${2:string name}, ${3:int val})'
	'int DataTableGetDialog':
		prefix: 'DataTableGetDialog'
		body: 'DataTableGetDialog(${1:bool global}, ${2:string name})'
	'void DataTableSetDoodad':
		prefix: 'DataTableSetDoodad'
		body: 'DataTableSetDoodad(${1:bool global}, ${2:string name}, ${3:doodad val})'
	'doodad DataTableGetDoodad':
		prefix: 'DataTableGetDoodad'
		body: 'DataTableGetDoodad(${1:bool global}, ${2:string name})'
	'void DataTableSetFixed':
		prefix: 'DataTableSetFixed'
		body: 'DataTableSetFixed(${1:bool global}, ${2:string name}, ${3:fixed val})'
	'fixed DataTableGetFixed':
		prefix: 'DataTableGetFixed'
		body: 'DataTableGetFixed(${1:bool global}, ${2:string name})'
	'void DataTableSetGenericHandle':
		prefix: 'DataTableSetGenericHandle'
		body: 'DataTableSetGenericHandle(${1:bool global}, ${2:string name}, ${3:generichandle val})'
	'generichandle DataTableGetGenericHandle':
		prefix: 'DataTableGetGenericHandle'
		body: 'DataTableGetGenericHandle(${1:bool global}, ${2:string name})'
	'void DataTableSetInt':
		prefix: 'DataTableSetInt'
		body: 'DataTableSetInt(${1:bool global}, ${2:string name}, ${3:int val})'
	'int DataTableGetInt':
		prefix: 'DataTableGetInt'
		body: 'DataTableGetInt(${1:bool global}, ${2:string name})'
	'void DataTableSetMarker':
		prefix: 'DataTableSetMarker'
		body: 'DataTableSetMarker(${1:bool global}, ${2:string name}, ${3:marker val})'
	'marker DataTableGetMarker':
		prefix: 'DataTableGetMarker'
		body: 'DataTableGetMarker(${1:bool global}, ${2:string name})'
	'void DataTableSetObjective':
		prefix: 'DataTableSetObjective'
		body: 'DataTableSetObjective(${1:bool global}, ${2:string name}, ${3:int val})'
	'int DataTableGetObjective':
		prefix: 'DataTableGetObjective'
		body: 'DataTableGetObjective(${1:bool global}, ${2:string name})'
	'void DataTableSetOrder':
		prefix: 'DataTableSetOrder'
		body: 'DataTableSetOrder(${1:bool global}, ${2:string name}, ${3:order val})'
	'order DataTableGetOrder':
		prefix: 'DataTableGetOrder'
		body: 'DataTableGetOrder(${1:bool global}, ${2:string name})'
	'void DataTableSetPing':
		prefix: 'DataTableSetPing'
		body: 'DataTableSetPing(${1:bool global}, ${2:string name}, ${3:int val})'
	'int DataTableGetPing':
		prefix: 'DataTableGetPing'
		body: 'DataTableGetPing(${1:bool global}, ${2:string name})'
	'void DataTableSetPlanet':
		prefix: 'DataTableSetPlanet'
		body: 'DataTableSetPlanet(${1:bool global}, ${2:string name}, ${3:int val})'
	'int DataTableGetPlanet':
		prefix: 'DataTableGetPlanet'
		body: 'DataTableGetPlanet(${1:bool global}, ${2:string name})'
	'void DataTableSetPlayerGroup':
		prefix: 'DataTableSetPlayerGroup'
		body: 'DataTableSetPlayerGroup(${1:bool global}, ${2:string name}, ${3:playergroup val})'
	'playergroup DataTableGetPlayerGroup':
		prefix: 'DataTableGetPlayerGroup'
		body: 'DataTableGetPlayerGroup(${1:bool global}, ${2:string name})'
	'void DataTableSetPoint':
		prefix: 'DataTableSetPoint'
		body: 'DataTableSetPoint(${1:bool global}, ${2:string name}, ${3:point val})'
	'point DataTableGetPoint':
		prefix: 'DataTableGetPoint'
		body: 'DataTableGetPoint(${1:bool global}, ${2:string name})'
	'void DataTableSetPortrait':
		prefix: 'DataTableSetPortrait'
		body: 'DataTableSetPortrait(${1:bool global}, ${2:string name}, ${3:int val})'
	'int DataTableGetPortrait':
		prefix: 'DataTableGetPortrait'
		body: 'DataTableGetPortrait(${1:bool global}, ${2:string name})'
	'void DataTableSetRegion':
		prefix: 'DataTableSetRegion'
		body: 'DataTableSetRegion(${1:bool global}, ${2:string name}, ${3:region val})'
	'region DataTableGetRegion':
		prefix: 'DataTableGetRegion'
		body: 'DataTableGetRegion(${1:bool global}, ${2:string name})'
	'void DataTableSetReply':
		prefix: 'DataTableSetReply'
		body: 'DataTableSetReply(${1:bool global}, ${2:string name}, ${3:int val})'
	'int DataTableGetReply':
		prefix: 'DataTableGetReply'
		body: 'DataTableGetReply(${1:bool global}, ${2:string name})'
	'void DataTableSetRevealer':
		prefix: 'DataTableSetRevealer'
		body: 'DataTableSetRevealer(${1:bool global}, ${2:string name}, ${3:revealer val})'
	'revealer DataTableGetRevealer':
		prefix: 'DataTableGetRevealer'
		body: 'DataTableGetRevealer(${1:bool global}, ${2:string name})'
	'void DataTableSetSound':
		prefix: 'DataTableSetSound'
		body: 'DataTableSetSound(${1:bool global}, ${2:string name}, ${3:sound val})'
	'sound DataTableGetSound':
		prefix: 'DataTableGetSound'
		body: 'DataTableGetSound(${1:bool global}, ${2:string name})'
	'void DataTableSetSoundLink':
		prefix: 'DataTableSetSoundLink'
		body: 'DataTableSetSoundLink(${1:bool global}, ${2:string name}, ${3:soundlink val})'
	'soundlink DataTableGetSoundLink':
		prefix: 'DataTableGetSoundLink'
		body: 'DataTableGetSoundLink(${1:bool global}, ${2:string name})'
	'void DataTableSetString':
		prefix: 'DataTableSetString'
		body: 'DataTableSetString(${1:bool global}, ${2:string name}, ${3:string val})'
	'string DataTableGetString':
		prefix: 'DataTableGetString'
		body: 'DataTableGetString(${1:bool global}, ${2:string name})'
	'void DataTableSetText':
		prefix: 'DataTableSetText'
		body: 'DataTableSetText(${1:bool global}, ${2:string name}, ${3:text val})'
	'text DataTableGetText':
		prefix: 'DataTableGetText'
		body: 'DataTableGetText(${1:bool global}, ${2:string name})'
	'void DataTableSetTimer':
		prefix: 'DataTableSetTimer'
		body: 'DataTableSetTimer(${1:bool global}, ${2:string name}, ${3:timer val})'
	'timer DataTableGetTimer':
		prefix: 'DataTableGetTimer'
		body: 'DataTableGetTimer(${1:bool global}, ${2:string name})'
	'void DataTableSetTransmission':
		prefix: 'DataTableSetTransmission'
		body: 'DataTableSetTransmission(${1:bool global}, ${2:string name}, ${3:int val})'
	'int DataTableGetTransmission':
		prefix: 'DataTableGetTransmission'
		body: 'DataTableGetTransmission(${1:bool global}, ${2:string name})'
	'void DataTableSetTransmissionSource':
		prefix: 'DataTableSetTransmissionSource'
		body: 'DataTableSetTransmissionSource(${1:bool global}, ${2:string name}, ${3:transmissionsource val})'
	'transmissionsource DataTableGetTransmissionSource':
		prefix: 'DataTableGetTransmissionSource'
		body: 'DataTableGetTransmissionSource(${1:bool global}, ${2:string name})'
	'void DataTableSetTrigger':
		prefix: 'DataTableSetTrigger'
		body: 'DataTableSetTrigger(${1:bool global}, ${2:string name}, ${3:trigger val})'
	'trigger DataTableGetTrigger':
		prefix: 'DataTableGetTrigger'
		body: 'DataTableGetTrigger(${1:bool global}, ${2:string name})'
	'void DataTableSetUnit':
		prefix: 'DataTableSetUnit'
		body: 'DataTableSetUnit(${1:bool global}, ${2:string name}, ${3:unit val})'
	'unit DataTableGetUnit':
		prefix: 'DataTableGetUnit'
		body: 'DataTableGetUnit(${1:bool global}, ${2:string name})'
	'void DataTableSetUnitFilter':
		prefix: 'DataTableSetUnitFilter'
		body: 'DataTableSetUnitFilter(${1:bool global}, ${2:string name}, ${3:unitfilter val})'
	'unitfilter DataTableGetUnitFilter':
		prefix: 'DataTableGetUnitFilter'
		body: 'DataTableGetUnitFilter(${1:bool global}, ${2:string name})'
	'void DataTableSetUnitGroup':
		prefix: 'DataTableSetUnitGroup'
		body: 'DataTableSetUnitGroup(${1:bool global}, ${2:string name}, ${3:unitgroup val})'
	'unitgroup DataTableGetUnitGroup':
		prefix: 'DataTableGetUnitGroup'
		body: 'DataTableGetUnitGroup(${1:bool global}, ${2:string name})'
	'void DataTableSetUnitRef':
		prefix: 'DataTableSetUnitRef'
		body: 'DataTableSetUnitRef(${1:bool global}, ${2:string name}, ${3:unitref val})'
	'unitref DataTableGetUnitRef':
		prefix: 'DataTableGetUnitRef'
		body: 'DataTableGetUnitRef(${1:bool global}, ${2:string name})'
	'void DataTableSetWave':
		prefix: 'DataTableSetWave'
		body: 'DataTableSetWave(${1:bool global}, ${2:string name}, ${3:wave val})'
	'wave DataTableGetWave':
		prefix: 'DataTableGetWave'
		body: 'DataTableGetWave(${1:bool global}, ${2:string name})'
	'void DataTableSetWaveInfo':
		prefix: 'DataTableSetWaveInfo'
		body: 'DataTableSetWaveInfo(${1:bool global}, ${2:string name}, ${3:waveinfo val})'
	'waveinfo DataTableGetWaveInfo':
		prefix: 'DataTableGetWaveInfo'
		body: 'DataTableGetWaveInfo(${1:bool global}, ${2:string name})'
	'void DataTableSetWaveTarget':
		prefix: 'DataTableSetWaveTarget'
		body: 'DataTableSetWaveTarget(${1:bool global}, ${2:string name}, ${3:wavetarget val})'
	'wavetarget DataTableGetWaveTarget':
		prefix: 'DataTableGetWaveTarget'
		body: 'DataTableGetWaveTarget(${1:bool global}, ${2:string name})'
	'int DialogCreate':
		prefix: 'DialogCreate'
		body: 'DialogCreate(${1:int width}, ${2:int height}, ${3:int anchor}, ${4:int offsetX}, ${5:int offsetY}, ${6:bool modal})'
	'int DialogLastCreated':
		prefix: 'DialogLastCreated'
		body: 'DialogLastCreated()'
	'void DialogDestroy':
		prefix: 'DialogDestroy'
		body: 'DialogDestroy(${1:int dialog})'
	'void DialogDestroyAll':
		prefix: 'DialogDestroyAll'
		body: 'DialogDestroyAll()'
	'void DialogSetSubtitlePositionOverride':
		prefix: 'DialogSetSubtitlePositionOverride'
		body: 'DialogSetSubtitlePositionOverride(${1:int dialog})'
	'void DialogClearSubtitlePositionOverride':
		prefix: 'DialogClearSubtitlePositionOverride'
		body: 'DialogClearSubtitlePositionOverride()'
	'void DialogSetSubtitlePositionOverrideControl':
		prefix: 'DialogSetSubtitlePositionOverrideControl'
		body: 'DialogSetSubtitlePositionOverrideControl(${1:int inControlId})'
	'void DialogClearSubtitlePositionOverrideControl':
		prefix: 'DialogClearSubtitlePositionOverrideControl'
		body: 'DialogClearSubtitlePositionOverrideControl()'
	'void DialogSetTitle':
		prefix: 'DialogSetTitle'
		body: 'DialogSetTitle(${1:int dialog}, ${2:text title})'
	'void DialogSetSize':
		prefix: 'DialogSetSize'
		body: 'DialogSetSize(${1:int dialog}, ${2:int width}, ${3:int height})'
	'void DialogSetPosition':
		prefix: 'DialogSetPosition'
		body: 'DialogSetPosition(${1:int dialog}, ${2:int anchor}, ${3:int offsetX}, ${4:int offsetY})'
	'void DialogSetPositionRelative':
		prefix: 'DialogSetPositionRelative'
		body: 'DialogSetPositionRelative(${1:int dialog}, ${2:int anchor}, ${3:int relative}, ${4:int relativeAnchor}, ${5:int offsetX}, ${6:int offsetY})'
	'void DialogSetPositionRelativeToUnit':
		prefix: 'DialogSetPositionRelativeToUnit'
		body: 'DialogSetPositionRelativeToUnit(${1:int dialog}, ${2:unit inUnit}, ${3:string inAttachment}, ${4:int offsetX}, ${5:int offsetY})'
	'void DialogSetPositionRelativeToUnitWithAnchor':
		prefix: 'DialogSetPositionRelativeToUnitWithAnchor'
		body: 'DialogSetPositionRelativeToUnitWithAnchor(${1:int dialog}, ${2:unit inUnit}, ${3:string inAttachment}, ${4:int anchor}, ${5:int offsetX}, ${6:int offsetY})'
	'void DialogSetVisible':
		prefix: 'DialogSetVisible'
		body: 'DialogSetVisible(${1:int dialog}, ${2:playergroup players}, ${3:bool isVisible})'
	'void DialogSetTransparency':
		prefix: 'DialogSetTransparency'
		body: 'DialogSetTransparency(${1:int dialog}, ${2:fixed inTransparency})'
	'void DialogSetImage':
		prefix: 'DialogSetImage'
		body: 'DialogSetImage(${1:int dialog}, ${2:string image})'
	'void DialogSetImageVisible':
		prefix: 'DialogSetImageVisible'
		body: 'DialogSetImageVisible(${1:int dialog}, ${2:bool isVisible})'
	'void DialogSetOffscreen':
		prefix: 'DialogSetOffscreen'
		body: 'DialogSetOffscreen(${1:int dialog}, ${2:bool isOffscreen})'
	'void DialogSetFullscreen':
		prefix: 'DialogSetFullscreen'
		body: 'DialogSetFullscreen(${1:int dialog}, ${2:bool isFullscreen})'
	'void DialogSetEnabled':
		prefix: 'DialogSetEnabled'
		body: 'DialogSetEnabled(${1:int dialog}, ${2:bool isEnabled})'
	'void DialogSetChannel':
		prefix: 'DialogSetChannel'
		body: 'DialogSetChannel(${1:int dialog}, ${2:int channel})'
	'void DialogSetRenderPriority':
		prefix: 'DialogSetRenderPriority'
		body: 'DialogSetRenderPriority(${1:int dialog}, ${2:int renderPriority})'
	'void DialogSetObservedType':
		prefix: 'DialogSetObservedType'
		body: 'DialogSetObservedType(${1:int dialog}, ${2:int observedType})'
	'bool DialogIsModal':
		prefix: 'DialogIsModal'
		body: 'DialogIsModal(${1:int dialog})'
	'text DialogGetTitle':
		prefix: 'DialogGetTitle'
		body: 'DialogGetTitle(${1:int dialog})'
	'int DialogGetWidth':
		prefix: 'DialogGetWidth'
		body: 'DialogGetWidth(${1:int dialog})'
	'int DialogGetHeight':
		prefix: 'DialogGetHeight'
		body: 'DialogGetHeight(${1:int dialog})'
	'int DialogGetAnchor':
		prefix: 'DialogGetAnchor'
		body: 'DialogGetAnchor(${1:int dialog})'
	'int DialogGetRelativeDialog':
		prefix: 'DialogGetRelativeDialog'
		body: 'DialogGetRelativeDialog(${1:int dialog})'
	'int DialogGetRelativeAnchor':
		prefix: 'DialogGetRelativeAnchor'
		body: 'DialogGetRelativeAnchor(${1:int dialog})'
	'int DialogGetOffsetX':
		prefix: 'DialogGetOffsetX'
		body: 'DialogGetOffsetX(${1:int dialog})'
	'int DialogGetOffsetY':
		prefix: 'DialogGetOffsetY'
		body: 'DialogGetOffsetY(${1:int dialog})'
	'bool DialogIsVisible':
		prefix: 'DialogIsVisible'
		body: 'DialogIsVisible(${1:int dialog}, ${2:int player})'
	'fixed DialogGetTransparency':
		prefix: 'DialogGetTransparency'
		body: 'DialogGetTransparency(${1:int dialog})'
	'string DialogGetImage':
		prefix: 'DialogGetImage'
		body: 'DialogGetImage(${1:int dialog})'
	'bool DialogIsImageVisible':
		prefix: 'DialogIsImageVisible'
		body: 'DialogIsImageVisible(${1:int dialog})'
	'bool DialogIsOffscreen':
		prefix: 'DialogIsOffscreen'
		body: 'DialogIsOffscreen(${1:int dialog})'
	'bool DialogIsFullscreen':
		prefix: 'DialogIsFullscreen'
		body: 'DialogIsFullscreen(${1:int dialog})'
	'bool DialogIsEnabled':
		prefix: 'DialogIsEnabled'
		body: 'DialogIsEnabled(${1:int dialog})'
	'int DialogGetChannel':
		prefix: 'DialogGetChannel'
		body: 'DialogGetChannel(${1:int dialog})'
	'int DialogGetRenderPriority':
		prefix: 'DialogGetRenderPriority'
		body: 'DialogGetRenderPriority(${1:int dialog})'
	'int DialogControlCreate':
		prefix: 'DialogControlCreate'
		body: 'DialogControlCreate(${1:int dialog}, ${2:int type})'
	'int DialogControlCreateInPanel':
		prefix: 'DialogControlCreateInPanel'
		body: 'DialogControlCreateInPanel(${1:int panel}, ${2:int type})'
	'int DialogControlCreateFromTemplate':
		prefix: 'DialogControlCreateFromTemplate'
		body: 'DialogControlCreateFromTemplate(${1:int dialog}, ${2:int type}, ${3:string inTemplate})'
	'int DialogControlCreateInPanelFromTemplate':
		prefix: 'DialogControlCreateInPanelFromTemplate'
		body: 'DialogControlCreateInPanelFromTemplate(${1:int panel}, ${2:int type}, ${3:string inTemplate})'
	'int DialogControlHookup':
		prefix: 'DialogControlHookup'
		body: 'DialogControlHookup(${1:int panel}, ${2:int type}, ${3:string inTemplate})'
	'int DialogControlHookupStandard':
		prefix: 'DialogControlHookupStandard'
		body: 'DialogControlHookupStandard(${1:int type}, ${2:string inTemplate})'
	'int DialogControlHookupUnitStatus':
		prefix: 'DialogControlHookupUnitStatus'
		body: 'DialogControlHookupUnitStatus(${1:int type}, ${2:string inTemplate}, ${3:unit inUnit})'
	'int DialogControlLastCreated':
		prefix: 'DialogControlLastCreated'
		body: 'DialogControlLastCreated()'
	'void DialogControlDestroy':
		prefix: 'DialogControlDestroy'
		body: 'DialogControlDestroy(${1:int control})'
	'void DialogControlDestroyAll':
		prefix: 'DialogControlDestroyAll'
		body: 'DialogControlDestroyAll(${1:int dialog})'
	'void DialogControlSetSize':
		prefix: 'DialogControlSetSize'
		body: 'DialogControlSetSize(${1:int control}, ${2:playergroup players}, ${3:int width}, ${4:int height})'
	'void DialogControlSetPosition':
		prefix: 'DialogControlSetPosition'
		body: 'DialogControlSetPosition(${1:int control}, ${2:playergroup players}, ${3:int anchor}, ${4:int offsetX}, ${5:int offsetY})'
	'void DialogControlSetPositionRelative':
		prefix: 'DialogControlSetPositionRelative'
		body: 'DialogControlSetPositionRelative(${1:int control}, ${2:playergroup players}, ${3:int anchor}, ${4:int relative}, ${5:int relativeAnchor}, ${6:int offsetX}, ${7:int offsetY})'
	'void DialogControlSetVisible':
		prefix: 'DialogControlSetVisible'
		body: 'DialogControlSetVisible(${1:int control}, ${2:playergroup players}, ${3:bool isVisible})'
	'void DialogControlSetEnabled':
		prefix: 'DialogControlSetEnabled'
		body: 'DialogControlSetEnabled(${1:int control}, ${2:playergroup players}, ${3:bool isEnabled})'
	'void DialogControlSetFullDialog':
		prefix: 'DialogControlSetFullDialog'
		body: 'DialogControlSetFullDialog(${1:int control}, ${2:playergroup players}, ${3:bool isFullDialog})'
	'void DialogControlFadeTransparency':
		prefix: 'DialogControlFadeTransparency'
		body: 'DialogControlFadeTransparency(${1:int control}, ${2:playergroup players}, ${3:fixed fadeTime}, ${4:fixed inTargetTransparency})'
	'int DialogControlGetDialog':
		prefix: 'DialogControlGetDialog'
		body: 'DialogControlGetDialog(${1:int control})'
	'int DialogControlGetType':
		prefix: 'DialogControlGetType'
		body: 'DialogControlGetType(${1:int control})'
	'int DialogControlGetWidth':
		prefix: 'DialogControlGetWidth'
		body: 'DialogControlGetWidth(${1:int control}, ${2:int player})'
	'int DialogControlGetHeight':
		prefix: 'DialogControlGetHeight'
		body: 'DialogControlGetHeight(${1:int control}, ${2:int player})'
	'int DialogControlGetAnchor':
		prefix: 'DialogControlGetAnchor'
		body: 'DialogControlGetAnchor(${1:int control}, ${2:int player})'
	'int DialogControlGetRelativeControl':
		prefix: 'DialogControlGetRelativeControl'
		body: 'DialogControlGetRelativeControl(${1:int control}, ${2:int player})'
	'int DialogControlGetRelativeAnchor':
		prefix: 'DialogControlGetRelativeAnchor'
		body: 'DialogControlGetRelativeAnchor(${1:int control}, ${2:int player})'
	'int DialogControlGetOffsetX':
		prefix: 'DialogControlGetOffsetX'
		body: 'DialogControlGetOffsetX(${1:int control}, ${2:int player})'
	'int DialogControlGetOffsetY':
		prefix: 'DialogControlGetOffsetY'
		body: 'DialogControlGetOffsetY(${1:int control}, ${2:int player})'
	'bool DialogControlIsVisible':
		prefix: 'DialogControlIsVisible'
		body: 'DialogControlIsVisible(${1:int control}, ${2:int player})'
	'bool DialogControlIsEnabled':
		prefix: 'DialogControlIsEnabled'
		body: 'DialogControlIsEnabled(${1:int control}, ${2:int player})'
	'bool DialogControlIsFullDialog':
		prefix: 'DialogControlIsFullDialog'
		body: 'DialogControlIsFullDialog(${1:int control}, ${2:int player})'
	'void DialogControlSetPropertyAsText':
		prefix: 'DialogControlSetPropertyAsText'
		body: 'DialogControlSetPropertyAsText(${1:int control}, ${2:int property}, ${3:playergroup players}, ${4:text value})'
	'void DialogControlSetPropertyAsString':
		prefix: 'DialogControlSetPropertyAsString'
		body: 'DialogControlSetPropertyAsString(${1:int control}, ${2:int property}, ${3:playergroup players}, ${4:string value})'
	'void DialogControlSetPropertyAsInt':
		prefix: 'DialogControlSetPropertyAsInt'
		body: 'DialogControlSetPropertyAsInt(${1:int control}, ${2:int property}, ${3:playergroup players}, ${4:int value})'
	'void DialogControlSetPropertyAsFixed':
		prefix: 'DialogControlSetPropertyAsFixed'
		body: 'DialogControlSetPropertyAsFixed(${1:int control}, ${2:int property}, ${3:playergroup players}, ${4:fixed value})'
	'void DialogControlSetPropertyAsBool':
		prefix: 'DialogControlSetPropertyAsBool'
		body: 'DialogControlSetPropertyAsBool(${1:int control}, ${2:int property}, ${3:playergroup players}, ${4:bool value})'
	'void DialogControlSetPropertyAsColor':
		prefix: 'DialogControlSetPropertyAsColor'
		body: 'DialogControlSetPropertyAsColor(${1:int control}, ${2:int property}, ${3:playergroup players}, ${4:color value})'
	'void DialogControlSetPropertyAsControl':
		prefix: 'DialogControlSetPropertyAsControl'
		body: 'DialogControlSetPropertyAsControl(${1:int control}, ${2:int property}, ${3:playergroup players}, ${4:int value})'
	'void DialogControlSetPropertyAsUnit':
		prefix: 'DialogControlSetPropertyAsUnit'
		body: 'DialogControlSetPropertyAsUnit(${1:int control}, ${2:int property}, ${3:playergroup players}, ${4:unit value})'
	'void DialogControlSetPropertyAsUnitGroup':
		prefix: 'DialogControlSetPropertyAsUnitGroup'
		body: 'DialogControlSetPropertyAsUnitGroup(${1:int control}, ${2:int property}, ${3:playergroup players}, ${4:unitgroup value})'
	'text DialogControlGetPropertyAsText':
		prefix: 'DialogControlGetPropertyAsText'
		body: 'DialogControlGetPropertyAsText(${1:int control}, ${2:int property}, ${3:int player})'
	'string DialogControlGetPropertyAsString':
		prefix: 'DialogControlGetPropertyAsString'
		body: 'DialogControlGetPropertyAsString(${1:int control}, ${2:int property}, ${3:int player})'
	'int DialogControlGetPropertyAsInt':
		prefix: 'DialogControlGetPropertyAsInt'
		body: 'DialogControlGetPropertyAsInt(${1:int control}, ${2:int property}, ${3:int player})'
	'fixed DialogControlGetPropertyAsFixed':
		prefix: 'DialogControlGetPropertyAsFixed'
		body: 'DialogControlGetPropertyAsFixed(${1:int control}, ${2:int property}, ${3:int player})'
	'bool DialogControlGetPropertyAsBool':
		prefix: 'DialogControlGetPropertyAsBool'
		body: 'DialogControlGetPropertyAsBool(${1:int control}, ${2:int property}, ${3:int player})'
	'color DialogControlGetPropertyAsColor':
		prefix: 'DialogControlGetPropertyAsColor'
		body: 'DialogControlGetPropertyAsColor(${1:int control}, ${2:int property}, ${3:int player})'
	'int DialogControlGetPropertyAsControl':
		prefix: 'DialogControlGetPropertyAsControl'
		body: 'DialogControlGetPropertyAsControl(${1:int control}, ${2:int property}, ${3:int player})'
	'unit DialogControlGetPropertyAsUnit':
		prefix: 'DialogControlGetPropertyAsUnit'
		body: 'DialogControlGetPropertyAsUnit(${1:int control}, ${2:int property}, ${3:int player})'
	'unitgroup DialogControlGetPropertyAsUnitGroup':
		prefix: 'DialogControlGetPropertyAsUnitGroup'
		body: 'DialogControlGetPropertyAsUnitGroup(${1:int control}, ${2:int property}, ${3:int player})'
	'void DialogControlAddItem':
		prefix: 'DialogControlAddItem'
		body: 'DialogControlAddItem(${1:int control}, ${2:playergroup players}, ${3:text value})'
	'void DialogControlRemoveItem':
		prefix: 'DialogControlRemoveItem'
		body: 'DialogControlRemoveItem(${1:int control}, ${2:playergroup players}, ${3:int index})'
	'void DialogControlRemoveAllItems':
		prefix: 'DialogControlRemoveAllItems'
		body: 'DialogControlRemoveAllItems(${1:int control}, ${2:playergroup players})'
	'void DialogControlSelectItem':
		prefix: 'DialogControlSelectItem'
		body: 'DialogControlSelectItem(${1:int control}, ${2:playergroup players}, ${3:int index})'
	'void DialogControlClearSelectedItem':
		prefix: 'DialogControlClearSelectedItem'
		body: 'DialogControlClearSelectedItem(${1:int control}, ${2:playergroup players})'
	'int DialogControlGetItemCount':
		prefix: 'DialogControlGetItemCount'
		body: 'DialogControlGetItemCount(${1:int control}, ${2:int player})'
	'int DialogControlGetSelectedItem':
		prefix: 'DialogControlGetSelectedItem'
		body: 'DialogControlGetSelectedItem(${1:int control}, ${2:int player})'
	'void DialogControlInvokeAsText':
		prefix: 'DialogControlInvokeAsText'
		body: 'DialogControlInvokeAsText(${1:int control}, ${2:playergroup players}, ${3:string method}, ${4:text param1}, ${5:text param2}, ${6:text param3}, ${7:text param4})'
	'void DialogControlInvokeAsString':
		prefix: 'DialogControlInvokeAsString'
		body: 'DialogControlInvokeAsString(${1:int control}, ${2:playergroup players}, ${3:string method}, ${4:string param1}, ${5:string param2}, ${6:string param3}, ${7:string param4})'
	'void DialogControlSendAnimationEvent':
		prefix: 'DialogControlSendAnimationEvent'
		body: 'DialogControlSendAnimationEvent(${1:int control}, ${2:playergroup players}, ${3:string eventName})'
	'void DialogControlSetAnimationSpeed':
		prefix: 'DialogControlSetAnimationSpeed'
		body: 'DialogControlSetAnimationSpeed(${1:int control}, ${2:playergroup players}, ${3:string animationName}, ${4:fixed speed})'
	'void DialogControlSetAnimationTime':
		prefix: 'DialogControlSetAnimationTime'
		body: 'DialogControlSetAnimationTime(${1:int control}, ${2:playergroup players}, ${3:string animationName}, ${4:fixed speed})'
	'void DialogControlAdvanceAnimation':
		prefix: 'DialogControlAdvanceAnimation'
		body: 'DialogControlAdvanceAnimation(${1:int control}, ${2:playergroup players}, ${3:string animationName}, ${4:fixed speed})'
	'void DialogControlForceTransition':
		prefix: 'DialogControlForceTransition'
		body: 'DialogControlForceTransition(${1:int control}, ${2:playergroup players}, ${3:bool inVisible}, ${4:bool inInstant})'
	'void DialogControlRequestFocus':
		prefix: 'DialogControlRequestFocus'
		body: 'DialogControlRequestFocus(${1:int control}, ${2:playergroup players})'
	'void DialogControlSetObservedType':
		prefix: 'DialogControlSetObservedType'
		body: 'DialogControlSetObservedType(${1:int control}, ${2:int observedType})'
	'void TriggerAddEventDialogControl':
		prefix: 'TriggerAddEventDialogControl'
		body: 'TriggerAddEventDialogControl(${1:trigger t}, ${2:int player}, ${3:int control}, ${4:int eventType})'
	'int EventDialogControl':
		prefix: 'EventDialogControl'
		body: 'EventDialogControl()'
	'int EventDialogControlEventType':
		prefix: 'EventDialogControlEventType'
		body: 'EventDialogControlEventType()'
	'int EventDialogControlMouseButton':
		prefix: 'EventDialogControlMouseButton'
		body: 'EventDialogControlMouseButton()'
	'int EffectHistoryCount':
		prefix: 'EffectHistoryCount'
		body: 'EffectHistoryCount(${1:effecthistory inHistory})'
	'string EffectHistoryGetAbil':
		prefix: 'EffectHistoryGetAbil'
		body: 'EffectHistoryGetAbil(${1:effecthistory inHistory}, ${2:int inIndex})'
	'fixed EffectHistoryGetAmountFixed':
		prefix: 'EffectHistoryGetAmountFixed'
		body: 'EffectHistoryGetAmountFixed(${1:effecthistory inHistory}, ${2:int inIndex}, ${3:int inAmount}, ${4:bool inTotal})'
	'int EffectHistoryGetAmountInt':
		prefix: 'EffectHistoryGetAmountInt'
		body: 'EffectHistoryGetAmountInt(${1:effecthistory inHistory}, ${2:int inIndex}, ${3:int inAmount}, ${4:bool inTotal})'
	'string EffectHistoryGetEffect':
		prefix: 'EffectHistoryGetEffect'
		body: 'EffectHistoryGetEffect(${1:effecthistory inHistory}, ${2:int inIndex}, ${3:int inEffect})'
	'fixed EffectHistoryGetTime':
		prefix: 'EffectHistoryGetTime'
		body: 'EffectHistoryGetTime(${1:effecthistory inHistory}, ${2:int inIndex})'
	'int EffectHistoryGetType':
		prefix: 'EffectHistoryGetType'
		body: 'EffectHistoryGetType(${1:effecthistory inHistory}, ${2:int inIndex})'
	'unit EffectHistoryGetUnitByLocation':
		prefix: 'EffectHistoryGetUnitByLocation'
		body: 'EffectHistoryGetUnitByLocation(${1:effecthistory inHistory}, ${2:int inIndex}, ${3:int inLocation})'
	'string EffectHistoryGetWeapon':
		prefix: 'EffectHistoryGetWeapon'
		body: 'EffectHistoryGetWeapon(${1:effecthistory inHistory}, ${2:int inIndex})'
	'string GameTimeOfDayGet':
		prefix: 'GameTimeOfDayGet'
		body: 'GameTimeOfDayGet()'
	'void GameTimeOfDaySet':
		prefix: 'GameTimeOfDaySet'
		body: 'GameTimeOfDaySet(${1:string x})'
	'fixed GameTimeOfDayGetLength':
		prefix: 'GameTimeOfDayGetLength'
		body: 'GameTimeOfDayGetLength()'
	'void GameTimeOfDaySetLength':
		prefix: 'GameTimeOfDaySetLength'
		body: 'GameTimeOfDaySetLength(${1:fixed inSecs})'
	'void GameTimeOfDayPause':
		prefix: 'GameTimeOfDayPause'
		body: 'GameTimeOfDayPause(${1:bool inPause})'
	'bool GameTimeOfDayIsPaused':
		prefix: 'GameTimeOfDayIsPaused'
		body: 'GameTimeOfDayIsPaused()'
	'int CreepAdjacent':
		prefix: 'CreepAdjacent'
		body: 'CreepAdjacent(${1:point inPos})'
	'bool CreepIsPresent':
		prefix: 'CreepIsPresent'
		body: 'CreepIsPresent(${1:point inPos})'
	'void CreepModify':
		prefix: 'CreepModify'
		body: 'CreepModify(${1:point inPos}, ${2:fixed inRadius}, ${3:bool inAdd}, ${4:bool inPermanent})'
	'void CreepSetSpeed':
		prefix: 'CreepSetSpeed'
		body: 'CreepSetSpeed(${1:int inType}, ${2:fixed inPercent})'
	'void PathingModify':
		prefix: 'PathingModify'
		body: 'PathingModify(${1:region inArea}, ${2:int inType}, ${3:bool inAdd})'
	'void PathingUpdate':
		prefix: 'PathingUpdate'
		body: 'PathingUpdate()'
	'void PathingReset':
		prefix: 'PathingReset'
		body: 'PathingReset()'
	'int PathingType':
		prefix: 'PathingType'
		body: 'PathingType(${1:point inPos})'
	'int PowerLevel':
		prefix: 'PowerLevel'
		body: 'PowerLevel(${1:int inPlayer}, ${2:point inPos}, ${3:string inLink})'
	'bool PowerIsProvidedBy':
		prefix: 'PowerIsProvidedBy'
		body: 'PowerIsProvidedBy(${1:int inPlayer}, ${2:point inPos}, ${3:string inLink}, ${4:unit inSource}, ${5:int inMinLevel})'
	'bool CrossCliff':
		prefix: 'CrossCliff'
		body: 'CrossCliff(${1:point inFrom}, ${2:point inDest})'
	'int CliffLevel':
		prefix: 'CliffLevel'
		body: 'CliffLevel(${1:point inPos})'
	'fixed WorldHeight':
		prefix: 'WorldHeight'
		body: 'WorldHeight(${1:int inType}, ${2:point inPos})'
	'bool InShrub':
		prefix: 'InShrub'
		body: 'InShrub(${1:point inPos})'
	'void GameSetLighting':
		prefix: 'GameSetLighting'
		body: 'GameSetLighting(${1:string inId}, ${2:fixed inBlendTime})'
	'void GameSetToDLighting':
		prefix: 'GameSetToDLighting'
		body: 'GameSetToDLighting(${1:string inId})'
	'void SelectMainShadowLight':
		prefix: 'SelectMainShadowLight'
		body: 'SelectMainShadowLight(${1:string inId})'
	'void GameSetBackground':
		prefix: 'GameSetBackground'
		body: 'GameSetBackground(${1:int inType}, ${2:string inModel}, ${3:fixed inAnimSpeed})'
	'void GameDestroyEffects':
		prefix: 'GameDestroyEffects'
		body: 'GameDestroyEffects(${1:point pos}, ${2:fixed radius}, ${3:int maxCount}, ${4:string effectType})'
	'void TerrainShowRegion':
		prefix: 'TerrainShowRegion'
		body: 'TerrainShowRegion(${1:region inArea}, ${2:bool inShow})'
	'void WaterSetState':
		prefix: 'WaterSetState'
		body: 'WaterSetState(${1:string inWater}, ${2:fixed inDuration}, ${3:int inMorphType})'
	'void WaterPause':
		prefix: 'WaterPause'
		body: 'WaterPause(${1:string inWater}, ${2:bool inPaused})'
	'void FogSetEnabled':
		prefix: 'FogSetEnabled'
		body: 'FogSetEnabled(${1:bool f})'
	'void FogSetDisableAtUltra':
		prefix: 'FogSetDisableAtUltra'
		body: 'FogSetDisableAtUltra(${1:bool f})'
	'void FogSetDensity':
		prefix: 'FogSetDensity'
		body: 'FogSetDensity(${1:fixed d})'
	'void FogSetColor':
		prefix: 'FogSetColor'
		body: 'FogSetColor(${1:color c})'
	'void FogSetFallOff':
		prefix: 'FogSetFallOff'
		body: 'FogSetFallOff(${1:fixed f})'
	'void FogSetStartHeight':
		prefix: 'FogSetStartHeight'
		body: 'FogSetStartHeight(${1:fixed h})'
	'void FogSetDensityOverTime':
		prefix: 'FogSetDensityOverTime'
		body: 'FogSetDensityOverTime(${1:fixed d}, ${2:fixed timeRamp})'
	'void FogSetColorOverTime':
		prefix: 'FogSetColorOverTime'
		body: 'FogSetColorOverTime(${1:color c}, ${2:fixed timeRamp})'
	'void FogSetFallOffOverTime':
		prefix: 'FogSetFallOffOverTime'
		body: 'FogSetFallOffOverTime(${1:fixed f}, ${2:fixed timeRamp})'
	'void FogSetStartHeightOverTime':
		prefix: 'FogSetStartHeightOverTime'
		body: 'FogSetStartHeightOverTime(${1:fixed h}, ${2:fixed timeRamp})'
	'void EnvironmentShow':
		prefix: 'EnvironmentShow'
		body: 'EnvironmentShow(${1:int inType}, ${2:bool inShow})'
	'string TerrainTexture':
		prefix: 'TerrainTexture'
		body: 'TerrainTexture(${1:point pos})'
	'bool ConsoleCommand':
		prefix: 'ConsoleCommand'
		body: 'ConsoleCommand(${1:string inText}, ${2:bool allowDefault}, ${3:bool allowMacros})'
	'bool GameIsDebugOptionSet':
		prefix: 'GameIsDebugOptionSet'
		body: 'GameIsDebugOptionSet(${1:string inOptionName}, ${2:int player})'
	'void GameSaveCreate':
		prefix: 'GameSaveCreate'
		body: 'GameSaveCreate(${1:text inName}, ${2:text inDescription}, ${3:string inImage}, ${4:bool inAutomatic})'
	'text GameMapName':
		prefix: 'GameMapName'
		body: 'GameMapName()'
	'text GameMapDescription':
		prefix: 'GameMapDescription'
		body: 'GameMapDescription()'
	'bool GameMapIsBlizzard':
		prefix: 'GameMapIsBlizzard'
		body: 'GameMapIsBlizzard()'
	'string GameMapPath':
		prefix: 'GameMapPath'
		body: 'GameMapPath()'
	'void GameSetMissionTimePaused':
		prefix: 'GameSetMissionTimePaused'
		body: 'GameSetMissionTimePaused(${1:bool inPaused})'
	'bool GameIsMissionTimePaused':
		prefix: 'GameIsMissionTimePaused'
		body: 'GameIsMissionTimePaused()'
	'fixed GameGetMissionTime':
		prefix: 'GameGetMissionTime'
		body: 'GameGetMissionTime()'
	'fixed GameGetSpeed':
		prefix: 'GameGetSpeed'
		body: 'GameGetSpeed()'
	'void GameSetSpeedValue':
		prefix: 'GameSetSpeedValue'
		body: 'GameSetSpeedValue(${1:int speed})'
	'int GameGetSpeedValue':
		prefix: 'GameGetSpeedValue'
		body: 'GameGetSpeedValue()'
	'void GameSetSpeedValueMinimum':
		prefix: 'GameSetSpeedValueMinimum'
		body: 'GameSetSpeedValueMinimum(${1:int speed})'
	'int GameGetSpeedValueMinimum':
		prefix: 'GameGetSpeedValueMinimum'
		body: 'GameGetSpeedValueMinimum()'
	'void GameSetSpeedLocked':
		prefix: 'GameSetSpeedLocked'
		body: 'GameSetSpeedLocked(${1:bool isLocked})'
	'bool GameIsSpeedLocked':
		prefix: 'GameIsSpeedLocked'
		body: 'GameIsSpeedLocked()'
	'void GameSetGlobalTimeScale':
		prefix: 'GameSetGlobalTimeScale'
		body: 'GameSetGlobalTimeScale(${1:fixed timeScale})'
	'fixed GameGetGlobalTimeScale':
		prefix: 'GameGetGlobalTimeScale'
		body: 'GameGetGlobalTimeScale()'
	'string GameAttributeGameValue':
		prefix: 'GameAttributeGameValue'
		body: 'GameAttributeGameValue(${1:string name})'
	'string GameAttributePlayerValue':
		prefix: 'GameAttributePlayerValue'
		body: 'GameAttributePlayerValue(${1:string name}, ${2:int player})'
	'playergroup GameAttributePlayersForTeam':
		prefix: 'GameAttributePlayersForTeam'
		body: 'GameAttributePlayersForTeam(${1:int team})'
	'void GameSetSeed':
		prefix: 'GameSetSeed'
		body: 'GameSetSeed(${1:int value})'
	'void GameSetSeedLocked':
		prefix: 'GameSetSeedLocked'
		body: 'GameSetSeedLocked(${1:bool locked})'
	'bool GameIsSeedLocked':
		prefix: 'GameIsSeedLocked'
		body: 'GameIsSeedLocked()'
	'void GameSetAbsoluteTimeRemaining':
		prefix: 'GameSetAbsoluteTimeRemaining'
		body: 'GameSetAbsoluteTimeRemaining(${1:fixed inTime})'
	'fixed GameGetAbsoluteTimeRemaining':
		prefix: 'GameGetAbsoluteTimeRemaining'
		body: 'GameGetAbsoluteTimeRemaining()'
	'void GameSetAbsoluteTimeRemainingPaused':
		prefix: 'GameSetAbsoluteTimeRemainingPaused'
		body: 'GameSetAbsoluteTimeRemainingPaused(${1:bool inPaused})'
	'bool GameGetAbsoluteTimeRemainingPaused':
		prefix: 'GameGetAbsoluteTimeRemainingPaused'
		body: 'GameGetAbsoluteTimeRemainingPaused()'
	'void GamePauseAllCharges':
		prefix: 'GamePauseAllCharges'
		body: 'GamePauseAllCharges(${1:bool inPaused})'
	'void GamePauseAllCooldowns':
		prefix: 'GamePauseAllCooldowns'
		body: 'GamePauseAllCooldowns(${1:bool inPaused})'
	'void GameAddChargeRegen':
		prefix: 'GameAddChargeRegen'
		body: 'GameAddChargeRegen(${1:string inCharge}, ${2:fixed inVal})'
	'void GameAddChargeRegenRemaining':
		prefix: 'GameAddChargeRegenRemaining'
		body: 'GameAddChargeRegenRemaining(${1:string inCharge}, ${2:fixed inVal})'
	'fixed GameGetChargeRegen':
		prefix: 'GameGetChargeRegen'
		body: 'GameGetChargeRegen(${1:string inCharge})'
	'void GameAddChargeRegenFull':
		prefix: 'GameAddChargeRegenFull'
		body: 'GameAddChargeRegenFull(${1:string inCharge}, ${2:fixed inVal})'
	'fixed GameGetChargeRegenFull':
		prefix: 'GameGetChargeRegenFull'
		body: 'GameGetChargeRegenFull(${1:string inCharge}, ${2:bool adjustmentOnly})'
	'void GameAddChargeUsed':
		prefix: 'GameAddChargeUsed'
		body: 'GameAddChargeUsed(${1:string inCharge}, ${2:fixed inVal})'
	'fixed GameGetChargeUsed':
		prefix: 'GameGetChargeUsed'
		body: 'GameGetChargeUsed(${1:string inCharge})'
	'void GameAddCooldown':
		prefix: 'GameAddCooldown'
		body: 'GameAddCooldown(${1:string inCooldown}, ${2:fixed inVal})'
	'fixed GameGetCooldown':
		prefix: 'GameGetCooldown'
		body: 'GameGetCooldown(${1:string inCooldown})'
	'bool GameIsTestMap':
		prefix: 'GameIsTestMap'
		body: 'GameIsTestMap(${1:bool inAuto})'
	'bool GameIsExaminable':
		prefix: 'GameIsExaminable'
		body: 'GameIsExaminable()'
	'int GameTestConfigType':
		prefix: 'GameTestConfigType'
		body: 'GameTestConfigType()'
	'bool GameIsOnline':
		prefix: 'GameIsOnline'
		body: 'GameIsOnline()'
	'bool GameIsMatchmade':
		prefix: 'GameIsMatchmade'
		body: 'GameIsMatchmade()'
	'bool GameIsCompetitive':
		prefix: 'GameIsCompetitive'
		body: 'GameIsCompetitive()'
	'bool GameIsPractice':
		prefix: 'GameIsPractice'
		body: 'GameIsPractice()'
	'bool GameIsCooperative':
		prefix: 'GameIsCooperative'
		body: 'GameIsCooperative()'
	'bool GameAreHeroDuplicatesAllowed':
		prefix: 'GameAreHeroDuplicatesAllowed'
		body: 'GameAreHeroDuplicatesAllowed()'
	'void GameSetNextMap':
		prefix: 'GameSetNextMap'
		body: 'GameSetNextMap(${1:string inMap})'
	'void SetNextMissionDifficulty':
		prefix: 'SetNextMissionDifficulty'
		body: 'SetNextMissionDifficulty(${1:playergroup inPlayerGroup}, ${2:int inDifficultyLevel})'
	'bool GameIsTransitionMap':
		prefix: 'GameIsTransitionMap'
		body: 'GameIsTransitionMap()'
	'void GameSetTransitionMap':
		prefix: 'GameSetTransitionMap'
		body: 'GameSetTransitionMap(${1:string transitionMap})'
	'string GameTerrainSet':
		prefix: 'GameTerrainSet'
		body: 'GameTerrainSet()'
	'void GameWaitForResourcesToComplete':
		prefix: 'GameWaitForResourcesToComplete'
		body: 'GameWaitForResourcesToComplete()'
	'void GameOver':
		prefix: 'GameOver'
		body: 'GameOver(${1:int player}, ${2:int type}, ${3:bool showDialog}, ${4:bool showScore})'
	'void RestartGame':
		prefix: 'RestartGame'
		body: 'RestartGame(${1:playergroup inPlayerGroup})'
	'void KickFromGame':
		prefix: 'KickFromGame'
		body: 'KickFromGame(${1:playergroup inPlayerGroup})'
	'void GameCheatAllow':
		prefix: 'GameCheatAllow'
		body: 'GameCheatAllow(${1:int cheat}, ${2:bool allow})'
	'bool GameCheatIsAllowed':
		prefix: 'GameCheatIsAllowed'
		body: 'GameCheatIsAllowed(${1:int cheat})'
	'bool GameCheatsEnabled':
		prefix: 'GameCheatsEnabled'
		body: 'GameCheatsEnabled(${1:int category})'
	'bool GameDataIsFullyDownloaded':
		prefix: 'GameDataIsFullyDownloaded'
		body: 'GameDataIsFullyDownloaded(${1:int player})'
	'void GameSetPauseable':
		prefix: 'GameSetPauseable'
		body: 'GameSetPauseable(${1:bool pauseable})'
	'void TriggerAddEventMapInit':
		prefix: 'TriggerAddEventMapInit'
		body: 'TriggerAddEventMapInit(${1:trigger t})'
	'void TriggerAddEventSaveGame':
		prefix: 'TriggerAddEventSaveGame'
		body: 'TriggerAddEventSaveGame(${1:trigger t})'
	'void TriggerAddEventSaveGameDone':
		prefix: 'TriggerAddEventSaveGameDone'
		body: 'TriggerAddEventSaveGameDone(${1:trigger t})'
	'void TriggerAddEventLoadGameDone':
		prefix: 'TriggerAddEventLoadGameDone'
		body: 'TriggerAddEventLoadGameDone(${1:trigger t})'
	'void TriggerAddEventChatMessage':
		prefix: 'TriggerAddEventChatMessage'
		body: 'TriggerAddEventChatMessage(${1:trigger t}, ${2:int player}, ${3:string inText}, ${4:bool exact})'
	'void TriggerAddEventCheatUsed':
		prefix: 'TriggerAddEventCheatUsed'
		body: 'TriggerAddEventCheatUsed(${1:trigger t}, ${2:int player}, ${3:int inCheat})'
	'string EventChatMessage':
		prefix: 'EventChatMessage'
		body: 'EventChatMessage(${1:bool matchedOnly})'
	'int EventCheatUsed':
		prefix: 'EventCheatUsed'
		body: 'EventCheatUsed()'
	'text GameUserName':
		prefix: 'GameUserName'
		body: 'GameUserName(${1:int gameUser})'
	'string GameUserHandle':
		prefix: 'GameUserHandle'
		body: 'GameUserHandle(${1:int gameUser})'
	'void GameUserDisplayMessage':
		prefix: 'GameUserDisplayMessage'
		body: 'GameUserDisplayMessage(${1:int gameUser}, ${2:int messageArea}, ${3:text messageText})'
	'void GameUserClearMessages':
		prefix: 'GameUserClearMessages'
		body: 'GameUserClearMessages(${1:int gameUser}, ${2:int messageArea})'
	'int EventGameUser':
		prefix: 'EventGameUser'
		body: 'EventGameUser()'
	'void IntLoopBegin':
		prefix: 'IntLoopBegin'
		body: 'IntLoopBegin(${1:int start}, ${2:int end})'
	'void IntLoopStep':
		prefix: 'IntLoopStep'
		body: 'IntLoopStep()'
	'bool IntLoopDone':
		prefix: 'IntLoopDone'
		body: 'IntLoopDone()'
	'int IntLoopCurrent':
		prefix: 'IntLoopCurrent'
		body: 'IntLoopCurrent()'
	'void IntLoopEnd':
		prefix: 'IntLoopEnd'
		body: 'IntLoopEnd()'
	'void PlayerGroupLoopBegin':
		prefix: 'PlayerGroupLoopBegin'
		body: 'PlayerGroupLoopBegin(${1:playergroup g})'
	'void PlayerGroupLoopStep':
		prefix: 'PlayerGroupLoopStep'
		body: 'PlayerGroupLoopStep()'
	'bool PlayerGroupLoopDone':
		prefix: 'PlayerGroupLoopDone'
		body: 'PlayerGroupLoopDone()'
	'int PlayerGroupLoopCurrent':
		prefix: 'PlayerGroupLoopCurrent'
		body: 'PlayerGroupLoopCurrent()'
	'void PlayerGroupLoopEnd':
		prefix: 'PlayerGroupLoopEnd'
		body: 'PlayerGroupLoopEnd()'
	'void UnitGroupLoopBegin':
		prefix: 'UnitGroupLoopBegin'
		body: 'UnitGroupLoopBegin(${1:unitgroup g})'
	'void UnitGroupLoopStep':
		prefix: 'UnitGroupLoopStep'
		body: 'UnitGroupLoopStep()'
	'bool UnitGroupLoopDone':
		prefix: 'UnitGroupLoopDone'
		body: 'UnitGroupLoopDone()'
	'unit UnitGroupLoopCurrent':
		prefix: 'UnitGroupLoopCurrent'
		body: 'UnitGroupLoopCurrent()'
	'void UnitGroupLoopEnd':
		prefix: 'UnitGroupLoopEnd'
		body: 'UnitGroupLoopEnd()'
	'marker Marker':
		prefix: 'Marker'
		body: 'Marker(${1:string link})'
	'marker MarkerCastingPlayer':
		prefix: 'MarkerCastingPlayer'
		body: 'MarkerCastingPlayer(${1:string link}, ${2:int player})'
	'marker MarkerCastingUnit':
		prefix: 'MarkerCastingUnit'
		body: 'MarkerCastingUnit(${1:string link}, ${2:unit u})'
	'void MarkerSetCastingPlayer':
		prefix: 'MarkerSetCastingPlayer'
		body: 'MarkerSetCastingPlayer(${1:marker m}, ${2:int player})'
	'int MarkerGetCastingPlayer':
		prefix: 'MarkerGetCastingPlayer'
		body: 'MarkerGetCastingPlayer(${1:marker m})'
	'void MarkerSetCastingUnit':
		prefix: 'MarkerSetCastingUnit'
		body: 'MarkerSetCastingUnit(${1:marker m}, ${2:unit u})'
	'unit MarkerGetCastingUnit':
		prefix: 'MarkerGetCastingUnit'
		body: 'MarkerGetCastingUnit(${1:marker m})'
	'void MarkerSetMatchFlag':
		prefix: 'MarkerSetMatchFlag'
		body: 'MarkerSetMatchFlag(${1:marker m}, ${2:int flag}, ${3:bool state})'
	'bool MarkerGetMatchFlag':
		prefix: 'MarkerGetMatchFlag'
		body: 'MarkerGetMatchFlag(${1:marker m}, ${2:int flag})'
	'void MarkerSetMismatchFlag':
		prefix: 'MarkerSetMismatchFlag'
		body: 'MarkerSetMismatchFlag(${1:marker m}, ${2:int flag}, ${3:bool state})'
	'bool MarkerGetMismatchFlag':
		prefix: 'MarkerGetMismatchFlag'
		body: 'MarkerGetMismatchFlag(${1:marker m}, ${2:int flag})'
	'fixed Floor':
		prefix: 'Floor'
		body: 'Floor(${1:fixed x})'
	'fixed Ceiling':
		prefix: 'Ceiling'
		body: 'Ceiling(${1:fixed x})'
	'fixed Trunc':
		prefix: 'Trunc'
		body: 'Trunc(${1:fixed x})'
	'fixed Round':
		prefix: 'Round'
		body: 'Round(${1:fixed x})'
	'fixed SquareRoot':
		prefix: 'SquareRoot'
		body: 'SquareRoot(${1:fixed x})'
	'fixed Pow2':
		prefix: 'Pow2'
		body: 'Pow2(${1:fixed x})'
	'fixed Log2':
		prefix: 'Log2'
		body: 'Log2(${1:fixed x})'
	'fixed Pow':
		prefix: 'Pow'
		body: 'Pow(${1:fixed x}, ${2:fixed power})'
	'int FloorI':
		prefix: 'FloorI'
		body: 'FloorI(${1:fixed x})'
	'int CeilingI':
		prefix: 'CeilingI'
		body: 'CeilingI(${1:fixed x})'
	'int TruncI':
		prefix: 'TruncI'
		body: 'TruncI(${1:fixed x})'
	'int RoundI':
		prefix: 'RoundI'
		body: 'RoundI(${1:fixed x})'
	'int SquareRootI':
		prefix: 'SquareRootI'
		body: 'SquareRootI(${1:fixed x})'
	'int Pow2I':
		prefix: 'Pow2I'
		body: 'Pow2I(${1:fixed x})'
	'int Log2I':
		prefix: 'Log2I'
		body: 'Log2I(${1:fixed x})'
	'int PowI':
		prefix: 'PowI'
		body: 'PowI(${1:fixed x}, ${2:fixed power})'
	'fixed ModF':
		prefix: 'ModF'
		body: 'ModF(${1:fixed x}, ${2:fixed m})'
	'fixed MinF':
		prefix: 'MinF'
		body: 'MinF(${1:fixed x1}, ${2:fixed x2})'
	'fixed MaxF':
		prefix: 'MaxF'
		body: 'MaxF(${1:fixed x1}, ${2:fixed x2})'
	'fixed AbsF':
		prefix: 'AbsF'
		body: 'AbsF(${1:fixed x})'
	'int ModI':
		prefix: 'ModI'
		body: 'ModI(${1:int x}, ${2:int m})'
	'int MinI':
		prefix: 'MinI'
		body: 'MinI(${1:int x1}, ${2:int x2})'
	'int MaxI':
		prefix: 'MaxI'
		body: 'MaxI(${1:int x1}, ${2:int x2})'
	'int AbsI':
		prefix: 'AbsI'
		body: 'AbsI(${1:int x})'
	'fixed Sin':
		prefix: 'Sin'
		body: 'Sin(${1:fixed degrees})'
	'fixed Cos':
		prefix: 'Cos'
		body: 'Cos(${1:fixed degrees})'
	'fixed Tan':
		prefix: 'Tan'
		body: 'Tan(${1:fixed degrees})'
	'fixed ASin':
		prefix: 'ASin'
		body: 'ASin(${1:fixed x})'
	'fixed ACos':
		prefix: 'ACos'
		body: 'ACos(${1:fixed x})'
	'fixed ATan':
		prefix: 'ATan'
		body: 'ATan(${1:fixed x})'
	'fixed ATan2':
		prefix: 'ATan2'
		body: 'ATan2(${1:fixed y}, ${2:fixed x})'
	'int RandomInt':
		prefix: 'RandomInt'
		body: 'RandomInt(${1:int min}, ${2:int max})'
	'fixed RandomFixed':
		prefix: 'RandomFixed'
		body: 'RandomFixed(${1:fixed min}, ${2:fixed max})'
	'void MeleeInitResourcesForPlayer':
		prefix: 'MeleeInitResourcesForPlayer'
		body: 'MeleeInitResourcesForPlayer(${1:int player}, ${2:string race})'
	'void MeleeInitResources':
		prefix: 'MeleeInitResources'
		body: 'MeleeInitResources()'
	'void MeleeInitUnitsForPlayer':
		prefix: 'MeleeInitUnitsForPlayer'
		body: 'MeleeInitUnitsForPlayer(${1:int player}, ${2:string race}, ${3:point position})'
	'void MeleeInitUnits':
		prefix: 'MeleeInitUnits'
		body: 'MeleeInitUnits()'
	'void MeleeInitAI':
		prefix: 'MeleeInitAI'
		body: 'MeleeInitAI()'
	'void MeleeSetOption':
		prefix: 'MeleeSetOption'
		body: 'MeleeSetOption(${1:int player}, ${2:int option}, ${3:bool value})'
	'bool MeleeGetOption':
		prefix: 'MeleeGetOption'
		body: 'MeleeGetOption(${1:int player}, ${2:int option})'
	'void MeleeInitOptions':
		prefix: 'MeleeInitOptions'
		body: 'MeleeInitOptions()'
	'int MercenaryCreate':
		prefix: 'MercenaryCreate'
		body: 'MercenaryCreate(${1:playergroup inPlayerGroup}, ${2:int inState})'
	'int MercenaryLastCreated':
		prefix: 'MercenaryLastCreated'
		body: 'MercenaryLastCreated()'
	'void MercenaryDestroy':
		prefix: 'MercenaryDestroy'
		body: 'MercenaryDestroy(${1:int inMercenaryId})'
	'void MercenarySetPlayerGroup':
		prefix: 'MercenarySetPlayerGroup'
		body: 'MercenarySetPlayerGroup(${1:int inMercenaryId}, ${2:playergroup inPlayerGroup})'
	'void MercenarySetState':
		prefix: 'MercenarySetState'
		body: 'MercenarySetState(${1:int inMercenaryId}, ${2:int inState})'
	'void MercenarySetCost':
		prefix: 'MercenarySetCost'
		body: 'MercenarySetCost(${1:int inMercenaryId}, ${2:int inCost})'
	'void MercenarySetTitleText':
		prefix: 'MercenarySetTitleText'
		body: 'MercenarySetTitleText(${1:int inMercenaryId}, ${2:text inText})'
	'void MercenarySetDescriptionText':
		prefix: 'MercenarySetDescriptionText'
		body: 'MercenarySetDescriptionText(${1:int inMercenaryId}, ${2:text inText})'
	'void MercenarySetCostText':
		prefix: 'MercenarySetCostText'
		body: 'MercenarySetCostText(${1:int inMercenaryId}, ${2:text inText})'
	'void MercenarySetUnitText':
		prefix: 'MercenarySetUnitText'
		body: 'MercenarySetUnitText(${1:int inMercenaryId}, ${2:text inText})'
	'void MercenarySetAvailabilityText':
		prefix: 'MercenarySetAvailabilityText'
		body: 'MercenarySetAvailabilityText(${1:int inMercenaryId}, ${2:text inText})'
	'void MercenarySetSpecialText':
		prefix: 'MercenarySetSpecialText'
		body: 'MercenarySetSpecialText(${1:int inMercenaryId}, ${2:text inText})'
	'void MercenarySetTooltipText':
		prefix: 'MercenarySetTooltipText'
		body: 'MercenarySetTooltipText(${1:int inMercenaryId}, ${2:text inText})'
	'void MercenarySetModelLink':
		prefix: 'MercenarySetModelLink'
		body: 'MercenarySetModelLink(${1:int inMercenaryId}, ${2:string inModelLink})'
	'void MercenarySetScenePath':
		prefix: 'MercenarySetScenePath'
		body: 'MercenarySetScenePath(${1:int inMercenaryId}, ${2:string inFilePath})'
	'void MercenarySetImageFilePath':
		prefix: 'MercenarySetImageFilePath'
		body: 'MercenarySetImageFilePath(${1:int inMercenaryId}, ${2:string inFilePath})'
	'void MercenarySetRecentlyPurchased':
		prefix: 'MercenarySetRecentlyPurchased'
		body: 'MercenarySetRecentlyPurchased(${1:int inMercenaryId}, ${2:bool inRecent})'
	'void MercenaryPurchase':
		prefix: 'MercenaryPurchase'
		body: 'MercenaryPurchase(${1:int inMercenaryId})'
	'bool MercenaryIsRecentlyPurchased':
		prefix: 'MercenaryIsRecentlyPurchased'
		body: 'MercenaryIsRecentlyPurchased(${1:int inMercenaryId})'
	'void MercenarySetSelected':
		prefix: 'MercenarySetSelected'
		body: 'MercenarySetSelected(${1:playergroup inPlayerGroup}, ${2:int inMercenaryId})'
	'int MercenaryGetSelected':
		prefix: 'MercenaryGetSelected'
		body: 'MercenaryGetSelected(${1:int player})'
	'void MercenaryPanelSetCloseButtonEnabled':
		prefix: 'MercenaryPanelSetCloseButtonEnabled'
		body: 'MercenaryPanelSetCloseButtonEnabled(${1:playergroup players}, ${2:bool inEnabled})'
	'void MercenaryPanelSetDismissButtonEnabled':
		prefix: 'MercenaryPanelSetDismissButtonEnabled'
		body: 'MercenaryPanelSetDismissButtonEnabled(${1:playergroup players}, ${2:bool inEnabled})'
	'void TriggerAddEventMercenaryPanelExit':
		prefix: 'TriggerAddEventMercenaryPanelExit'
		body: 'TriggerAddEventMercenaryPanelExit(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventMercenaryPanelPurchase':
		prefix: 'TriggerAddEventMercenaryPanelPurchase'
		body: 'TriggerAddEventMercenaryPanelPurchase(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventMercenaryPanelSelectionChanged':
		prefix: 'TriggerAddEventMercenaryPanelSelectionChanged'
		body: 'TriggerAddEventMercenaryPanelSelectionChanged(${1:trigger t}, ${2:int player}, ${3:int inMercenaryId})'
	'void MinimapPing':
		prefix: 'MinimapPing'
		body: 'MinimapPing(${1:playergroup players}, ${2:point position}, ${3:fixed duration}, ${4:color c})'
	'void MinimapPingPossibleEnemyStartLocations':
		prefix: 'MinimapPingPossibleEnemyStartLocations'
		body: 'MinimapPingPossibleEnemyStartLocations(${1:fixed duration}, ${2:string inModelLink}, ${3:color c})'
	'void PerfTestStart':
		prefix: 'PerfTestStart'
		body: 'PerfTestStart(${1:text name})'
	'void PerfTestStop':
		prefix: 'PerfTestStop'
		body: 'PerfTestStop()'
	'void PerfTestGetFPS':
		prefix: 'PerfTestGetFPS'
		body: 'PerfTestGetFPS()'
	'void UnitStatsStart':
		prefix: 'UnitStatsStart'
		body: 'UnitStatsStart(${1:text name}, ${2:text unitName}, ${3:text unitFood})'
	'void UnitStatsStop':
		prefix: 'UnitStatsStop'
		body: 'UnitStatsStop()'
	'void EngineReset':
		prefix: 'EngineReset'
		body: 'EngineReset()'
	'void StartProfileRun':
		prefix: 'StartProfileRun'
		body: 'StartProfileRun(${1:text name})'
	'void StopProfileRun':
		prefix: 'StopProfileRun'
		body: 'StopProfileRun()'
	'void WaitForProfilerLoggingToEnd':
		prefix: 'WaitForProfilerLoggingToEnd'
		body: 'WaitForProfilerLoggingToEnd()'
	'void MoviePlayAfterGame':
		prefix: 'MoviePlayAfterGame'
		body: 'MoviePlayAfterGame(${1:playergroup players}, ${2:string assetLink})'
	'void MovieStartRecording':
		prefix: 'MovieStartRecording'
		body: 'MovieStartRecording(${1:string inName})'
	'void MovieStopRecording':
		prefix: 'MovieStopRecording'
		body: 'MovieStopRecording()'
	'void MovieAddSubTitle':
		prefix: 'MovieAddSubTitle'
		body: 'MovieAddSubTitle(${1:string title}, ${2:int duration}, ${3:int timeStamp})'
	'void MovieAddSubTitleText':
		prefix: 'MovieAddSubTitleText'
		body: 'MovieAddSubTitleText(${1:text title}, ${2:int duration}, ${3:int timeStamp})'
	'void MovieAddTriggerFunction':
		prefix: 'MovieAddTriggerFunction'
		body: 'MovieAddTriggerFunction(${1:string function}, ${2:int timeStamp})'
	'void TriggerAddEventMovieStarted':
		prefix: 'TriggerAddEventMovieStarted'
		body: 'TriggerAddEventMovieStarted(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventMovieFinished':
		prefix: 'TriggerAddEventMovieFinished'
		body: 'TriggerAddEventMovieFinished(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventMovieFunction':
		prefix: 'TriggerAddEventMovieFunction'
		body: 'TriggerAddEventMovieFunction(${1:trigger t}, ${2:int player}, ${3:string functionName})'
	'int ObjectiveCreate':
		prefix: 'ObjectiveCreate'
		body: 'ObjectiveCreate(${1:text inName}, ${2:text inDescription}, ${3:int inState}, ${4:bool inPrimary})'
	'int ObjectiveCreateForPlayers':
		prefix: 'ObjectiveCreateForPlayers'
		body: 'ObjectiveCreateForPlayers(${1:text inName}, ${2:text inDescription}, ${3:int inState}, ${4:bool inPrimary}, ${5:playergroup inPlayers})'
	'int ObjectiveLastCreated':
		prefix: 'ObjectiveLastCreated'
		body: 'ObjectiveLastCreated()'
	'void ObjectiveDestroy':
		prefix: 'ObjectiveDestroy'
		body: 'ObjectiveDestroy(${1:int inObjective})'
	'void ObjectiveDestroyAll':
		prefix: 'ObjectiveDestroyAll'
		body: 'ObjectiveDestroyAll(${1:playergroup inPlayers})'
	'void ObjectiveShow':
		prefix: 'ObjectiveShow'
		body: 'ObjectiveShow(${1:int inObjective}, ${2:playergroup inPlayers}, ${3:bool inShow})'
	'bool ObjectiveVisible':
		prefix: 'ObjectiveVisible'
		body: 'ObjectiveVisible(${1:int inObjective}, ${2:int inPlayer})'
	'void ObjectiveSetName':
		prefix: 'ObjectiveSetName'
		body: 'ObjectiveSetName(${1:int inObjective}, ${2:text inName})'
	'text ObjectiveGetName':
		prefix: 'ObjectiveGetName'
		body: 'ObjectiveGetName(${1:int inObjective})'
	'void ObjectiveSetDescription':
		prefix: 'ObjectiveSetDescription'
		body: 'ObjectiveSetDescription(${1:int inObjective}, ${2:text inText})'
	'text ObjectiveGetDescription':
		prefix: 'ObjectiveGetDescription'
		body: 'ObjectiveGetDescription(${1:int inObjective})'
	'void ObjectiveSetState':
		prefix: 'ObjectiveSetState'
		body: 'ObjectiveSetState(${1:int inObjective}, ${2:int inState})'
	'int ObjectiveGetState':
		prefix: 'ObjectiveGetState'
		body: 'ObjectiveGetState(${1:int inObjective})'
	'void ObjectiveSetPlayerGroup':
		prefix: 'ObjectiveSetPlayerGroup'
		body: 'ObjectiveSetPlayerGroup(${1:int inObjective}, ${2:playergroup inPlayers})'
	'playergroup ObjectiveGetPlayerGroup':
		prefix: 'ObjectiveGetPlayerGroup'
		body: 'ObjectiveGetPlayerGroup(${1:int inObjective})'
	'void ObjectiveSetPrimary':
		prefix: 'ObjectiveSetPrimary'
		body: 'ObjectiveSetPrimary(${1:int inObjective}, ${2:bool inPrimary})'
	'bool ObjectiveGetPrimary':
		prefix: 'ObjectiveGetPrimary'
		body: 'ObjectiveGetPrimary(${1:int inObjective})'
	'void ObjectiveSetPriority':
		prefix: 'ObjectiveSetPriority'
		body: 'ObjectiveSetPriority(${1:int inObjective}, ${2:int inPriority})'
	'int ObjectiveGetPriority':
		prefix: 'ObjectiveGetPriority'
		body: 'ObjectiveGetPriority(${1:int inObjective})'
	'void ObjectiveSetFirst':
		prefix: 'ObjectiveSetFirst'
		body: 'ObjectiveSetFirst(${1:int inObjective})'
	'void ObjectiveSetLast':
		prefix: 'ObjectiveSetLast'
		body: 'ObjectiveSetLast(${1:int inObjective})'
	'void ObjectiveSetAfter':
		prefix: 'ObjectiveSetAfter'
		body: 'ObjectiveSetAfter(${1:int inObjective}, ${2:int inAfterObjective})'
	'void ObjectiveSetBefore':
		prefix: 'ObjectiveSetBefore'
		body: 'ObjectiveSetBefore(${1:int inObjective}, ${2:int inBeforeObjective})'
	'abilcmd AbilityCommand':
		prefix: 'AbilityCommand'
		body: 'AbilityCommand(${1:string inAbil}, ${2:int inCmdIndex})'
	'string AbilityCommandGetAbility':
		prefix: 'AbilityCommandGetAbility'
		body: 'AbilityCommandGetAbility(${1:abilcmd inAbilCmd})'
	'int AbilityCommandGetCommand':
		prefix: 'AbilityCommandGetCommand'
		body: 'AbilityCommandGetCommand(${1:abilcmd inAbilCmd})'
	'int AbilityCommandGetAction':
		prefix: 'AbilityCommandGetAction'
		body: 'AbilityCommandGetAction(${1:abilcmd inAbilCmd})'
	'order Order':
		prefix: 'Order'
		body: 'Order(${1:abilcmd inAbilCmd})'
	'order OrderTargetingPoint':
		prefix: 'OrderTargetingPoint'
		body: 'OrderTargetingPoint(${1:abilcmd inAbilCmd}, ${2:point inPoint})'
	'order OrderTargetingRelativePoint':
		prefix: 'OrderTargetingRelativePoint'
		body: 'OrderTargetingRelativePoint(${1:abilcmd inAbilCmd}, ${2:point inPoint})'
	'order OrderTargetingUnit':
		prefix: 'OrderTargetingUnit'
		body: 'OrderTargetingUnit(${1:abilcmd inAbilCmd}, ${2:unit inUnit})'
	'order OrderTargetingUnitGroup':
		prefix: 'OrderTargetingUnitGroup'
		body: 'OrderTargetingUnitGroup(${1:abilcmd inAbilCmd}, ${2:unitgroup inUnitGroup})'
	'order OrderTargetingItem':
		prefix: 'OrderTargetingItem'
		body: 'OrderTargetingItem(${1:abilcmd inAbilCmd}, ${2:unit inItem})'
	'order OrderSetAutoCast':
		prefix: 'OrderSetAutoCast'
		body: 'OrderSetAutoCast(${1:abilcmd inAbilCmd}, ${2:bool inAutoCastOn})'
	'void OrderSetAbilityCommand':
		prefix: 'OrderSetAbilityCommand'
		body: 'OrderSetAbilityCommand(${1:order inOrder}, ${2:abilcmd inAbilCmd})'
	'abilcmd OrderGetAbilityCommand':
		prefix: 'OrderGetAbilityCommand'
		body: 'OrderGetAbilityCommand(${1:order inOrder})'
	'void OrderSetPlayer':
		prefix: 'OrderSetPlayer'
		body: 'OrderSetPlayer(${1:order inOrder}, ${2:int inPlayer})'
	'int OrderGetPlayer':
		prefix: 'OrderGetPlayer'
		body: 'OrderGetPlayer(${1:order inOrder})'
	'int OrderGetTargetType':
		prefix: 'OrderGetTargetType'
		body: 'OrderGetTargetType(${1:order inOrder})'
	'bool OrderSetTargetPlacement':
		prefix: 'OrderSetTargetPlacement'
		body: 'OrderSetTargetPlacement(${1:order inOrder}, ${2:point inPoint}, ${3:unit inPlacer}, ${4:string inType})'
	'void OrderSetTargetPoint':
		prefix: 'OrderSetTargetPoint'
		body: 'OrderSetTargetPoint(${1:order inOrder}, ${2:point inPoint})'
	'point OrderGetTargetPoint':
		prefix: 'OrderGetTargetPoint'
		body: 'OrderGetTargetPoint(${1:order inOrder})'
	'point OrderGetTargetPosition':
		prefix: 'OrderGetTargetPosition'
		body: 'OrderGetTargetPosition(${1:order inOrder})'
	'void OrderSetTargetUnit':
		prefix: 'OrderSetTargetUnit'
		body: 'OrderSetTargetUnit(${1:order inOrder}, ${2:unit inUnit})'
	'unit OrderGetTargetUnit':
		prefix: 'OrderGetTargetUnit'
		body: 'OrderGetTargetUnit(${1:order inOrder})'
	'void OrderSetTargetPassenger':
		prefix: 'OrderSetTargetPassenger'
		body: 'OrderSetTargetPassenger(${1:order inOrder}, ${2:unit inUnit})'
	'void OrderSetTargetItem':
		prefix: 'OrderSetTargetItem'
		body: 'OrderSetTargetItem(${1:order inOrder}, ${2:unit inItem})'
	'unit OrderGetTargetItem':
		prefix: 'OrderGetTargetItem'
		body: 'OrderGetTargetItem(${1:order inOrder})'
	'void OrderSetFlag':
		prefix: 'OrderSetFlag'
		body: 'OrderSetFlag(${1:order inOrder}, ${2:int inFlag}, ${3:bool inValue})'
	'bool OrderGetFlag':
		prefix: 'OrderGetFlag'
		body: 'OrderGetFlag(${1:order inOrder}, ${2:int inFlag})'
	'int PathCreateForUnit':
		prefix: 'PathCreateForUnit'
		body: 'PathCreateForUnit(${1:playergroup inPlayerGroup}, ${2:unit inUnit})'
	'int PathCreateForUnitType':
		prefix: 'PathCreateForUnitType'
		body: 'PathCreateForUnitType(${1:playergroup inPlayerGroup}, ${2:string inType}, ${3:int inPlayer}, ${4:point inSource})'
	'int PathLastCreated':
		prefix: 'PathLastCreated'
		body: 'PathLastCreated()'
	'void PathDestroy':
		prefix: 'PathDestroy'
		body: 'PathDestroy(${1:int inPathId})'
	'void PathDestroyAll':
		prefix: 'PathDestroyAll'
		body: 'PathDestroyAll(${1:playergroup inPlayerGroup})'
	'void PathSetDestinationPoint':
		prefix: 'PathSetDestinationPoint'
		body: 'PathSetDestinationPoint(${1:int inPathId}, ${2:point inDestination})'
	'point PathGetDestinationPoint':
		prefix: 'PathGetDestinationPoint'
		body: 'PathGetDestinationPoint(${1:int inPathId})'
	'void PathSetDestinationUnit':
		prefix: 'PathSetDestinationUnit'
		body: 'PathSetDestinationUnit(${1:int inPathId}, ${2:unit inUnit})'
	'unit PathGetDestinationUnit':
		prefix: 'PathGetDestinationUnit'
		body: 'PathGetDestinationUnit(${1:int inPathId})'
	'void PathSetSourcePoint':
		prefix: 'PathSetSourcePoint'
		body: 'PathSetSourcePoint(${1:int inPathId}, ${2:point inSource})'
	'point PathGetSourcePoint':
		prefix: 'PathGetSourcePoint'
		body: 'PathGetSourcePoint(${1:int inPathId})'
	'void PathSetSourceUnit':
		prefix: 'PathSetSourceUnit'
		body: 'PathSetSourceUnit(${1:int inPathId}, ${2:unit inUnit})'
	'unit PathGetSourceUnit':
		prefix: 'PathGetSourceUnit'
		body: 'PathGetSourceUnit(${1:int inPathId})'
	'void PathSetLineTexture':
		prefix: 'PathSetLineTexture'
		body: 'PathSetLineTexture(${1:int inPathId}, ${2:int inLocation}, ${3:string inTexture})'
	'string PathGetLineTexture':
		prefix: 'PathGetLineTexture'
		body: 'PathGetLineTexture(${1:int inPathId}, ${2:int inLocation})'
	'void PathSetLineTileLength':
		prefix: 'PathSetLineTileLength'
		body: 'PathSetLineTileLength(${1:int inPathId}, ${2:int inLocation}, ${3:fixed inLength})'
	'fixed PathGetLineTileLength':
		prefix: 'PathGetLineTileLength'
		body: 'PathGetLineTileLength(${1:int inPathId}, ${2:int inLocation})'
	'void PathSetLineWidth':
		prefix: 'PathSetLineWidth'
		body: 'PathSetLineWidth(${1:int inPathId}, ${2:int inLocation}, ${3:fixed inWidth})'
	'fixed PathGetLineWidth':
		prefix: 'PathGetLineWidth'
		body: 'PathGetLineWidth(${1:int inPathId}, ${2:int inLocation})'
	'void PathSetStepModel':
		prefix: 'PathSetStepModel'
		body: 'PathSetStepModel(${1:int inPathId}, ${2:int inLocation}, ${3:string inModel})'
	'string PathGetStepModel':
		prefix: 'PathGetStepModel'
		body: 'PathGetStepModel(${1:int inPathId}, ${2:int inLocation})'
	'void PathSetStepModelScale':
		prefix: 'PathSetStepModelScale'
		body: 'PathSetStepModelScale(${1:int inPathId}, ${2:int inLocation}, ${3:fixed inScale})'
	'fixed PathGetStepModelScale':
		prefix: 'PathGetStepModelScale'
		body: 'PathGetStepModelScale(${1:int inPathId}, ${2:int inLocation})'
	'void PathSetStepMidpoint':
		prefix: 'PathSetStepMidpoint'
		body: 'PathSetStepMidpoint(${1:int inPathId}, ${2:int inLocation}, ${3:fixed inMidpoint})'
	'fixed PathGetStepMidpoint':
		prefix: 'PathGetStepMidpoint'
		body: 'PathGetStepMidpoint(${1:int inPathId}, ${2:int inLocation})'
	'void PathSetColor':
		prefix: 'PathSetColor'
		body: 'PathSetColor(${1:int inPathId}, ${2:int inLocation}, ${3:color inColor})'
	'color PathGetColor':
		prefix: 'PathGetColor'
		body: 'PathGetColor(${1:int inPathId}, ${2:int inLocation})'
	'void PathSetVisible':
		prefix: 'PathSetVisible'
		body: 'PathSetVisible(${1:int inPathId}, ${2:int inLocation}, ${3:bool inVisible})'
	'bool PathGetVisible':
		prefix: 'PathGetVisible'
		body: 'PathGetVisible(${1:int inPathId}, ${2:int inLocation})'
	'unit PathGetUnit':
		prefix: 'PathGetUnit'
		body: 'PathGetUnit(${1:int inPathId})'
	'string PathGetUnitType':
		prefix: 'PathGetUnitType'
		body: 'PathGetUnitType(${1:int inPathId})'
	'void PathSetAbilClassFilter':
		prefix: 'PathSetAbilClassFilter'
		body: 'PathSetAbilClassFilter(${1:int inPathId}, ${2:int inAbilClass}, ${3:int inFilter})'
	'void PathClearWayPoints':
		prefix: 'PathClearWayPoints'
		body: 'PathClearWayPoints(${1:int inPathId})'
	'void PathAddWayPoint':
		prefix: 'PathAddWayPoint'
		body: 'PathAddWayPoint(${1:int inPathId}, ${2:point inWayPoint})'
	'void PathSetMinimumLinearDistance':
		prefix: 'PathSetMinimumLinearDistance'
		body: 'PathSetMinimumLinearDistance(${1:int inPathId}, ${2:fixed inDistance})'
	'fixed PathGetMinimumLinearDistance':
		prefix: 'PathGetMinimumLinearDistance'
		body: 'PathGetMinimumLinearDistance(${1:int inPathId})'
	'void PathSetMinimumTravelDistance':
		prefix: 'PathSetMinimumTravelDistance'
		body: 'PathSetMinimumTravelDistance(${1:int inPathId}, ${2:fixed inDistance})'
	'fixed PathGetMinimumTravelDistance':
		prefix: 'PathGetMinimumTravelDistance'
		body: 'PathGetMinimumTravelDistance(${1:int inPathId})'
	'void PathSetMinimumStepCount':
		prefix: 'PathSetMinimumStepCount'
		body: 'PathSetMinimumStepCount(${1:int inPathId}, ${2:int inStepCount})'
	'int PathGetMinimumStepCount':
		prefix: 'PathGetMinimumStepCount'
		body: 'PathGetMinimumStepCount(${1:int inPathId})'
	'void PathAddNoFlyZone':
		prefix: 'PathAddNoFlyZone'
		body: 'PathAddNoFlyZone(${1:point center}, ${2:fixed innerRadius}, ${3:fixed outerRadius})'
	'void PathRemoveNoFlyZonesInRegion':
		prefix: 'PathRemoveNoFlyZonesInRegion'
		body: 'PathRemoveNoFlyZonesInRegion(${1:region area})'
	'int PingCreate':
		prefix: 'PingCreate'
		body: 'PingCreate(${1:playergroup players}, ${2:string modelLink}, ${3:point position}, ${4:color intColor}, ${5:fixed duration})'
	'int PingCreateWithPlayerId':
		prefix: 'PingCreateWithPlayerId'
		body: 'PingCreateWithPlayerId(${1:playergroup players}, ${2:string modelLink}, ${3:point position}, ${4:color intColor}, ${5:fixed duration}, ${6:int player})'
	'int PingCreateFromData':
		prefix: 'PingCreateFromData'
		body: 'PingCreateFromData(${1:playergroup players}, ${2:string pingLink}, ${3:point position})'
	'int PingLastCreated':
		prefix: 'PingLastCreated'
		body: 'PingLastCreated()'
	'void PingDestroy':
		prefix: 'PingDestroy'
		body: 'PingDestroy(${1:int p})'
	'void PingDestroyAll':
		prefix: 'PingDestroyAll'
		body: 'PingDestroyAll()'
	'void PingSetPlayerPingsShown':
		prefix: 'PingSetPlayerPingsShown'
		body: 'PingSetPlayerPingsShown(${1:playergroup inPlayers}, ${2:bool inShown})'
	'void PingSetPlayerGroup':
		prefix: 'PingSetPlayerGroup'
		body: 'PingSetPlayerGroup(${1:int p}, ${2:playergroup playerMask})'
	'playergroup PingGetPlayerGroup':
		prefix: 'PingGetPlayerGroup'
		body: 'PingGetPlayerGroup(${1:int p})'
	'void PingSetModel':
		prefix: 'PingSetModel'
		body: 'PingSetModel(${1:int p}, ${2:string modelLink})'
	'void PingSetPosition':
		prefix: 'PingSetPosition'
		body: 'PingSetPosition(${1:int p}, ${2:point position})'
	'point PingGetPosition':
		prefix: 'PingGetPosition'
		body: 'PingGetPosition(${1:int p})'
	'void PingSetDepth':
		prefix: 'PingSetDepth'
		body: 'PingSetDepth(${1:int p}, ${2:fixed depth})'
	'fixed PingGetDepth':
		prefix: 'PingGetDepth'
		body: 'PingGetDepth(${1:int p})'
	'void PingSetScale':
		prefix: 'PingSetScale'
		body: 'PingSetScale(${1:int p}, ${2:fixed scale})'
	'fixed PingGetScale':
		prefix: 'PingGetScale'
		body: 'PingGetScale(${1:int p})'
	'void PingSetRotation':
		prefix: 'PingSetRotation'
		body: 'PingSetRotation(${1:int p}, ${2:fixed rotation})'
	'fixed PingGetRotation':
		prefix: 'PingGetRotation'
		body: 'PingGetRotation(${1:int p})'
	'void PingSetColor':
		prefix: 'PingSetColor'
		body: 'PingSetColor(${1:int p}, ${2:color intColor})'
	'color PingGetColor':
		prefix: 'PingGetColor'
		body: 'PingGetColor(${1:int p})'
	'void PingSetDuration':
		prefix: 'PingSetDuration'
		body: 'PingSetDuration(${1:int p}, ${2:fixed duration})'
	'fixed PingGetDuration':
		prefix: 'PingGetDuration'
		body: 'PingGetDuration(${1:int p})'
	'void PingSetUnit':
		prefix: 'PingSetUnit'
		body: 'PingSetUnit(${1:int p}, ${2:unit u})'
	'unit PingGetUnit':
		prefix: 'PingGetUnit'
		body: 'PingGetUnit(${1:int p})'
	'void PingSetTooltip':
		prefix: 'PingSetTooltip'
		body: 'PingSetTooltip(${1:int p}, ${2:text tooltip})'
	'text PingGetTooltip':
		prefix: 'PingGetTooltip'
		body: 'PingGetTooltip(${1:int p})'
	'void PingSetVisible':
		prefix: 'PingSetVisible'
		body: 'PingSetVisible(${1:int p}, ${2:bool isVisible})'
	'bool PingIsVisible':
		prefix: 'PingIsVisible'
		body: 'PingIsVisible(${1:int p})'
	'void PingSetUseUnitTeamColor':
		prefix: 'PingSetUseUnitTeamColor'
		body: 'PingSetUseUnitTeamColor(${1:int p}, ${2:bool useUnitTeamColor})'
	'void PingSetUseUnitVisibility':
		prefix: 'PingSetUseUnitVisibility'
		body: 'PingSetUseUnitVisibility(${1:int p}, ${2:bool useUnitVisibility})'
	'void PingSetObserver':
		prefix: 'PingSetObserver'
		body: 'PingSetObserver(${1:int p}, ${2:bool isObserver})'
	'void TriggerAddEventPing':
		prefix: 'TriggerAddEventPing'
		body: 'TriggerAddEventPing(${1:trigger t}, ${2:int player})'
	'unit EventPingUnit':
		prefix: 'EventPingUnit'
		body: 'EventPingUnit()'
	'string EventPingUnitType':
		prefix: 'EventPingUnitType'
		body: 'EventPingUnitType()'
	'int EventPingUnitControlPlayer':
		prefix: 'EventPingUnitControlPlayer'
		body: 'EventPingUnitControlPlayer()'
	'int EventPingUnitUpkeepPlayer':
		prefix: 'EventPingUnitUpkeepPlayer'
		body: 'EventPingUnitUpkeepPlayer()'
	'point EventPingUnitPosition':
		prefix: 'EventPingUnitPosition'
		body: 'EventPingUnitPosition()'
	'bool EventPingUnitIsUnderConstruction':
		prefix: 'EventPingUnitIsUnderConstruction'
		body: 'EventPingUnitIsUnderConstruction()'
	'point EventPingPoint':
		prefix: 'EventPingPoint'
		body: 'EventPingPoint()'
	'bool EventPingedMinimap':
		prefix: 'EventPingedMinimap'
		body: 'EventPingedMinimap()'
	'int EventPingOption':
		prefix: 'EventPingOption'
		body: 'EventPingOption()'
	'int PlanetCreate':
		prefix: 'PlanetCreate'
		body: 'PlanetCreate(${1:playergroup inPlayerGroup}, ${2:int inState})'
	'int PlanetLastCreated':
		prefix: 'PlanetLastCreated'
		body: 'PlanetLastCreated()'
	'void PlanetDestroy':
		prefix: 'PlanetDestroy'
		body: 'PlanetDestroy(${1:int inPlanetId})'
	'void PlanetDestroyAll':
		prefix: 'PlanetDestroyAll'
		body: 'PlanetDestroyAll(${1:playergroup inPlayerGroup})'
	'void PlanetSetSelected':
		prefix: 'PlanetSetSelected'
		body: 'PlanetSetSelected(${1:playergroup inPlayerGroup}, ${2:int inPlanetId})'
	'int PlanetGetSelected':
		prefix: 'PlanetGetSelected'
		body: 'PlanetGetSelected(${1:int player})'
	'void PlanetClearSelected':
		prefix: 'PlanetClearSelected'
		body: 'PlanetClearSelected(${1:playergroup inPlayerGroup})'
	'void PlanetSetPlayerGroup':
		prefix: 'PlanetSetPlayerGroup'
		body: 'PlanetSetPlayerGroup(${1:int inPlanetId}, ${2:playergroup inPlayerGroup})'
	'void PlanetSetState':
		prefix: 'PlanetSetState'
		body: 'PlanetSetState(${1:int inPlanetId}, ${2:int inState})'
	'void PlanetSetPlanetName':
		prefix: 'PlanetSetPlanetName'
		body: 'PlanetSetPlanetName(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetDescriptionText':
		prefix: 'PlanetSetDescriptionText'
		body: 'PlanetSetDescriptionText(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetTooltipText':
		prefix: 'PlanetSetTooltipText'
		body: 'PlanetSetTooltipText(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetContactTooltipText':
		prefix: 'PlanetSetContactTooltipText'
		body: 'PlanetSetContactTooltipText(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetTechnologyTooltipText':
		prefix: 'PlanetSetTechnologyTooltipText'
		body: 'PlanetSetTechnologyTooltipText(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetMissionTitle':
		prefix: 'PlanetSetMissionTitle'
		body: 'PlanetSetMissionTitle(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetMissionName':
		prefix: 'PlanetSetMissionName'
		body: 'PlanetSetMissionName(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetPrimaryObjectiveTitle':
		prefix: 'PlanetSetPrimaryObjectiveTitle'
		body: 'PlanetSetPrimaryObjectiveTitle(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetPrimaryObjectiveText':
		prefix: 'PlanetSetPrimaryObjectiveText'
		body: 'PlanetSetPrimaryObjectiveText(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetSecondaryObjectiveTitle':
		prefix: 'PlanetSetSecondaryObjectiveTitle'
		body: 'PlanetSetSecondaryObjectiveTitle(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetSecondaryObjectiveText':
		prefix: 'PlanetSetSecondaryObjectiveText'
		body: 'PlanetSetSecondaryObjectiveText(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetRewardTitle':
		prefix: 'PlanetSetRewardTitle'
		body: 'PlanetSetRewardTitle(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetRewardText':
		prefix: 'PlanetSetRewardText'
		body: 'PlanetSetRewardText(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetResearchTitle':
		prefix: 'PlanetSetResearchTitle'
		body: 'PlanetSetResearchTitle(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetResearchText':
		prefix: 'PlanetSetResearchText'
		body: 'PlanetSetResearchText(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetBonusTitle':
		prefix: 'PlanetSetBonusTitle'
		body: 'PlanetSetBonusTitle(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetBonusText':
		prefix: 'PlanetSetBonusText'
		body: 'PlanetSetBonusText(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetPlanetText':
		prefix: 'PlanetSetPlanetText'
		body: 'PlanetSetPlanetText(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetTechnologyTitle':
		prefix: 'PlanetSetTechnologyTitle'
		body: 'PlanetSetTechnologyTitle(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetTechnologyName':
		prefix: 'PlanetSetTechnologyName'
		body: 'PlanetSetTechnologyName(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetTechnologyText':
		prefix: 'PlanetSetTechnologyText'
		body: 'PlanetSetTechnologyText(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetContactTitle':
		prefix: 'PlanetSetContactTitle'
		body: 'PlanetSetContactTitle(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetContactName':
		prefix: 'PlanetSetContactName'
		body: 'PlanetSetContactName(${1:int inPlanetId}, ${2:text inText})'
	'void PlanetSetContactModelLink':
		prefix: 'PlanetSetContactModelLink'
		body: 'PlanetSetContactModelLink(${1:int inPlanetId}, ${2:string inContactModelLink})'
	'void PlanetSetContactActorLink':
		prefix: 'PlanetSetContactActorLink'
		body: 'PlanetSetContactActorLink(${1:int inPlanetId}, ${2:string inContactActorLink})'
	'void PlanetSetBackgroundModelLink':
		prefix: 'PlanetSetBackgroundModelLink'
		body: 'PlanetSetBackgroundModelLink(${1:int inPlanetId}, ${2:string inBackgroundModelLink})'
	'void PlanetSetPlanetModelLink':
		prefix: 'PlanetSetPlanetModelLink'
		body: 'PlanetSetPlanetModelLink(${1:int inPlanetId}, ${2:string inPlanetModelLink})'
	'void PlanetSetTechnologyIconFilePath':
		prefix: 'PlanetSetTechnologyIconFilePath'
		body: 'PlanetSetTechnologyIconFilePath(${1:int inPlanetId}, ${2:string inTechnologyIconFilePath})'
	'void PlanetSetTechnologyUnitLink':
		prefix: 'PlanetSetTechnologyUnitLink'
		body: 'PlanetSetTechnologyUnitLink(${1:int inPlanetId}, ${2:string inUnitLink})'
	'void PlanetPanelSetContactButtonState':
		prefix: 'PlanetPanelSetContactButtonState'
		body: 'PlanetPanelSetContactButtonState(${1:playergroup players}, ${2:int inState})'
	'int PlanetPanelGetContactButtonState':
		prefix: 'PlanetPanelGetContactButtonState'
		body: 'PlanetPanelGetContactButtonState(${1:int player})'
	'void PlanetPanelSetBackButtonEnabled':
		prefix: 'PlanetPanelSetBackButtonEnabled'
		body: 'PlanetPanelSetBackButtonEnabled(${1:playergroup players}, ${2:bool inEnabled})'
	'void PlanetPanelSetDismissButtonEnabled':
		prefix: 'PlanetPanelSetDismissButtonEnabled'
		body: 'PlanetPanelSetDismissButtonEnabled(${1:playergroup players}, ${2:bool inEnabled})'
	'void PlanetPanelSetBackButtonText':
		prefix: 'PlanetPanelSetBackButtonText'
		body: 'PlanetPanelSetBackButtonText(${1:playergroup players}, ${2:text inText})'
	'void PlanetPanelSetBackButtonShortcut':
		prefix: 'PlanetPanelSetBackButtonShortcut'
		body: 'PlanetPanelSetBackButtonShortcut(${1:playergroup players}, ${2:text inText})'
	'void PlanetPanelSetBackButtonTooltip':
		prefix: 'PlanetPanelSetBackButtonTooltip'
		body: 'PlanetPanelSetBackButtonTooltip(${1:playergroup players}, ${2:text inText})'
	'void PlanetPanelSetBackgroundImage':
		prefix: 'PlanetPanelSetBackgroundImage'
		body: 'PlanetPanelSetBackgroundImage(${1:playergroup players}, ${2:string inFilePath})'
	'void TriggerAddEventPlanetMissionLaunched':
		prefix: 'TriggerAddEventPlanetMissionLaunched'
		body: 'TriggerAddEventPlanetMissionLaunched(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventPlanetMissionSelected':
		prefix: 'TriggerAddEventPlanetMissionSelected'
		body: 'TriggerAddEventPlanetMissionSelected(${1:trigger t}, ${2:int player}, ${3:int planetId})'
	'void TriggerAddEventPlanetPanelCanceled':
		prefix: 'TriggerAddEventPlanetPanelCanceled'
		body: 'TriggerAddEventPlanetPanelCanceled(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventPlanetPanelReplayPressed':
		prefix: 'TriggerAddEventPlanetPanelReplayPressed'
		body: 'TriggerAddEventPlanetPanelReplayPressed(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventPlanetPanelBirthComplete':
		prefix: 'TriggerAddEventPlanetPanelBirthComplete'
		body: 'TriggerAddEventPlanetPanelBirthComplete(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventPlanetPanelDeathComplete':
		prefix: 'TriggerAddEventPlanetPanelDeathComplete'
		body: 'TriggerAddEventPlanetPanelDeathComplete(${1:trigger t}, ${2:int player})'
	'int EventPlanetPanelMissionSelected':
		prefix: 'EventPlanetPanelMissionSelected'
		body: 'EventPlanetPanelMissionSelected()'
	'int EventPlanetPanelDifficultySelected':
		prefix: 'EventPlanetPanelDifficultySelected'
		body: 'EventPlanetPanelDifficultySelected()'
	'string TalentTreeGetHeroTalentLink':
		prefix: 'TalentTreeGetHeroTalentLink'
		body: 'TalentTreeGetHeroTalentLink(${1:int inPlayer}, ${2:int inIndex})'
	'bool TalentTreeCanSelectHeroTalentTree':
		prefix: 'TalentTreeCanSelectHeroTalentTree'
		body: 'TalentTreeCanSelectHeroTalentTree(${1:int inPlayer}, ${2:int inTalentTreeIndex})'
	'void TalentTreeSetSelectedHeroTalentTree':
		prefix: 'TalentTreeSetSelectedHeroTalentTree'
		body: 'TalentTreeSetSelectedHeroTalentTree(${1:int inPlayer}, ${2:int inTalentTreeIndex})'
	'int TalentTreeGetSelectedHeroTalentTree':
		prefix: 'TalentTreeGetSelectedHeroTalentTree'
		body: 'TalentTreeGetSelectedHeroTalentTree(${1:int inPlayer}, ${2:int inTier})'
	'int TalentTreeGetSelectedHeroTalentTreeColumn':
		prefix: 'TalentTreeGetSelectedHeroTalentTreeColumn'
		body: 'TalentTreeGetSelectedHeroTalentTreeColumn(${1:int inPlayer}, ${2:int inTier})'
	'void TalentTreeClearTier':
		prefix: 'TalentTreeClearTier'
		body: 'TalentTreeClearTier(${1:int inPlayer}, ${2:int inTier})'
	'bool TalentTreeAllowed':
		prefix: 'TalentTreeAllowed'
		body: 'TalentTreeAllowed(${1:int inPlayer}, ${2:int inTalentTreeIndex})'
	'void SetTalentTierEnabled':
		prefix: 'SetTalentTierEnabled'
		body: 'SetTalentTierEnabled(${1:int inTier}, ${2:bool inEnabled})'
	'void SetTalentUpgradeRequired':
		prefix: 'SetTalentUpgradeRequired'
		body: 'SetTalentUpgradeRequired(${1:bool inRequired})'
	'void SetTalentTreeHeroLevel':
		prefix: 'SetTalentTreeHeroLevel'
		body: 'SetTalentTreeHeroLevel(${1:int inPlayer}, ${2:int inLevel})'
	'void SetTalentsEnabled':
		prefix: 'SetTalentsEnabled'
		body: 'SetTalentsEnabled(${1:bool inRequired})'
	'void SetTalentTreeSelectionPanelDismissAllowed':
		prefix: 'SetTalentTreeSelectionPanelDismissAllowed'
		body: 'SetTalentTreeSelectionPanelDismissAllowed(${1:bool inAllowed})'
	'void SetTalentTreeSelectionPanelAutoShow':
		prefix: 'SetTalentTreeSelectionPanelAutoShow'
		body: 'SetTalentTreeSelectionPanelAutoShow(${1:bool inAutoShow})'
	'void SetTalentTreePauseGameWhenSelectionPanelShown':
		prefix: 'SetTalentTreePauseGameWhenSelectionPanelShown'
		body: 'SetTalentTreePauseGameWhenSelectionPanelShown(${1:bool inPauseGame})'
	'void TriggerAddEventHeroTalentTreeSelected':
		prefix: 'TriggerAddEventHeroTalentTreeSelected'
		body: 'TriggerAddEventHeroTalentTreeSelected(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventHeroTalentTreeSelectionPanelShown':
		prefix: 'TriggerAddEventHeroTalentTreeSelectionPanelShown'
		body: 'TriggerAddEventHeroTalentTreeSelectionPanelShown(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventHeroTalentTreeSelectionPanelHidden':
		prefix: 'TriggerAddEventHeroTalentTreeSelectionPanelHidden'
		body: 'TriggerAddEventHeroTalentTreeSelectionPanelHidden(${1:trigger t}, ${2:int player})'
	'void VictoryPanelSetVictoryText':
		prefix: 'VictoryPanelSetVictoryText'
		body: 'VictoryPanelSetVictoryText(${1:text inText})'
	'void VictoryPanelSetMissionTitle':
		prefix: 'VictoryPanelSetMissionTitle'
		body: 'VictoryPanelSetMissionTitle(${1:text inText})'
	'void VictoryPanelSetMissionText':
		prefix: 'VictoryPanelSetMissionText'
		body: 'VictoryPanelSetMissionText(${1:text inText})'
	'void VictoryPanelSetMissionTimeTitle':
		prefix: 'VictoryPanelSetMissionTimeTitle'
		body: 'VictoryPanelSetMissionTimeTitle(${1:text inText})'
	'void VictoryPanelSetMissionTimeText':
		prefix: 'VictoryPanelSetMissionTimeText'
		body: 'VictoryPanelSetMissionTimeText(${1:text inText})'
	'void VictoryPanelSetRewardTitle':
		prefix: 'VictoryPanelSetRewardTitle'
		body: 'VictoryPanelSetRewardTitle(${1:text inText})'
	'void VictoryPanelSetRewardText':
		prefix: 'VictoryPanelSetRewardText'
		body: 'VictoryPanelSetRewardText(${1:text inText})'
	'void VictoryPanelSetRewardCredits':
		prefix: 'VictoryPanelSetRewardCredits'
		body: 'VictoryPanelSetRewardCredits(${1:int inCredits})'
	'void VictoryPanelSetAchievementsTitle':
		prefix: 'VictoryPanelSetAchievementsTitle'
		body: 'VictoryPanelSetAchievementsTitle(${1:text inText})'
	'void VictoryPanelSetStatisticsTitle':
		prefix: 'VictoryPanelSetStatisticsTitle'
		body: 'VictoryPanelSetStatisticsTitle(${1:text inText})'
	'void VictoryPanelSetCustomStatisticText':
		prefix: 'VictoryPanelSetCustomStatisticText'
		body: 'VictoryPanelSetCustomStatisticText(${1:text inText})'
	'void VictoryPanelSetCustomStatisticValue':
		prefix: 'VictoryPanelSetCustomStatisticValue'
		body: 'VictoryPanelSetCustomStatisticValue(${1:text inText})'
	'void VictoryPanelSetPlanetModelLink':
		prefix: 'VictoryPanelSetPlanetModelLink'
		body: 'VictoryPanelSetPlanetModelLink(${1:string inModelLink})'
	'void VictoryPanelSetBackgroundFilePath':
		prefix: 'VictoryPanelSetBackgroundFilePath'
		body: 'VictoryPanelSetBackgroundFilePath(${1:string inFilePath})'
	'void VictoryPanelSetSummaryBackgroundFilePath':
		prefix: 'VictoryPanelSetSummaryBackgroundFilePath'
		body: 'VictoryPanelSetSummaryBackgroundFilePath(${1:string inFilePath})'
	'void VictoryPanelAddCustomStatisticLine':
		prefix: 'VictoryPanelAddCustomStatisticLine'
		body: 'VictoryPanelAddCustomStatisticLine(${1:text inText}, ${2:text inValueText})'
	'void VictoryPanelClearCustomStatisticTable':
		prefix: 'VictoryPanelClearCustomStatisticTable'
		body: 'VictoryPanelClearCustomStatisticTable()'
	'void VictoryPanelAddTrackedStatistic':
		prefix: 'VictoryPanelAddTrackedStatistic'
		body: 'VictoryPanelAddTrackedStatistic(${1:string inStatistic})'
	'void VictoryPanelAddAchievement':
		prefix: 'VictoryPanelAddAchievement'
		body: 'VictoryPanelAddAchievement(${1:string inAchievement})'
	'void TriggerAddEventVictoryPanelExit':
		prefix: 'TriggerAddEventVictoryPanelExit'
		body: 'TriggerAddEventVictoryPanelExit(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventVictoryPanelPlayMissionAgain':
		prefix: 'TriggerAddEventVictoryPanelPlayMissionAgain'
		body: 'TriggerAddEventVictoryPanelPlayMissionAgain(${1:trigger t}, ${2:int player})'
	'int EventVictoryPanelDifficultySelected':
		prefix: 'EventVictoryPanelDifficultySelected'
		body: 'EventVictoryPanelDifficultySelected()'
	'int HelpPanelLastCreatedHelpItem':
		prefix: 'HelpPanelLastCreatedHelpItem'
		body: 'HelpPanelLastCreatedHelpItem()'
	'void HelpPanelSetHelpItemDarkenedWhenViewed':
		prefix: 'HelpPanelSetHelpItemDarkenedWhenViewed'
		body: 'HelpPanelSetHelpItemDarkenedWhenViewed(${1:int inHelpItemId}, ${2:bool inDarkened})'
	'void HelpPanelAddTip':
		prefix: 'HelpPanelAddTip'
		body: 'HelpPanelAddTip(${1:playergroup players}, ${2:text titleText}, ${3:text descriptionText}, ${4:text alertText}, ${5:string iconPath})'
	'void HelpPanelAddHint':
		prefix: 'HelpPanelAddHint'
		body: 'HelpPanelAddHint(${1:playergroup players}, ${2:text titleText}, ${3:text descriptionText}, ${4:string iconPath})'
	'void HelpPanelAddTutorial':
		prefix: 'HelpPanelAddTutorial'
		body: 'HelpPanelAddTutorial(${1:playergroup players}, ${2:text titleText}, ${3:text descriptionText}, ${4:string iconPath}, ${5:string moviePath}, ${6:bool flashing})'
	'void HelpPanelAddMessage':
		prefix: 'HelpPanelAddMessage'
		body: 'HelpPanelAddMessage(${1:playergroup players}, ${2:text speakerText}, ${3:text subtitleText}, ${4:string modelLink}, ${5:soundlink soundId})'
	'void HelpPanelDisplayPage':
		prefix: 'HelpPanelDisplayPage'
		body: 'HelpPanelDisplayPage(${1:playergroup players}, ${2:int inPage})'
	'void HelpPanelEnableTechTreeButton':
		prefix: 'HelpPanelEnableTechTreeButton'
		body: 'HelpPanelEnableTechTreeButton(${1:playergroup inPlayerGroup}, ${2:bool inEnable})'
	'void HelpPanelEnableTechGlossaryButton':
		prefix: 'HelpPanelEnableTechGlossaryButton'
		body: 'HelpPanelEnableTechGlossaryButton(${1:playergroup inPlayerGroup}, ${2:bool inEnable})'
	'void HelpPanelShowTechTreeRace':
		prefix: 'HelpPanelShowTechTreeRace'
		body: 'HelpPanelShowTechTreeRace(${1:playergroup inPlayerGroup}, ${2:string inRace}, ${3:bool inShow})'
	'void HelpPanelDestroyAllTips':
		prefix: 'HelpPanelDestroyAllTips'
		body: 'HelpPanelDestroyAllTips()'
	'void HelpPanelDestroyAllTutorials':
		prefix: 'HelpPanelDestroyAllTutorials'
		body: 'HelpPanelDestroyAllTutorials()'
	'void HelpPanelDestroyHelpItem':
		prefix: 'HelpPanelDestroyHelpItem'
		body: 'HelpPanelDestroyHelpItem(${1:int helpItemId})'
	'void TipAlertPanelClear':
		prefix: 'TipAlertPanelClear'
		body: 'TipAlertPanelClear(${1:playergroup inPlayerGroup})'
	'void SetHeroLeaderPanelEnabled':
		prefix: 'SetHeroLeaderPanelEnabled'
		body: 'SetHeroLeaderPanelEnabled(${1:bool inRequired})'
	'void PlayerModifyPropertyInt':
		prefix: 'PlayerModifyPropertyInt'
		body: 'PlayerModifyPropertyInt(${1:int inPlayer}, ${2:int inProp}, ${3:int inOper}, ${4:int inVal})'
	'void PlayerModifyPropertyFixed':
		prefix: 'PlayerModifyPropertyFixed'
		body: 'PlayerModifyPropertyFixed(${1:int inPlayer}, ${2:int inProp}, ${3:int inOper}, ${4:fixed inVal})'
	'int PlayerGetPropertyInt':
		prefix: 'PlayerGetPropertyInt'
		body: 'PlayerGetPropertyInt(${1:int inPlayer}, ${2:int inProp})'
	'fixed PlayerGetPropertyFixed':
		prefix: 'PlayerGetPropertyFixed'
		body: 'PlayerGetPropertyFixed(${1:int inPlayer}, ${2:int inProp})'
	'int PlayerStatus':
		prefix: 'PlayerStatus'
		body: 'PlayerStatus(${1:int inPlayer})'
	'int PlayerType':
		prefix: 'PlayerType'
		body: 'PlayerType(${1:int inPlayer})'
	'text PlayerName':
		prefix: 'PlayerName'
		body: 'PlayerName(${1:int inPlayer})'
	'string PlayerHandle':
		prefix: 'PlayerHandle'
		body: 'PlayerHandle(${1:int inPlayer})'
	'string PlayerRace':
		prefix: 'PlayerRace'
		body: 'PlayerRace(${1:int inPlayer})'
	'string PlayerHero':
		prefix: 'PlayerHero'
		body: 'PlayerHero(${1:int inPlayer})'
	'string PlayerSkin':
		prefix: 'PlayerSkin'
		body: 'PlayerSkin(${1:int inPlayer})'
	'string PlayerMount':
		prefix: 'PlayerMount'
		body: 'PlayerMount(${1:int inPlayer})'
	'string PlayerArtifact':
		prefix: 'PlayerArtifact'
		body: 'PlayerArtifact(${1:int inPlayer}, ${2:int inArtifactIndex})'
	'int PlayerArtifactRank':
		prefix: 'PlayerArtifactRank'
		body: 'PlayerArtifactRank(${1:int inPlayer}, ${2:int inArtifactIndex})'
	'string PlayerCommander':
		prefix: 'PlayerCommander'
		body: 'PlayerCommander(${1:int inPlayer})'
	'int PlayerCommanderLevel':
		prefix: 'PlayerCommanderLevel'
		body: 'PlayerCommanderLevel(${1:int inPlayer})'
	'int PlayerDifficulty':
		prefix: 'PlayerDifficulty'
		body: 'PlayerDifficulty(${1:int inPlayer})'
	'void PlayerSetDifficulty':
		prefix: 'PlayerSetDifficulty'
		body: 'PlayerSetDifficulty(${1:int inPlayer}, ${2:int inDifficulty})'
	'void PlayerSetLighting':
		prefix: 'PlayerSetLighting'
		body: 'PlayerSetLighting(${1:int inPlayer}, ${2:string inLight}, ${3:fixed inBlendTime})'
	'void PlayerSetToDLighting':
		prefix: 'PlayerSetToDLighting'
		body: 'PlayerSetToDLighting(${1:int inPlayer}, ${2:string inLight})'
	'point PlayerStartLocation':
		prefix: 'PlayerStartLocation'
		body: 'PlayerStartLocation(${1:int inPlayer})'
	'int PlayerAIBuildNumber':
		prefix: 'PlayerAIBuildNumber'
		body: 'PlayerAIBuildNumber(${1:int player})'
	'bool PlayerAIControlAllowed':
		prefix: 'PlayerAIControlAllowed'
		body: 'PlayerAIControlAllowed(${1:int player})'
	'void PlayerSetAllowAIControl':
		prefix: 'PlayerSetAllowAIControl'
		body: 'PlayerSetAllowAIControl(${1:int player}, ${2:bool allow})'
	'bool PlayerIsUnderAIControl':
		prefix: 'PlayerIsUnderAIControl'
		body: 'PlayerIsUnderAIControl(${1:int player})'
	'void PlayerSetUnderAIControl':
		prefix: 'PlayerSetUnderAIControl'
		body: 'PlayerSetUnderAIControl(${1:int player}, ${2:bool aiControlled})'
	'bool PlayerHasLicense':
		prefix: 'PlayerHasLicense'
		body: 'PlayerHasLicense(${1:int inPlayer}, ${2:int inLicense})'
	'bool PlayerHasAccessTo':
		prefix: 'PlayerHasAccessTo'
		body: 'PlayerHasAccessTo(${1:int inPlayer}, ${2:string inEntityName})'
	'bool PlayerHasReward':
		prefix: 'PlayerHasReward'
		body: 'PlayerHasReward(${1:int inPlayer}, ${2:string inReward})'
	'void PlayerAddTalent':
		prefix: 'PlayerAddTalent'
		body: 'PlayerAddTalent(${1:int inPlayer}, ${2:string inTalent})'
	'void PlayerRemoveTalent':
		prefix: 'PlayerRemoveTalent'
		body: 'PlayerRemoveTalent(${1:int inPlayer}, ${2:string inTalent})'
	'bool PlayerHasTalent':
		prefix: 'PlayerHasTalent'
		body: 'PlayerHasTalent(${1:int inPlayer}, ${2:string inTalent})'
	'void PlayerSetBounds':
		prefix: 'PlayerSetBounds'
		body: 'PlayerSetBounds(${1:int inPlayer}, ${2:region inRegion})'
	'void PlayerSetColorIndex':
		prefix: 'PlayerSetColorIndex'
		body: 'PlayerSetColorIndex(${1:int inPlayer}, ${2:int inIndex}, ${3:bool inChangeUnits})'
	'int PlayerGetColorIndex':
		prefix: 'PlayerGetColorIndex'
		body: 'PlayerGetColorIndex(${1:int inPlayer}, ${2:bool inDefault})'
	'text PlayerColorName':
		prefix: 'PlayerColorName'
		body: 'PlayerColorName(${1:int inColor})'
	'void PlayerSetAlliance':
		prefix: 'PlayerSetAlliance'
		body: 'PlayerSetAlliance(${1:int inSourcePlayer}, ${2:int inAllianceId}, ${3:int inTargetPlayer}, ${4:bool ally})'
	'bool PlayerGetAlliance':
		prefix: 'PlayerGetAlliance'
		body: 'PlayerGetAlliance(${1:int inSourcePlayer}, ${2:int inAllianceId}, ${3:int inTargetPlayer})'
	'void PlayerSetState':
		prefix: 'PlayerSetState'
		body: 'PlayerSetState(${1:int inPlayer}, ${2:int inState}, ${3:bool inVal})'
	'bool PlayerGetState':
		prefix: 'PlayerGetState'
		body: 'PlayerGetState(${1:int inPlayer}, ${2:int inState})'
	'void PlayerSetRace':
		prefix: 'PlayerSetRace'
		body: 'PlayerSetRace(${1:int inPlayer}, ${2:string inRace})'
	'void PlayerSetHero':
		prefix: 'PlayerSetHero'
		body: 'PlayerSetHero(${1:int inPlayer}, ${2:string inHero})'
	'void PlayerSetSkin':
		prefix: 'PlayerSetSkin'
		body: 'PlayerSetSkin(${1:int inPlayer}, ${2:string inSkin})'
	'void PlayerSetMount':
		prefix: 'PlayerSetMount'
		body: 'PlayerSetMount(${1:int inPlayer}, ${2:string inMount})'
	'void PlayerSetCommander':
		prefix: 'PlayerSetCommander'
		body: 'PlayerSetCommander(${1:int inPlayer}, ${2:string inCommander})'
	'void PlayerSetCommanderLevel':
		prefix: 'PlayerSetCommanderLevel'
		body: 'PlayerSetCommanderLevel(${1:int inPlayer}, ${2:int inCommanderLevel})'
	'void PlayerAddLabel':
		prefix: 'PlayerAddLabel'
		body: 'PlayerAddLabel(${1:int inPlayer}, ${2:string inLabel})'
	'bool PlayerRemoveLabel':
		prefix: 'PlayerRemoveLabel'
		body: 'PlayerRemoveLabel(${1:int inPlayer}, ${2:string inLabel})'
	'void PlayerRemoveAllLabels':
		prefix: 'PlayerRemoveAllLabels'
		body: 'PlayerRemoveAllLabels(${1:int inPlayer})'
	'bool PlayerHasLabel':
		prefix: 'PlayerHasLabel'
		body: 'PlayerHasLabel(${1:int inPlayer}, ${2:string inLabel})'
	'void PlayerSetDeathTimer':
		prefix: 'PlayerSetDeathTimer'
		body: 'PlayerSetDeathTimer(${1:int inPlayer}, ${2:timer inTimer})'
	'void PlayerApplySkin':
		prefix: 'PlayerApplySkin'
		body: 'PlayerApplySkin(${1:int inPlayer}, ${2:string inSkin}, ${3:bool apply})'
	'string PlayerGetHotkeyProfile':
		prefix: 'PlayerGetHotkeyProfile'
		body: 'PlayerGetHotkeyProfile(${1:int inPlayer})'
	'void PlayerBeaconClearTarget':
		prefix: 'PlayerBeaconClearTarget'
		body: 'PlayerBeaconClearTarget(${1:int inPlayer}, ${2:int inBeacon})'
	'bool PlayerBeaconIsAutoCast':
		prefix: 'PlayerBeaconIsAutoCast'
		body: 'PlayerBeaconIsAutoCast(${1:int inPlayer}, ${2:int inBeacon})'
	'bool PlayerBeaconIsFromUser':
		prefix: 'PlayerBeaconIsFromUser'
		body: 'PlayerBeaconIsFromUser(${1:int inPlayer}, ${2:int inBeacon})'
	'bool PlayerBeaconIsSet':
		prefix: 'PlayerBeaconIsSet'
		body: 'PlayerBeaconIsSet(${1:int inPlayer}, ${2:int inBeacon})'
	'point PlayerBeaconGetTargetPoint':
		prefix: 'PlayerBeaconGetTargetPoint'
		body: 'PlayerBeaconGetTargetPoint(${1:int inPlayer}, ${2:int inBeacon})'
	'unit PlayerBeaconGetTargetUnit':
		prefix: 'PlayerBeaconGetTargetUnit'
		body: 'PlayerBeaconGetTargetUnit(${1:int inPlayer}, ${2:int inBeacon})'
	'void PlayerBeaconSetAutoCast':
		prefix: 'PlayerBeaconSetAutoCast'
		body: 'PlayerBeaconSetAutoCast(${1:int inPlayer}, ${2:int inBeacon}, ${3:bool enable})'
	'void PlayerBeaconSetTargetPoint':
		prefix: 'PlayerBeaconSetTargetPoint'
		body: 'PlayerBeaconSetTargetPoint(${1:int inPlayer}, ${2:int inBeacon}, ${3:point inPoint}, ${4:bool alert})'
	'void PlayerBeaconSetTargetUnit':
		prefix: 'PlayerBeaconSetTargetUnit'
		body: 'PlayerBeaconSetTargetUnit(${1:int inPlayer}, ${2:int inBeacon}, ${3:unit inUnit}, ${4:bool alert})'
	'void PlayerBeaconAlert':
		prefix: 'PlayerBeaconAlert'
		body: 'PlayerBeaconAlert(${1:int inPlayer}, ${2:int inBeacon}, ${3:string inAlert}, ${4:text inMessage})'
	'int PlayerBeaconGetNumAllies':
		prefix: 'PlayerBeaconGetNumAllies'
		body: 'PlayerBeaconGetNumAllies(${1:int inPlayer})'
	'int PlayerBeaconGetAllyPlayerId':
		prefix: 'PlayerBeaconGetAllyPlayerId'
		body: 'PlayerBeaconGetAllyPlayerId(${1:int inPlayer}, ${2:int allyNum})'
	'void PlayerBeaconSelectDropoff':
		prefix: 'PlayerBeaconSelectDropoff'
		body: 'PlayerBeaconSelectDropoff(${1:int localPlayer})'
	'int PlayerBeaconRequestedMinerals':
		prefix: 'PlayerBeaconRequestedMinerals'
		body: 'PlayerBeaconRequestedMinerals(${1:int inPlayer})'
	'int PlayerBeaconRequestedVespene':
		prefix: 'PlayerBeaconRequestedVespene'
		body: 'PlayerBeaconRequestedVespene(${1:int inPlayer})'
	'void PlayerBeaconBuildMenuSetSlotInfo':
		prefix: 'PlayerBeaconBuildMenuSetSlotInfo'
		body: 'PlayerBeaconBuildMenuSetSlotInfo(${1:int inPlayer}, ${2:int inType}, ${3:int inSlotNum}, ${4:text inIcon}, ${5:text inName}, ${6:text inTooltip})'
	'void PlayerBeaconBuildMenuDisableSlotInfo':
		prefix: 'PlayerBeaconBuildMenuDisableSlotInfo'
		body: 'PlayerBeaconBuildMenuDisableSlotInfo(${1:int inPlayer}, ${2:int inType}, ${3:int inSlotNum}, ${4:bool disable})'
	'void PlayerBeaconBuildMenuClearSlotInfo':
		prefix: 'PlayerBeaconBuildMenuClearSlotInfo'
		body: 'PlayerBeaconBuildMenuClearSlotInfo(${1:int inPlayer}, ${2:int inType}, ${3:int inSlotNum})'
	'void PlayerBeaconBuildMenuCurrentSet':
		prefix: 'PlayerBeaconBuildMenuCurrentSet'
		body: 'PlayerBeaconBuildMenuCurrentSet(${1:int inPlayer}, ${2:int inType}, ${3:int inSlotNum})'
	'int PlayerBeaconBuildMenuCurrentGet':
		prefix: 'PlayerBeaconBuildMenuCurrentGet'
		body: 'PlayerBeaconBuildMenuCurrentGet(${1:int inPlayer}, ${2:int inType})'
	'bool PlayerBeaconBuildMenuWasFromPlayer':
		prefix: 'PlayerBeaconBuildMenuWasFromPlayer'
		body: 'PlayerBeaconBuildMenuWasFromPlayer(${1:int inPlayer}, ${2:int inType})'
	'void PlayerPauseAllCharges':
		prefix: 'PlayerPauseAllCharges'
		body: 'PlayerPauseAllCharges(${1:int inPlayer}, ${2:bool inPause})'
	'void PlayerPauseAllCooldowns':
		prefix: 'PlayerPauseAllCooldowns'
		body: 'PlayerPauseAllCooldowns(${1:int inPlayer}, ${2:bool inPause})'
	'void PlayerAddChargeRegen':
		prefix: 'PlayerAddChargeRegen'
		body: 'PlayerAddChargeRegen(${1:int inPlayer}, ${2:string inCharge}, ${3:fixed inVal})'
	'void PlayerAddChargeRegenRemaining':
		prefix: 'PlayerAddChargeRegenRemaining'
		body: 'PlayerAddChargeRegenRemaining(${1:int inPlayer}, ${2:string inCharge}, ${3:fixed inVal})'
	'fixed PlayerGetChargeRegen':
		prefix: 'PlayerGetChargeRegen'
		body: 'PlayerGetChargeRegen(${1:int inPlayer}, ${2:string inCharge})'
	'void PlayerAddChargeRegenFull':
		prefix: 'PlayerAddChargeRegenFull'
		body: 'PlayerAddChargeRegenFull(${1:int inPlayer}, ${2:string inCharge}, ${3:fixed inVal})'
	'fixed PlayerGetChargeRegenFull':
		prefix: 'PlayerGetChargeRegenFull'
		body: 'PlayerGetChargeRegenFull(${1:int inPlayer}, ${2:string inCharge}, ${3:bool adjustmentOnly})'
	'void PlayerAddChargeUsed':
		prefix: 'PlayerAddChargeUsed'
		body: 'PlayerAddChargeUsed(${1:int inPlayer}, ${2:string inCharge}, ${3:fixed inVal})'
	'fixed PlayerGetChargeUsed':
		prefix: 'PlayerGetChargeUsed'
		body: 'PlayerGetChargeUsed(${1:int inPlayer}, ${2:string inCharge})'
	'void PlayerAddCooldown':
		prefix: 'PlayerAddCooldown'
		body: 'PlayerAddCooldown(${1:int inPlayer}, ${2:string inCooldown}, ${3:fixed inVal})'
	'fixed PlayerGetCooldown':
		prefix: 'PlayerGetCooldown'
		body: 'PlayerGetCooldown(${1:int inPlayer}, ${2:string inCooldown})'
	'void PlayerCreateEffectPoint':
		prefix: 'PlayerCreateEffectPoint'
		body: 'PlayerCreateEffectPoint(${1:int inPlayer}, ${2:string inEffect}, ${3:point inTarget})'
	'void PlayerCreateEffectUnit':
		prefix: 'PlayerCreateEffectUnit'
		body: 'PlayerCreateEffectUnit(${1:int inPlayer}, ${2:string inEffect}, ${3:unit inTarget})'
	'int PlayerValidateEffectPoint':
		prefix: 'PlayerValidateEffectPoint'
		body: 'PlayerValidateEffectPoint(${1:int inPlayer}, ${2:string inEffect}, ${3:point inTarget})'
	'int PlayerValidateEffectUnit':
		prefix: 'PlayerValidateEffectUnit'
		body: 'PlayerValidateEffectUnit(${1:int inPlayer}, ${2:string inEffect}, ${3:unit inTarget})'
	'void PlayerScoreValueEnableAll':
		prefix: 'PlayerScoreValueEnableAll'
		body: 'PlayerScoreValueEnableAll(${1:int player}, ${2:bool enable})'
	'void PlayerScoreValueEnable':
		prefix: 'PlayerScoreValueEnable'
		body: 'PlayerScoreValueEnable(${1:int player}, ${2:string value}, ${3:bool enable})'
	'fixed PlayerScoreValueGetAsFixed':
		prefix: 'PlayerScoreValueGetAsFixed'
		body: 'PlayerScoreValueGetAsFixed(${1:int player}, ${2:string value})'
	'int PlayerScoreValueGetAsInt':
		prefix: 'PlayerScoreValueGetAsInt'
		body: 'PlayerScoreValueGetAsInt(${1:int player}, ${2:string value})'
	'void PlayerScoreValueSetFromFixed':
		prefix: 'PlayerScoreValueSetFromFixed'
		body: 'PlayerScoreValueSetFromFixed(${1:int player}, ${2:string value}, ${3:fixed amount})'
	'void PlayerScoreValueSetFromInt':
		prefix: 'PlayerScoreValueSetFromInt'
		body: 'PlayerScoreValueSetFromInt(${1:int player}, ${2:string value}, ${3:int amount})'
	'void TriggerAddEventPlayerAllianceChange':
		prefix: 'TriggerAddEventPlayerAllianceChange'
		body: 'TriggerAddEventPlayerAllianceChange(${1:trigger inTrigger}, ${2:int player})'
	'void TriggerAddEventPlayerJoin':
		prefix: 'TriggerAddEventPlayerJoin'
		body: 'TriggerAddEventPlayerJoin(${1:trigger inTrigger}, ${2:int player})'
	'void TriggerAddEventPlayerLeft':
		prefix: 'TriggerAddEventPlayerLeft'
		body: 'TriggerAddEventPlayerLeft(${1:trigger inTrigger}, ${2:int player}, ${3:int inResult})'
	'void TriggerAddEventPlayerPropChange':
		prefix: 'TriggerAddEventPlayerPropChange'
		body: 'TriggerAddEventPlayerPropChange(${1:trigger inTrigger}, ${2:int player}, ${3:int inProp})'
	'void TriggerAddEventPlayerAIWave':
		prefix: 'TriggerAddEventPlayerAIWave'
		body: 'TriggerAddEventPlayerAIWave(${1:trigger inTrigger}, ${2:int player})'
	'void TriggerAddEventPlayerEffectUsed':
		prefix: 'TriggerAddEventPlayerEffectUsed'
		body: 'TriggerAddEventPlayerEffectUsed(${1:trigger t}, ${2:int player}, ${3:string inEffect})'
	'void TriggerAddEventPlayerEffectUsedFromScope':
		prefix: 'TriggerAddEventPlayerEffectUsedFromScope'
		body: 'TriggerAddEventPlayerEffectUsedFromScope(${1:trigger t}, ${2:int player}, ${3:string inScope})'
	'int EventPlayer':
		prefix: 'EventPlayer'
		body: 'EventPlayer()'
	'int EventPlayerProperty':
		prefix: 'EventPlayerProperty'
		body: 'EventPlayerProperty()'
	'int EventPlayerPropertyChangeInt':
		prefix: 'EventPlayerPropertyChangeInt'
		body: 'EventPlayerPropertyChangeInt()'
	'fixed EventPlayerPropertyChangeFixed':
		prefix: 'EventPlayerPropertyChangeFixed'
		body: 'EventPlayerPropertyChangeFixed()'
	'string EventPlayerEffectUsed':
		prefix: 'EventPlayerEffectUsed'
		body: 'EventPlayerEffectUsed()'
	'point EventPlayerEffectUsedPoint':
		prefix: 'EventPlayerEffectUsedPoint'
		body: 'EventPlayerEffectUsedPoint(${1:int inLocation})'
	'unit EventPlayerEffectUsedUnit':
		prefix: 'EventPlayerEffectUsedUnit'
		body: 'EventPlayerEffectUsedUnit(${1:int inLocation})'
	'int EventPlayerEffectUsedUnitOwner':
		prefix: 'EventPlayerEffectUsedUnitOwner'
		body: 'EventPlayerEffectUsedUnitOwner(${1:int inLocation})'
	'string EventPlayerEffectUsedUnitType':
		prefix: 'EventPlayerEffectUsedUnitType'
		body: 'EventPlayerEffectUsedUnitType(${1:int inLocation})'
	'int EventPlayerEffectUsedAmountInt':
		prefix: 'EventPlayerEffectUsedAmountInt'
		body: 'EventPlayerEffectUsedAmountInt(${1:int inAmount}, ${2:bool total})'
	'fixed EventPlayerEffectUsedAmountFixed':
		prefix: 'EventPlayerEffectUsedAmountFixed'
		body: 'EventPlayerEffectUsedAmountFixed(${1:int inAmount}, ${2:bool total})'
	'string EventPlayerEffectUsedSourceBehavior':
		prefix: 'EventPlayerEffectUsedSourceBehavior'
		body: 'EventPlayerEffectUsedSourceBehavior()'
	'wave EventPlayerWave':
		prefix: 'EventPlayerWave'
		body: 'EventPlayerWave()'
	'text DifficultyName':
		prefix: 'DifficultyName'
		body: 'DifficultyName(${1:int inDifficulty})'
	'text DifficultyNameCampaign':
		prefix: 'DifficultyNameCampaign'
		body: 'DifficultyNameCampaign(${1:int inDifficulty})'
	'bool DifficultyEnabled':
		prefix: 'DifficultyEnabled'
		body: 'DifficultyEnabled(${1:int inDifficulty})'
	'int DifficultyAPM':
		prefix: 'DifficultyAPM'
		body: 'DifficultyAPM(${1:int inDifficulty})'
	'void SetScoreTimer':
		prefix: 'SetScoreTimer'
		body: 'SetScoreTimer(${1:timer inTimer})'
	'playergroup PlayerGroupEmpty':
		prefix: 'PlayerGroupEmpty'
		body: 'PlayerGroupEmpty()'
	'playergroup PlayerGroupCopy':
		prefix: 'PlayerGroupCopy'
		body: 'PlayerGroupCopy(${1:playergroup inGroup})'
	'playergroup PlayerGroupAll':
		prefix: 'PlayerGroupAll'
		body: 'PlayerGroupAll()'
	'playergroup PlayerGroupActive':
		prefix: 'PlayerGroupActive'
		body: 'PlayerGroupActive()'
	'playergroup PlayerGroupSingle':
		prefix: 'PlayerGroupSingle'
		body: 'PlayerGroupSingle(${1:int inPlayer})'
	'playergroup PlayerGroupAlliance':
		prefix: 'PlayerGroupAlliance'
		body: 'PlayerGroupAlliance(${1:int inType}, ${2:int inPlayer})'
	'void PlayerGroupClear':
		prefix: 'PlayerGroupClear'
		body: 'PlayerGroupClear(${1:playergroup inGroup})'
	'void PlayerGroupAdd':
		prefix: 'PlayerGroupAdd'
		body: 'PlayerGroupAdd(${1:playergroup inGroup}, ${2:int inPlayer})'
	'void PlayerGroupRemove':
		prefix: 'PlayerGroupRemove'
		body: 'PlayerGroupRemove(${1:playergroup inGroup}, ${2:int inPlayer})'
	'int PlayerGroupCount':
		prefix: 'PlayerGroupCount'
		body: 'PlayerGroupCount(${1:playergroup inGroup})'
	'int PlayerGroupPlayer':
		prefix: 'PlayerGroupPlayer'
		body: 'PlayerGroupPlayer(${1:playergroup inGroup}, ${2:int inIndex})'
	'bool PlayerGroupHasPlayer':
		prefix: 'PlayerGroupHasPlayer'
		body: 'PlayerGroupHasPlayer(${1:playergroup inGroup}, ${2:int inPlayer})'
	'point Point':
		prefix: 'Point'
		body: 'Point(${1:fixed x}, ${2:fixed y})'
	'point PointWithOffset':
		prefix: 'PointWithOffset'
		body: 'PointWithOffset(${1:point p}, ${2:fixed x}, ${3:fixed y})'
	'point PointWithOffsetPolar':
		prefix: 'PointWithOffsetPolar'
		body: 'PointWithOffsetPolar(${1:point p}, ${2:fixed distance}, ${3:fixed angle})'
	'point PointFromId':
		prefix: 'PointFromId'
		body: 'PointFromId(${1:int id})'
	'point PointFromName':
		prefix: 'PointFromName'
		body: 'PointFromName(${1:string name})'
	'fixed PointGetX':
		prefix: 'PointGetX'
		body: 'PointGetX(${1:point p})'
	'fixed PointGetY':
		prefix: 'PointGetY'
		body: 'PointGetY(${1:point p})'
	'void PointSet':
		prefix: 'PointSet'
		body: 'PointSet(${1:point p1}, ${2:point p2})'
	'fixed PointGetFacing':
		prefix: 'PointGetFacing'
		body: 'PointGetFacing(${1:point p})'
	'void PointSetFacing':
		prefix: 'PointSetFacing'
		body: 'PointSetFacing(${1:point p}, ${2:fixed inFacing})'
	'fixed PointGetHeight':
		prefix: 'PointGetHeight'
		body: 'PointGetHeight(${1:point p})'
	'void PointSetHeight':
		prefix: 'PointSetHeight'
		body: 'PointSetHeight(${1:point p}, ${2:fixed inHeight})'
	'bool PointsInRange':
		prefix: 'PointsInRange'
		body: 'PointsInRange(${1:point p1}, ${2:point p2}, ${3:fixed range})'
	'fixed AngleBetweenPoints':
		prefix: 'AngleBetweenPoints'
		body: 'AngleBetweenPoints(${1:point p1}, ${2:point p2})'
	'fixed DistanceBetweenPoints':
		prefix: 'DistanceBetweenPoints'
		body: 'DistanceBetweenPoints(${1:point p1}, ${2:point p2})'
	'fixed DistanceSquaredBetweenPoints':
		prefix: 'DistanceSquaredBetweenPoints'
		body: 'DistanceSquaredBetweenPoints(${1:point p1}, ${2:point p2})'
	'int PointPathingCost':
		prefix: 'PointPathingCost'
		body: 'PointPathingCost(${1:point p1}, ${2:point p2})'
	'fixed PointPathingCliffLevel':
		prefix: 'PointPathingCliffLevel'
		body: 'PointPathingCliffLevel(${1:point p})'
	'bool PointPathingPassable':
		prefix: 'PointPathingPassable'
		body: 'PointPathingPassable(${1:point p})'
	'bool PointPathingIsConnected':
		prefix: 'PointPathingIsConnected'
		body: 'PointPathingIsConnected(${1:point p1}, ${2:point p2})'
	'point PointReflect':
		prefix: 'PointReflect'
		body: 'PointReflect(${1:point source}, ${2:point dest}, ${3:fixed angle})'
	'point PointInterpolate':
		prefix: 'PointInterpolate'
		body: 'PointInterpolate(${1:point source}, ${2:point dest}, ${3:fixed fraction})'
	'point MidPoint':
		prefix: 'MidPoint'
		body: 'MidPoint(${1:point source}, ${2:point dest})'
	'int PortraitCreate':
		prefix: 'PortraitCreate'
		body: 'PortraitCreate(${1:int offsetX}, ${2:int offsetY}, ${3:int anchor}, ${4:int width}, ${5:int height}, ${6:string modelLink}, ${7:string cameraLink}, ${8:string animProps}, ${9:bool visible}, ${10:bool waitUntilLoaded})'
	'int PortraitLastCreated':
		prefix: 'PortraitLastCreated'
		body: 'PortraitLastCreated()'
	'void PortraitDestroy':
		prefix: 'PortraitDestroy'
		body: 'PortraitDestroy(${1:int p})'
	'void PortraitDestroyAll':
		prefix: 'PortraitDestroyAll'
		body: 'PortraitDestroyAll()'
	'void PortraitWaitForLoad':
		prefix: 'PortraitWaitForLoad'
		body: 'PortraitWaitForLoad(${1:int p})'
	'int PortraitGetGame':
		prefix: 'PortraitGetGame'
		body: 'PortraitGetGame()'
	'int PortraitGetPlanetPanel':
		prefix: 'PortraitGetPlanetPanel'
		body: 'PortraitGetPlanetPanel()'
	'int PortraitGetTriggerControl':
		prefix: 'PortraitGetTriggerControl'
		body: 'PortraitGetTriggerControl(${1:int inControlId})'
	'void PortraitSetModel':
		prefix: 'PortraitSetModel'
		body: 'PortraitSetModel(${1:int p}, ${2:string modelLink}, ${3:bool waitUntilLoaded})'
	'void PortraitSetModelAnim':
		prefix: 'PortraitSetModelAnim'
		body: 'PortraitSetModelAnim(${1:int p}, ${2:string modelLink}, ${3:string anim}, ${4:int flags}, ${5:bool waitUntilLoaded})'
	'void PortraitSetAnim':
		prefix: 'PortraitSetAnim'
		body: 'PortraitSetAnim(${1:int p}, ${2:string anim})'
	'void PortraitSetCamera':
		prefix: 'PortraitSetCamera'
		body: 'PortraitSetCamera(${1:int p}, ${2:string cameraName})'
	'void PortraitSetSize':
		prefix: 'PortraitSetSize'
		body: 'PortraitSetSize(${1:int p}, ${2:int width}, ${3:int height})'
	'void PortraitSetPosition':
		prefix: 'PortraitSetPosition'
		body: 'PortraitSetPosition(${1:int p}, ${2:int anchor}, ${3:int offsetX}, ${4:int offsetY})'
	'void PortraitSetFullscreen':
		prefix: 'PortraitSetFullscreen'
		body: 'PortraitSetFullscreen(${1:int p}, ${2:bool isFullscreen})'
	'void PortraitSetOffscreen':
		prefix: 'PortraitSetOffscreen'
		body: 'PortraitSetOffscreen(${1:int p}, ${2:bool isOffscreen})'
	'void PortraitSetVisible':
		prefix: 'PortraitSetVisible'
		body: 'PortraitSetVisible(${1:int p}, ${2:playergroup players}, ${3:bool isVisible}, ${4:bool forceVisible})'
	'void PortraitSetBorderVisible':
		prefix: 'PortraitSetBorderVisible'
		body: 'PortraitSetBorderVisible(${1:int p}, ${2:bool isBorderVisible})'
	'void PortraitSetBorderTexture':
		prefix: 'PortraitSetBorderTexture'
		body: 'PortraitSetBorderTexture(${1:int p}, ${2:string inBorderFilePath})'
	'void PortraitSetBackgroundVisible':
		prefix: 'PortraitSetBackgroundVisible'
		body: 'PortraitSetBackgroundVisible(${1:int p}, ${2:bool isBackgroundVisible})'
	'void PortraitSetChannel':
		prefix: 'PortraitSetChannel'
		body: 'PortraitSetChannel(${1:int p}, ${2:int channel})'
	'void PortraitUseTransition':
		prefix: 'PortraitUseTransition'
		body: 'PortraitUseTransition(${1:int p}, ${2:bool useTransition})'
	'void PortraitSetRenderType':
		prefix: 'PortraitSetRenderType'
		body: 'PortraitSetRenderType(${1:int p}, ${2:int renderType})'
	'void PortraitSetMuted':
		prefix: 'PortraitSetMuted'
		body: 'PortraitSetMuted(${1:int p}, ${2:bool isMuted})'
	'void PortraitForceTransition':
		prefix: 'PortraitForceTransition'
		body: 'PortraitForceTransition(${1:int p}, ${2:bool isVisible}, ${3:bool isInstant})'
	'void PortraitSetPaused':
		prefix: 'PortraitSetPaused'
		body: 'PortraitSetPaused(${1:int p}, ${2:bool isPaused})'
	'void PortraitSetTintColor':
		prefix: 'PortraitSetTintColor'
		body: 'PortraitSetTintColor(${1:int p}, ${2:color inColor})'
	'void PortraitSetTeamColor':
		prefix: 'PortraitSetTeamColor'
		body: 'PortraitSetTeamColor(${1:int p}, ${2:color inColor})'
	'void PortraitSetLight':
		prefix: 'PortraitSetLight'
		body: 'PortraitSetLight(${1:int p}, ${2:string lightLink})'
	'void PortraitSetTransitionModel':
		prefix: 'PortraitSetTransitionModel'
		body: 'PortraitSetTransitionModel(${1:int p}, ${2:string modelLink})'
	'void PortraitSetMouseTarget':
		prefix: 'PortraitSetMouseTarget'
		body: 'PortraitSetMouseTarget(${1:int p}, ${2:bool inMouseTarget})'
	'void PortraitSetActor':
		prefix: 'PortraitSetActor'
		body: 'PortraitSetActor(${1:int p}, ${2:string actorLink})'
	'bool PortraitVisible':
		prefix: 'PortraitVisible'
		body: 'PortraitVisible(${1:int p}, ${2:int player})'
	'void PreloadAsset':
		prefix: 'PreloadAsset'
		body: 'PreloadAsset(${1:string key}, ${2:bool queue})'
	'void PreloadImage':
		prefix: 'PreloadImage'
		body: 'PreloadImage(${1:string path}, ${2:bool queue})'
	'void PreloadLayout':
		prefix: 'PreloadLayout'
		body: 'PreloadLayout(${1:string path}, ${2:bool queue})'
	'void PreloadModel':
		prefix: 'PreloadModel'
		body: 'PreloadModel(${1:string path}, ${2:bool queue})'
	'void PreloadMovie':
		prefix: 'PreloadMovie'
		body: 'PreloadMovie(${1:string path}, ${2:bool queue})'
	'void PreloadObject':
		prefix: 'PreloadObject'
		body: 'PreloadObject(${1:int catalog}, ${2:string id}, ${3:bool queue})'
	'void PreloadScene':
		prefix: 'PreloadScene'
		body: 'PreloadScene(${1:string path}, ${2:bool queue})'
	'void PreloadScript':
		prefix: 'PreloadScript'
		body: 'PreloadScript(${1:string path}, ${2:bool queue})'
	'void PreloadSound':
		prefix: 'PreloadSound'
		body: 'PreloadSound(${1:string path}, ${2:bool queue})'
	'int PurchaseCategoryCreate':
		prefix: 'PurchaseCategoryCreate'
		body: 'PurchaseCategoryCreate(${1:playergroup inPlayerGroup}, ${2:int inSlot})'
	'int PurchaseCategoryLastCreated':
		prefix: 'PurchaseCategoryLastCreated'
		body: 'PurchaseCategoryLastCreated()'
	'void PurchaseCategoryDestroy':
		prefix: 'PurchaseCategoryDestroy'
		body: 'PurchaseCategoryDestroy(${1:int inPurchaseCategoryId})'
	'void PurchaseCategoryDestroyAll':
		prefix: 'PurchaseCategoryDestroyAll'
		body: 'PurchaseCategoryDestroyAll(${1:playergroup inPlayerGroup})'
	'void PurchaseCategorySetPlayerGroup':
		prefix: 'PurchaseCategorySetPlayerGroup'
		body: 'PurchaseCategorySetPlayerGroup(${1:int inPurchaseCategoryId}, ${2:playergroup inPlayerGroup})'
	'void PurchaseCategorySetNameText':
		prefix: 'PurchaseCategorySetNameText'
		body: 'PurchaseCategorySetNameText(${1:int inPurchaseCategoryId}, ${2:text inText})'
	'void PurchaseCategorySetState':
		prefix: 'PurchaseCategorySetState'
		body: 'PurchaseCategorySetState(${1:int inPurchaseCategoryId}, ${2:int inState})'
	'void PurchaseCategorySetSlot':
		prefix: 'PurchaseCategorySetSlot'
		body: 'PurchaseCategorySetSlot(${1:int inPurchaseCategoryId}, ${2:int inSlot})'
	'void PurchaseSetSelectedPurchaseCategory':
		prefix: 'PurchaseSetSelectedPurchaseCategory'
		body: 'PurchaseSetSelectedPurchaseCategory(${1:playergroup inPlayerGroup}, ${2:int inPurchaseCategoryId})'
	'int PurchaseGetSelectedPurchaseCategory':
		prefix: 'PurchaseGetSelectedPurchaseCategory'
		body: 'PurchaseGetSelectedPurchaseCategory(${1:int inPlayer})'
	'int PurchaseGroupCreate':
		prefix: 'PurchaseGroupCreate'
		body: 'PurchaseGroupCreate(${1:playergroup inPlayerGroup}, ${2:int inPurchaseCategoryId}, ${3:int inSlot})'
	'int PurchaseGroupLastCreated':
		prefix: 'PurchaseGroupLastCreated'
		body: 'PurchaseGroupLastCreated()'
	'void PurchaseGroupDestroy':
		prefix: 'PurchaseGroupDestroy'
		body: 'PurchaseGroupDestroy(${1:int inPurchaseGroupId})'
	'void PurchaseGroupDestroyAll':
		prefix: 'PurchaseGroupDestroyAll'
		body: 'PurchaseGroupDestroyAll(${1:playergroup inPlayerGroup})'
	'void PurchaseGroupSetPlayerGroup':
		prefix: 'PurchaseGroupSetPlayerGroup'
		body: 'PurchaseGroupSetPlayerGroup(${1:int inPurchaseGroupId}, ${2:playergroup inPlayerGroup})'
	'void PurchaseGroupSetNameText':
		prefix: 'PurchaseGroupSetNameText'
		body: 'PurchaseGroupSetNameText(${1:int inPurchaseGroupId}, ${2:text inText})'
	'void PurchaseGroupSetTooltipText':
		prefix: 'PurchaseGroupSetTooltipText'
		body: 'PurchaseGroupSetTooltipText(${1:int inPurchaseGroupId}, ${2:text inText})'
	'void PurchaseGroupSetIconFilePath':
		prefix: 'PurchaseGroupSetIconFilePath'
		body: 'PurchaseGroupSetIconFilePath(${1:int inPurchaseGroupId}, ${2:string inFilePath})'
	'void PurchaseGroupSetState':
		prefix: 'PurchaseGroupSetState'
		body: 'PurchaseGroupSetState(${1:int inPurchaseGroupId}, ${2:int inState})'
	'void PurchaseGroupSetSlot':
		prefix: 'PurchaseGroupSetSlot'
		body: 'PurchaseGroupSetSlot(${1:int inPurchaseGroupId}, ${2:int inSlot})'
	'void PurchaseGroupSetUnitLink':
		prefix: 'PurchaseGroupSetUnitLink'
		body: 'PurchaseGroupSetUnitLink(${1:int inPurchaseGroupId}, ${2:string inUnitLink})'
	'int PurchaseItemCreate':
		prefix: 'PurchaseItemCreate'
		body: 'PurchaseItemCreate(${1:playergroup inPlayerGroup}, ${2:int inPurchaseGroupId}, ${3:int inSlot})'
	'int PurchaseItemLastCreated':
		prefix: 'PurchaseItemLastCreated'
		body: 'PurchaseItemLastCreated()'
	'void PurchaseItemDestroy':
		prefix: 'PurchaseItemDestroy'
		body: 'PurchaseItemDestroy(${1:int inPurchaseItemId})'
	'void PurchaseItemDestroyAll':
		prefix: 'PurchaseItemDestroyAll'
		body: 'PurchaseItemDestroyAll(${1:playergroup inPlayerGroup})'
	'void PurchaseItemSetPlayerGroup':
		prefix: 'PurchaseItemSetPlayerGroup'
		body: 'PurchaseItemSetPlayerGroup(${1:int inPurchaseItemId}, ${2:playergroup inPlayerGroup})'
	'void PurchaseItemSetNameText':
		prefix: 'PurchaseItemSetNameText'
		body: 'PurchaseItemSetNameText(${1:int inPurchaseItemId}, ${2:text inText})'
	'void PurchaseItemSetTooltipText':
		prefix: 'PurchaseItemSetTooltipText'
		body: 'PurchaseItemSetTooltipText(${1:int inPurchaseItemId}, ${2:text inText})'
	'void PurchaseItemSetDescriptionText':
		prefix: 'PurchaseItemSetDescriptionText'
		body: 'PurchaseItemSetDescriptionText(${1:int inPurchaseItemId}, ${2:text inText})'
	'void PurchaseItemSetIconFilePath':
		prefix: 'PurchaseItemSetIconFilePath'
		body: 'PurchaseItemSetIconFilePath(${1:int inPurchaseItemId}, ${2:string inFilePath})'
	'void PurchaseItemSetMovieFilePath':
		prefix: 'PurchaseItemSetMovieFilePath'
		body: 'PurchaseItemSetMovieFilePath(${1:int inPurchaseItemId}, ${2:string inFilePath})'
	'void PurchaseItemSetCost':
		prefix: 'PurchaseItemSetCost'
		body: 'PurchaseItemSetCost(${1:int inPurchaseItemId}, ${2:int inCost})'
	'void PurchaseItemSetState':
		prefix: 'PurchaseItemSetState'
		body: 'PurchaseItemSetState(${1:int inPurchaseItemId}, ${2:int inState})'
	'void PurchaseItemSetRecentlyPurchased':
		prefix: 'PurchaseItemSetRecentlyPurchased'
		body: 'PurchaseItemSetRecentlyPurchased(${1:int inPurchaseItemId}, ${2:bool inRecent})'
	'void PurchaseItemSetSlot':
		prefix: 'PurchaseItemSetSlot'
		body: 'PurchaseItemSetSlot(${1:int inPurchaseItemId}, ${2:int inSlot})'
	'void PurchaseItemPurchase':
		prefix: 'PurchaseItemPurchase'
		body: 'PurchaseItemPurchase(${1:int inPurchaseItemId})'
	'bool PurchaseItemIsRecentlyPurchased':
		prefix: 'PurchaseItemIsRecentlyPurchased'
		body: 'PurchaseItemIsRecentlyPurchased(${1:int inPurchaseItemId})'
	'void PurchaseSetSelectedPurchaseItem':
		prefix: 'PurchaseSetSelectedPurchaseItem'
		body: 'PurchaseSetSelectedPurchaseItem(${1:playergroup inPlayerGroup}, ${2:int inPurchaseItemId})'
	'int PurchaseGetSelectedPurchaseItem':
		prefix: 'PurchaseGetSelectedPurchaseItem'
		body: 'PurchaseGetSelectedPurchaseItem(${1:int inPlayer})'
	'void TriggerAddEventPurchaseMade':
		prefix: 'TriggerAddEventPurchaseMade'
		body: 'TriggerAddEventPurchaseMade(${1:trigger t}, ${2:int player}, ${3:int inPurchaseItemId})'
	'void TriggerAddEventPurchaseExit':
		prefix: 'TriggerAddEventPurchaseExit'
		body: 'TriggerAddEventPurchaseExit(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventSelectedPurchaseItemChanged':
		prefix: 'TriggerAddEventSelectedPurchaseItemChanged'
		body: 'TriggerAddEventSelectedPurchaseItemChanged(${1:trigger t}, ${2:int player}, ${3:int inPurchaseItemId})'
	'void TriggerAddEventSelectedPurchaseCategoryChanged':
		prefix: 'TriggerAddEventSelectedPurchaseCategoryChanged'
		body: 'TriggerAddEventSelectedPurchaseCategoryChanged(${1:trigger t}, ${2:int player}, ${3:int inPurchaseCategoryId})'
	'int EventPurchaseMade':
		prefix: 'EventPurchaseMade'
		body: 'EventPurchaseMade()'
	'region RegionEmpty':
		prefix: 'RegionEmpty'
		body: 'RegionEmpty()'
	'region RegionEntireMap':
		prefix: 'RegionEntireMap'
		body: 'RegionEntireMap()'
	'region RegionPlayableMap':
		prefix: 'RegionPlayableMap'
		body: 'RegionPlayableMap()'
	'void RegionPlayableMapSet':
		prefix: 'RegionPlayableMapSet'
		body: 'RegionPlayableMapSet(${1:region r})'
	'region RegionRect':
		prefix: 'RegionRect'
		body: 'RegionRect(${1:fixed minx}, ${2:fixed miny}, ${3:fixed maxx}, ${4:fixed maxy})'
	'region RegionCircle':
		prefix: 'RegionCircle'
		body: 'RegionCircle(${1:point center}, ${2:fixed radius})'
	'region RegionFromId':
		prefix: 'RegionFromId'
		body: 'RegionFromId(${1:int id})'
	'region RegionFromName':
		prefix: 'RegionFromName'
		body: 'RegionFromName(${1:string name})'
	'void RegionAddRect':
		prefix: 'RegionAddRect'
		body: 'RegionAddRect(${1:region r}, ${2:bool positive}, ${3:fixed minx}, ${4:fixed miny}, ${5:fixed maxx}, ${6:fixed maxy})'
	'void RegionAddCircle':
		prefix: 'RegionAddCircle'
		body: 'RegionAddCircle(${1:region r}, ${2:bool positive}, ${3:point center}, ${4:fixed radius})'
	'void RegionAddRegion':
		prefix: 'RegionAddRegion'
		body: 'RegionAddRegion(${1:region r}, ${2:region regToAdd})'
	'void RegionSetOffset':
		prefix: 'RegionSetOffset'
		body: 'RegionSetOffset(${1:region r}, ${2:point offset})'
	'point RegionGetOffset':
		prefix: 'RegionGetOffset'
		body: 'RegionGetOffset(${1:region r})'
	'bool RegionContainsPoint':
		prefix: 'RegionContainsPoint'
		body: 'RegionContainsPoint(${1:region r}, ${2:point p})'
	'point RegionRandomPoint':
		prefix: 'RegionRandomPoint'
		body: 'RegionRandomPoint(${1:region r})'
	'point RegionGetBoundsMin':
		prefix: 'RegionGetBoundsMin'
		body: 'RegionGetBoundsMin(${1:region r})'
	'point RegionGetBoundsMax':
		prefix: 'RegionGetBoundsMax'
		body: 'RegionGetBoundsMax(${1:region r})'
	'point RegionGetCenter':
		prefix: 'RegionGetCenter'
		body: 'RegionGetCenter(${1:region r})'
	'void RegionSetCenter':
		prefix: 'RegionSetCenter'
		body: 'RegionSetCenter(${1:region r}, ${2:point p})'
	'void RegionAttachToUnit':
		prefix: 'RegionAttachToUnit'
		body: 'RegionAttachToUnit(${1:region r}, ${2:unit u}, ${3:point offset})'
	'unit RegionGetAttachUnit':
		prefix: 'RegionGetAttachUnit'
		body: 'RegionGetAttachUnit(${1:region r})'
	'int ResearchCategoryCreate':
		prefix: 'ResearchCategoryCreate'
		body: 'ResearchCategoryCreate(${1:playergroup inPlayerGroup}, ${2:int inSlot})'
	'int ResearchCategoryLastCreated':
		prefix: 'ResearchCategoryLastCreated'
		body: 'ResearchCategoryLastCreated()'
	'void ResearchCategoryDestroy':
		prefix: 'ResearchCategoryDestroy'
		body: 'ResearchCategoryDestroy(${1:int inResearchCategoryId})'
	'void ResearchCategoryDestroyAll':
		prefix: 'ResearchCategoryDestroyAll'
		body: 'ResearchCategoryDestroyAll(${1:playergroup inPlayerGroup})'
	'void ResearchCategorySetPlayerGroup':
		prefix: 'ResearchCategorySetPlayerGroup'
		body: 'ResearchCategorySetPlayerGroup(${1:int inResearchCategoryId}, ${2:playergroup inPlayerGroup})'
	'void ResearchCategorySetSlot':
		prefix: 'ResearchCategorySetSlot'
		body: 'ResearchCategorySetSlot(${1:int inResearchCategoryId}, ${2:int inSlot})'
	'void ResearchCategorySetNameText':
		prefix: 'ResearchCategorySetNameText'
		body: 'ResearchCategorySetNameText(${1:int inResearchCategoryId}, ${2:text inText})'
	'void ResearchCategorySetCurrentLevel':
		prefix: 'ResearchCategorySetCurrentLevel'
		body: 'ResearchCategorySetCurrentLevel(${1:int inResearchCategoryId}, ${2:int inLevel})'
	'void ResearchCategorySetLastLevel':
		prefix: 'ResearchCategorySetLastLevel'
		body: 'ResearchCategorySetLastLevel(${1:int inResearchCategoryId}, ${2:int inLevel})'
	'int ResearchTierCreate':
		prefix: 'ResearchTierCreate'
		body: 'ResearchTierCreate(${1:playergroup inPlayerGroup}, ${2:int inResearchCategoryId}, ${3:int inSlot})'
	'int ResearchTierLastCreated':
		prefix: 'ResearchTierLastCreated'
		body: 'ResearchTierLastCreated()'
	'void ResearchTierDestroy':
		prefix: 'ResearchTierDestroy'
		body: 'ResearchTierDestroy(${1:int inResearchTierId})'
	'void ResearchTierDestroyAll':
		prefix: 'ResearchTierDestroyAll'
		body: 'ResearchTierDestroyAll(${1:playergroup inPlayerGroup})'
	'void ResearchTierSetPlayerGroup':
		prefix: 'ResearchTierSetPlayerGroup'
		body: 'ResearchTierSetPlayerGroup(${1:int inResearchTierId}, ${2:playergroup inPlayerGroup})'
	'void ResearchTierSetSlot':
		prefix: 'ResearchTierSetSlot'
		body: 'ResearchTierSetSlot(${1:int inResearchTierId}, ${2:int inSlot})'
	'void ResearchTierSetRequiredLevel':
		prefix: 'ResearchTierSetRequiredLevel'
		body: 'ResearchTierSetRequiredLevel(${1:int inResearchTierId}, ${2:int inLevel})'
	'void ResearchTierSetMaxPurchasesAllowed':
		prefix: 'ResearchTierSetMaxPurchasesAllowed'
		body: 'ResearchTierSetMaxPurchasesAllowed(${1:int inResearchTierId}, ${2:int inMax})'
	'int ResearchItemCreate':
		prefix: 'ResearchItemCreate'
		body: 'ResearchItemCreate(${1:playergroup inPlayerGroup}, ${2:int inResearchTierId}, ${3:int inState})'
	'int ResearchItemLastCreated':
		prefix: 'ResearchItemLastCreated'
		body: 'ResearchItemLastCreated()'
	'void ResearchItemDestroy':
		prefix: 'ResearchItemDestroy'
		body: 'ResearchItemDestroy(${1:int inResearchItemId})'
	'void ResearchItemDestroyAll':
		prefix: 'ResearchItemDestroyAll'
		body: 'ResearchItemDestroyAll(${1:playergroup inPlayerGroup})'
	'void ResearchItemSetPlayerGroup':
		prefix: 'ResearchItemSetPlayerGroup'
		body: 'ResearchItemSetPlayerGroup(${1:int inResearchItemId}, ${2:playergroup inPlayerGroup})'
	'void ResearchItemSetSlot':
		prefix: 'ResearchItemSetSlot'
		body: 'ResearchItemSetSlot(${1:int inResearchItemId}, ${2:int inSlot})'
	'void ResearchItemSetState':
		prefix: 'ResearchItemSetState'
		body: 'ResearchItemSetState(${1:int inResearchItemId}, ${2:int inState})'
	'void ResearchItemSetNameText':
		prefix: 'ResearchItemSetNameText'
		body: 'ResearchItemSetNameText(${1:int inResearchItemId}, ${2:text inText})'
	'void ResearchItemSetDescriptionText':
		prefix: 'ResearchItemSetDescriptionText'
		body: 'ResearchItemSetDescriptionText(${1:int inResearchItemId}, ${2:text inText})'
	'void ResearchItemSetTooltipText':
		prefix: 'ResearchItemSetTooltipText'
		body: 'ResearchItemSetTooltipText(${1:int inResearchItemId}, ${2:text inText})'
	'void ResearchItemSetConfirmationText':
		prefix: 'ResearchItemSetConfirmationText'
		body: 'ResearchItemSetConfirmationText(${1:int inResearchItemId}, ${2:text inText})'
	'void ResearchItemSetIconFilePath':
		prefix: 'ResearchItemSetIconFilePath'
		body: 'ResearchItemSetIconFilePath(${1:int inResearchItemId}, ${2:string inFilePath})'
	'void ResearchItemSetMovieFilePath':
		prefix: 'ResearchItemSetMovieFilePath'
		body: 'ResearchItemSetMovieFilePath(${1:int inResearchItemId}, ${2:string inFilePath})'
	'void ResearchItemSetRecentlyPurchased':
		prefix: 'ResearchItemSetRecentlyPurchased'
		body: 'ResearchItemSetRecentlyPurchased(${1:int inResearchItemId}, ${2:bool inRecent})'
	'bool ResearchItemIsRecentlyPurchased':
		prefix: 'ResearchItemIsRecentlyPurchased'
		body: 'ResearchItemIsRecentlyPurchased(${1:int inResearchItemId})'
	'void ResearchItemPurchase':
		prefix: 'ResearchItemPurchase'
		body: 'ResearchItemPurchase(${1:int inResearchItemId})'
	'void ResearchItemSetSelected':
		prefix: 'ResearchItemSetSelected'
		body: 'ResearchItemSetSelected(${1:playergroup inPlayerGroup}, ${2:int inResearchItemId})'
	'int ResearchItemGetSelected':
		prefix: 'ResearchItemGetSelected'
		body: 'ResearchItemGetSelected(${1:int inPlayer})'
	'void TriggerAddEventResearchPanelExit':
		prefix: 'TriggerAddEventResearchPanelExit'
		body: 'TriggerAddEventResearchPanelExit(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventResearchPanelPurchase':
		prefix: 'TriggerAddEventResearchPanelPurchase'
		body: 'TriggerAddEventResearchPanelPurchase(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventResearchPanelSelectionChanged':
		prefix: 'TriggerAddEventResearchPanelSelectionChanged'
		body: 'TriggerAddEventResearchPanelSelectionChanged(${1:trigger t}, ${2:int player}, ${3:int inResearchItemId})'
	'soundlink SoundLink':
		prefix: 'SoundLink'
		body: 'SoundLink(${1:string soundId}, ${2:int soundIndex})'
	'string SoundLinkId':
		prefix: 'SoundLinkId'
		body: 'SoundLinkId(${1:soundlink soundId})'
	'int SoundLinkAsset':
		prefix: 'SoundLinkAsset'
		body: 'SoundLinkAsset(${1:soundlink soundId})'
	'void SoundPlayForPlayer':
		prefix: 'SoundPlayForPlayer'
		body: 'SoundPlayForPlayer(${1:soundlink link}, ${2:int inOwningPlayer}, ${3:playergroup audibleMask}, ${4:fixed volume}, ${5:fixed offset})'
	'void SoundPlayAtPointForPlayer':
		prefix: 'SoundPlayAtPointForPlayer'
		body: 'SoundPlayAtPointForPlayer(${1:soundlink link}, ${2:int inOwningPlayer}, ${3:playergroup audibleMask}, ${4:point inPoint}, ${5:fixed height}, ${6:fixed volume}, ${7:fixed offset})'
	'void SoundPlayOnUnitForPlayer':
		prefix: 'SoundPlayOnUnitForPlayer'
		body: 'SoundPlayOnUnitForPlayer(${1:soundlink link}, ${2:int inOwningPlayer}, ${3:playergroup audibleMask}, ${4:unit inUnit}, ${5:fixed height}, ${6:fixed volume}, ${7:fixed offset})'
	'void SoundPlaySceneForPlayer':
		prefix: 'SoundPlaySceneForPlayer'
		body: 'SoundPlaySceneForPlayer(${1:soundlink link}, ${2:int inOwningPlayer}, ${3:playergroup audibleMask}, ${4:unitgroup units}, ${5:string animProps})'
	'sound SoundLastPlayed':
		prefix: 'SoundLastPlayed'
		body: 'SoundLastPlayed()'
	'void SoundPause':
		prefix: 'SoundPause'
		body: 'SoundPause(${1:sound s}, ${2:bool pause})'
	'void SoundStop':
		prefix: 'SoundStop'
		body: 'SoundStop(${1:sound s}, ${2:bool fade})'
	'void SoundStopAllModelSounds':
		prefix: 'SoundStopAllModelSounds'
		body: 'SoundStopAllModelSounds()'
	'void SoundStopAllTriggerSounds':
		prefix: 'SoundStopAllTriggerSounds'
		body: 'SoundStopAllTriggerSounds(${1:bool fade})'
	'void SoundSetVolume':
		prefix: 'SoundSetVolume'
		body: 'SoundSetVolume(${1:sound s}, ${2:fixed volume})'
	'void SoundSetPosition':
		prefix: 'SoundSetPosition'
		body: 'SoundSetPosition(${1:sound s}, ${2:point position}, ${3:fixed height})'
	'void SoundSetOffset':
		prefix: 'SoundSetOffset'
		body: 'SoundSetOffset(${1:sound s}, ${2:fixed offset}, ${3:int offsetType})'
	'void SoundWait':
		prefix: 'SoundWait'
		body: 'SoundWait(${1:sound s}, ${2:fixed offset}, ${3:int offsetType})'
	'void SoundAttachUnit':
		prefix: 'SoundAttachUnit'
		body: 'SoundAttachUnit(${1:sound s}, ${2:unit u}, ${3:fixed height})'
	'void SoundLengthQuery':
		prefix: 'SoundLengthQuery'
		body: 'SoundLengthQuery(${1:soundlink info})'
	'void SoundLengthQueryWait':
		prefix: 'SoundLengthQueryWait'
		body: 'SoundLengthQueryWait()'
	'fixed SoundLengthSync':
		prefix: 'SoundLengthSync'
		body: 'SoundLengthSync(${1:soundlink info})'
	'void SoundChannelSetVolume':
		prefix: 'SoundChannelSetVolume'
		body: 'SoundChannelSetVolume(${1:playergroup players}, ${2:int channel}, ${3:fixed volume}, ${4:fixed duration})'
	'void SoundChannelMute':
		prefix: 'SoundChannelMute'
		body: 'SoundChannelMute(${1:playergroup players}, ${2:int channel}, ${3:bool mute})'
	'void SoundChannelPause':
		prefix: 'SoundChannelPause'
		body: 'SoundChannelPause(${1:playergroup players}, ${2:int channel}, ${3:bool pause})'
	'void SoundChannelStop':
		prefix: 'SoundChannelStop'
		body: 'SoundChannelStop(${1:playergroup players}, ${2:int channel})'
	'void SoundChannelDSPInsert':
		prefix: 'SoundChannelDSPInsert'
		body: 'SoundChannelDSPInsert(${1:playergroup players}, ${2:int channel}, ${3:string dsp})'
	'void SoundChannelDSPRemove':
		prefix: 'SoundChannelDSPRemove'
		body: 'SoundChannelDSPRemove(${1:playergroup players}, ${2:int channel}, ${3:string dsp})'
	'void SoundSetReverb':
		prefix: 'SoundSetReverb'
		body: 'SoundSetReverb(${1:string inReverbLink}, ${2:fixed inDuration}, ${3:bool inAmbient}, ${4:bool inGlobal})'
	'void SoundSetReverbForPlayers':
		prefix: 'SoundSetReverbForPlayers'
		body: 'SoundSetReverbForPlayers(${1:playergroup players}, ${2:string inReverbLink}, ${3:fixed inDuration}, ${4:bool inAmbient}, ${5:bool inGlobal})'
	'void SoundSetFactors':
		prefix: 'SoundSetFactors'
		body: 'SoundSetFactors(${1:fixed distance}, ${2:fixed doppler}, ${3:fixed rolloff})'
	'text SoundSubtitleText':
		prefix: 'SoundSubtitleText'
		body: 'SoundSubtitleText(${1:soundlink link})'
	'string SoundPortraitModel':
		prefix: 'SoundPortraitModel'
		body: 'SoundPortraitModel(${1:soundlink link})'
	'void SoundSetListenerGender':
		prefix: 'SoundSetListenerGender'
		body: 'SoundSetListenerGender(${1:soundlink link}, ${2:int gender})'
	'void SoundPlaySceneFile':
		prefix: 'SoundPlaySceneFile'
		body: 'SoundPlaySceneFile(${1:soundlink link}, ${2:playergroup players}, ${3:string sceneFile}, ${4:string camera})'
	'void SoundtrackDefault':
		prefix: 'SoundtrackDefault'
		body: 'SoundtrackDefault(${1:playergroup players}, ${2:int category}, ${3:string soundtrack}, ${4:int cue}, ${5:int index})'
	'void SoundtrackPlay':
		prefix: 'SoundtrackPlay'
		body: 'SoundtrackPlay(${1:playergroup players}, ${2:int category}, ${3:string soundtrack}, ${4:int cue}, ${5:int index}, ${6:bool makeDefault})'
	'void SoundtrackPause':
		prefix: 'SoundtrackPause'
		body: 'SoundtrackPause(${1:playergroup players}, ${2:int category}, ${3:bool pause}, ${4:bool fade})'
	'void SoundtrackSetContinuous':
		prefix: 'SoundtrackSetContinuous'
		body: 'SoundtrackSetContinuous(${1:playergroup players}, ${2:int category}, ${3:bool continuous})'
	'void SoundtrackSetDelay':
		prefix: 'SoundtrackSetDelay'
		body: 'SoundtrackSetDelay(${1:playergroup players}, ${2:int category}, ${3:fixed delay})'
	'void SoundtrackStop':
		prefix: 'SoundtrackStop'
		body: 'SoundtrackStop(${1:playergroup players}, ${2:int category}, ${3:bool fade})'
	'void SoundtrackStopCurrent':
		prefix: 'SoundtrackStopCurrent'
		body: 'SoundtrackStopCurrent(${1:playergroup players}, ${2:int category}, ${3:bool fade})'
	'void SoundtrackWait':
		prefix: 'SoundtrackWait'
		body: 'SoundtrackWait(${1:string soundtrack})'
	'void StoryMode':
		prefix: 'StoryMode'
		body: 'StoryMode(${1:playergroup players}, ${2:bool storyMode})'
	'void StorySetChange':
		prefix: 'StorySetChange'
		body: 'StorySetChange()'
	'void StoryCreatePlanetPanel':
		prefix: 'StoryCreatePlanetPanel'
		body: 'StoryCreatePlanetPanel()'
	'void CampaignMode':
		prefix: 'CampaignMode'
		body: 'CampaignMode(${1:playergroup players}, ${2:bool campaignMode})'
	'int StringLength':
		prefix: 'StringLength'
		body: 'StringLength(${1:string s})'
	'string StringCase':
		prefix: 'StringCase'
		body: 'StringCase(${1:string s}, ${2:bool upper})'
	'text TextCase':
		prefix: 'TextCase'
		body: 'TextCase(${1:text t}, ${2:bool upper})'
	'string StringSub':
		prefix: 'StringSub'
		body: 'StringSub(${1:string s}, ${2:int start}, ${3:int end})'
	'bool StringEqual':
		prefix: 'StringEqual'
		body: 'StringEqual(${1:string s1}, ${2:string s2}, ${3:bool caseSens})'
	'int StringCompare':
		prefix: 'StringCompare'
		body: 'StringCompare(${1:string s1}, ${2:string s2}, ${3:bool caseSens})'
	'int StringFind':
		prefix: 'StringFind'
		body: 'StringFind(${1:string s1}, ${2:string s2}, ${3:bool caseSens})'
	'bool StringContains':
		prefix: 'StringContains'
		body: 'StringContains(${1:string s1}, ${2:string s2}, ${3:int location}, ${4:bool caseSens})'
	'string StringWord':
		prefix: 'StringWord'
		body: 'StringWord(${1:string s}, ${2:int index})'
	'string StringReplace':
		prefix: 'StringReplace'
		body: 'StringReplace(${1:string s}, ${2:string replace}, ${3:int start}, ${4:int end})'
	'string StringReplaceWord':
		prefix: 'StringReplaceWord'
		body: 'StringReplaceWord(${1:string s}, ${2:string word}, ${3:string replace}, ${4:int maxCount}, ${5:bool caseSens})'
	'text TextReplaceWord':
		prefix: 'TextReplaceWord'
		body: 'TextReplaceWord(${1:text t}, ${2:text word}, ${3:text replace}, ${4:int maxCount}, ${5:bool caseSens})'
	'text StringExternal':
		prefix: 'StringExternal'
		body: 'StringExternal(${1:string s})'
	'text StringExternalHotkey':
		prefix: 'StringExternalHotkey'
		body: 'StringExternalHotkey(${1:string s})'
	'text StringExternalAsset':
		prefix: 'StringExternalAsset'
		body: 'StringExternalAsset(${1:string s})'
	'text StringToText':
		prefix: 'StringToText'
		body: 'StringToText(${1:string s})'
	'void TextExpressionSetToken':
		prefix: 'TextExpressionSetToken'
		body: 'TextExpressionSetToken(${1:string id}, ${2:string code}, ${3:text value})'
	'text TextExpressionAssemble':
		prefix: 'TextExpressionAssemble'
		body: 'TextExpressionAssemble(${1:string id})'
	'text TextWithColor':
		prefix: 'TextWithColor'
		body: 'TextWithColor(${1:text t}, ${2:color c})'
	'text TextTimeFormat':
		prefix: 'TextTimeFormat'
		body: 'TextTimeFormat(${1:text inFormat}, ${2:int inSecs})'
	'void TechTreeAbilityAllow':
		prefix: 'TechTreeAbilityAllow'
		body: 'TechTreeAbilityAllow(${1:int player}, ${2:abilcmd inAbilCmd}, ${3:bool allow})'
	'int TechTreeAbilityCount':
		prefix: 'TechTreeAbilityCount'
		body: 'TechTreeAbilityCount(${1:int player}, ${2:string abilType}, ${3:int countType})'
	'bool TechTreeAbilityIsAllowed':
		prefix: 'TechTreeAbilityIsAllowed'
		body: 'TechTreeAbilityIsAllowed(${1:int player}, ${2:abilcmd inAbilCmd})'
	'void TechTreeBehaviorAllow':
		prefix: 'TechTreeBehaviorAllow'
		body: 'TechTreeBehaviorAllow(${1:int player}, ${2:string behaviorType}, ${3:bool allow})'
	'int TechTreeBehaviorCount':
		prefix: 'TechTreeBehaviorCount'
		body: 'TechTreeBehaviorCount(${1:int player}, ${2:string behaviorType}, ${3:int countType})'
	'bool TechTreeBehaviorIsAllowed':
		prefix: 'TechTreeBehaviorIsAllowed'
		body: 'TechTreeBehaviorIsAllowed(${1:int player}, ${2:string behaviorType})'
	'abilcmd TechTreeBehaviorProducedAbilCmd':
		prefix: 'TechTreeBehaviorProducedAbilCmd'
		body: 'TechTreeBehaviorProducedAbilCmd(${1:string behaviorType}, ${2:int index})'
	'int TechTreeBehaviorProducedAbilCmdCount':
		prefix: 'TechTreeBehaviorProducedAbilCmdCount'
		body: 'TechTreeBehaviorProducedAbilCmdCount(${1:string behaviorType})'
	'void TechTreeRequirementsEnable':
		prefix: 'TechTreeRequirementsEnable'
		body: 'TechTreeRequirementsEnable(${1:int player}, ${2:bool enable})'
	'bool TechTreeRequirementsEnabled':
		prefix: 'TechTreeRequirementsEnabled'
		body: 'TechTreeRequirementsEnabled(${1:int player})'
	'void TechTreeSpecificRequirementEnable':
		prefix: 'TechTreeSpecificRequirementEnable'
		body: 'TechTreeSpecificRequirementEnable(${1:int player}, ${2:string requirementName}, ${3:bool enable})'
	'bool TechTreeSpecificRequirementEnabled':
		prefix: 'TechTreeSpecificRequirementEnabled'
		body: 'TechTreeSpecificRequirementEnabled(${1:int player}, ${2:string requirementName})'
	'void TechTreeRestrictionsEnable':
		prefix: 'TechTreeRestrictionsEnable'
		body: 'TechTreeRestrictionsEnable(${1:int player}, ${2:bool enable})'
	'bool TechTreeRestrictionsEnabled':
		prefix: 'TechTreeRestrictionsEnabled'
		body: 'TechTreeRestrictionsEnabled(${1:int player})'
	'void TechTreeUnitAllow':
		prefix: 'TechTreeUnitAllow'
		body: 'TechTreeUnitAllow(${1:int player}, ${2:string unitType}, ${3:bool allow})'
	'int TechTreeUnitCount':
		prefix: 'TechTreeUnitCount'
		body: 'TechTreeUnitCount(${1:int player}, ${2:string unitType}, ${3:int countType})'
	'int TechTreeUnitAliasCount':
		prefix: 'TechTreeUnitAliasCount'
		body: 'TechTreeUnitAliasCount(${1:int player}, ${2:string unitType}, ${3:int countType})'
	'int TechTreeUnitCountEx':
		prefix: 'TechTreeUnitCountEx'
		body: 'TechTreeUnitCountEx(${1:int player}, ${2:string unitType}, ${3:string equivType}, ${4:int countType})'
	'bool TechTreeUnitIsAllowed':
		prefix: 'TechTreeUnitIsAllowed'
		body: 'TechTreeUnitIsAllowed(${1:int player}, ${2:string unitType})'
	'void TechTreeUnitHelp':
		prefix: 'TechTreeUnitHelp'
		body: 'TechTreeUnitHelp(${1:int player}, ${2:string unitType}, ${3:bool display})'
	'void TechTreeUnitHelpDefault':
		prefix: 'TechTreeUnitHelpDefault'
		body: 'TechTreeUnitHelpDefault(${1:int player}, ${2:bool display})'
	'abilcmd TechTreeUnitProducedAbilCmd':
		prefix: 'TechTreeUnitProducedAbilCmd'
		body: 'TechTreeUnitProducedAbilCmd(${1:string unitType}, ${2:int index})'
	'int TechTreeUnitProducedAbilCmdCount':
		prefix: 'TechTreeUnitProducedAbilCmdCount'
		body: 'TechTreeUnitProducedAbilCmdCount(${1:string unitType})'
	'string TechTreeUnitProducesUnit':
		prefix: 'TechTreeUnitProducesUnit'
		body: 'TechTreeUnitProducesUnit(${1:string unitType}, ${2:int index})'
	'int TechTreeUnitProducesUnitCount':
		prefix: 'TechTreeUnitProducesUnitCount'
		body: 'TechTreeUnitProducesUnitCount(${1:string unitType})'
	'string TechTreeUnitProducesUpgrade':
		prefix: 'TechTreeUnitProducesUpgrade'
		body: 'TechTreeUnitProducesUpgrade(${1:string unitType}, ${2:int index})'
	'int TechTreeUnitProducesUpgradeCount':
		prefix: 'TechTreeUnitProducesUpgradeCount'
		body: 'TechTreeUnitProducesUpgradeCount(${1:string unitType})'
	'void TechTreeUpgradeAddLevel':
		prefix: 'TechTreeUpgradeAddLevel'
		body: 'TechTreeUpgradeAddLevel(${1:int player}, ${2:string upgradeType}, ${3:int levels})'
	'void TechTreeUpgradeAllow':
		prefix: 'TechTreeUpgradeAllow'
		body: 'TechTreeUpgradeAllow(${1:int player}, ${2:string upgradeType}, ${3:bool allow})'
	'int TechTreeUpgradeCount':
		prefix: 'TechTreeUpgradeCount'
		body: 'TechTreeUpgradeCount(${1:int player}, ${2:string upgradeType}, ${3:int countType})'
	'bool TechTreeUpgradeIsAllowed':
		prefix: 'TechTreeUpgradeIsAllowed'
		body: 'TechTreeUpgradeIsAllowed(${1:int player}, ${2:string upgradeType})'
	'abilcmd TechTreeUpgradeProducedAbilCmd':
		prefix: 'TechTreeUpgradeProducedAbilCmd'
		body: 'TechTreeUpgradeProducedAbilCmd(${1:string upgradeType}, ${2:int index})'
	'int TechTreeUpgradeProducedAbilCmdCount':
		prefix: 'TechTreeUpgradeProducedAbilCmdCount'
		body: 'TechTreeUpgradeProducedAbilCmdCount(${1:string upgradeType})'
	'int TextTagCreate':
		prefix: 'TextTagCreate'
		body: 'TextTagCreate(${1:text inText}, ${2:int inFontSize}, ${3:point inPoint}, ${4:fixed inHeightOffset}, ${5:bool inShow}, ${6:bool useFogofWar}, ${7:playergroup inPlayers})'
	'int TextTagLastCreated':
		prefix: 'TextTagLastCreated'
		body: 'TextTagLastCreated()'
	'void TextTagDestroy':
		prefix: 'TextTagDestroy'
		body: 'TextTagDestroy(${1:int inTag})'
	'void TextTagSetText':
		prefix: 'TextTagSetText'
		body: 'TextTagSetText(${1:int inTag}, ${2:text inText})'
	'void TextTagSetTextShadow':
		prefix: 'TextTagSetTextShadow'
		body: 'TextTagSetTextShadow(${1:int inTag}, ${2:bool inVal})'
	'void TextTagSetFontSize':
		prefix: 'TextTagSetFontSize'
		body: 'TextTagSetFontSize(${1:int inTag}, ${2:int inFontSize})'
	'void TextTagSetPosition':
		prefix: 'TextTagSetPosition'
		body: 'TextTagSetPosition(${1:int inTag}, ${2:point inPoint}, ${3:fixed inHeightOffset})'
	'void TextTagAttachToUnit':
		prefix: 'TextTagAttachToUnit'
		body: 'TextTagAttachToUnit(${1:int inTag}, ${2:unit inUnit}, ${3:fixed inHeightOffset})'
	'void TextTagAttachToUnitPoint':
		prefix: 'TextTagAttachToUnitPoint'
		body: 'TextTagAttachToUnitPoint(${1:int inTag}, ${2:unit inUnit}, ${3:string attachmentPoint}, ${4:int offsetX}, ${5:int offsetY})'
	'void TextTagSetVelocity':
		prefix: 'TextTagSetVelocity'
		body: 'TextTagSetVelocity(${1:int inTag}, ${2:fixed inSpeed}, ${3:fixed inAngle})'
	'void TextTagSetGravity':
		prefix: 'TextTagSetGravity'
		body: 'TextTagSetGravity(${1:int inTag}, ${2:fixed inGravity})'
	'void TextTagSetAlignment':
		prefix: 'TextTagSetAlignment'
		body: 'TextTagSetAlignment(${1:int inTag}, ${2:int inHoriz}, ${3:int inVert})'
	'void TextTagSetTextAlignment':
		prefix: 'TextTagSetTextAlignment'
		body: 'TextTagSetTextAlignment(${1:int inTag}, ${2:int inHoriz}, ${3:int inVert})'
	'void TextTagSetMaxSize':
		prefix: 'TextTagSetMaxSize'
		body: 'TextTagSetMaxSize(${1:int inTag}, ${2:fixed inWidth}, ${3:fixed inHeight})'
	'void TextTagShowBackground':
		prefix: 'TextTagShowBackground'
		body: 'TextTagShowBackground(${1:int inTag}, ${2:bool inShow})'
	'void TextTagSetBackgroundImage':
		prefix: 'TextTagSetBackgroundImage'
		body: 'TextTagSetBackgroundImage(${1:int inTag}, ${2:string inPath}, ${3:bool inTiled})'
	'void TextTagSetBackgroundBorderSize':
		prefix: 'TextTagSetBackgroundBorderSize'
		body: 'TextTagSetBackgroundBorderSize(${1:int inTag}, ${2:fixed inX}, ${3:fixed inY})'
	'void TextTagSetBackgroundOffset':
		prefix: 'TextTagSetBackgroundOffset'
		body: 'TextTagSetBackgroundOffset(${1:int inTag}, ${2:fixed inX}, ${3:fixed inY})'
	'void TextTagSetEdgeImage':
		prefix: 'TextTagSetEdgeImage'
		body: 'TextTagSetEdgeImage(${1:int inTag}, ${2:int inEdge}, ${3:string inPath}, ${4:int inXOffset}, ${5:int inYOffset})'
	'void TextTagShow':
		prefix: 'TextTagShow'
		body: 'TextTagShow(${1:int inTag}, ${2:playergroup inPlayers}, ${3:bool inShow})'
	'bool TextTagVisible':
		prefix: 'TextTagVisible'
		body: 'TextTagVisible(${1:int inTag}, ${2:int inPlayer})'
	'void TextTagPause':
		prefix: 'TextTagPause'
		body: 'TextTagPause(${1:int inTag}, ${2:bool inPause})'
	'void TextTagFogofWar':
		prefix: 'TextTagFogofWar'
		body: 'TextTagFogofWar(${1:int inTag}, ${2:bool inFog})'
	'void TextTagSetFogVisibility':
		prefix: 'TextTagSetFogVisibility'
		body: 'TextTagSetFogVisibility(${1:int inTag}, ${2:int inVisType})'
	'void TextTagSetColor':
		prefix: 'TextTagSetColor'
		body: 'TextTagSetColor(${1:int inTag}, ${2:int inType}, ${3:color inColor})'
	'void TextTagSetFadedTransparency':
		prefix: 'TextTagSetFadedTransparency'
		body: 'TextTagSetFadedTransparency(${1:int inTag}, ${2:int inType}, ${3:fixed inTransparency})'
	'void TextTagSetTime':
		prefix: 'TextTagSetTime'
		body: 'TextTagSetTime(${1:int inTag}, ${2:int inType}, ${3:fixed inVal})'
	'void Wait':
		prefix: 'Wait'
		body: 'Wait(${1:fixed inSecs}, ${2:int inTimeType})'
	'void AITimePause':
		prefix: 'AITimePause'
		body: 'AITimePause(${1:bool inPause})'
	'bool AITimeIsPaused':
		prefix: 'AITimeIsPaused'
		body: 'AITimeIsPaused()'
	'timer TimerCreate':
		prefix: 'TimerCreate'
		body: 'TimerCreate()'
	'void TimerStart':
		prefix: 'TimerStart'
		body: 'TimerStart(${1:timer t}, ${2:fixed duration}, ${3:bool periodic}, ${4:int timeType})'
	'void TimerRestart':
		prefix: 'TimerRestart'
		body: 'TimerRestart(${1:timer t})'
	'timer TimerLastStarted':
		prefix: 'TimerLastStarted'
		body: 'TimerLastStarted()'
	'void TimerPause':
		prefix: 'TimerPause'
		body: 'TimerPause(${1:timer t}, ${2:bool pause})'
	'bool TimerIsPaused':
		prefix: 'TimerIsPaused'
		body: 'TimerIsPaused(${1:timer t})'
	'fixed TimerGetElapsed':
		prefix: 'TimerGetElapsed'
		body: 'TimerGetElapsed(${1:timer t})'
	'fixed TimerGetRemaining':
		prefix: 'TimerGetRemaining'
		body: 'TimerGetRemaining(${1:timer t})'
	'fixed TimerGetDuration':
		prefix: 'TimerGetDuration'
		body: 'TimerGetDuration(${1:timer t})'
	'void TriggerAddEventTimer':
		prefix: 'TriggerAddEventTimer'
		body: 'TriggerAddEventTimer(${1:trigger inTrigger}, ${2:timer inTimer})'
	'void TriggerAddEventTimeElapsed':
		prefix: 'TriggerAddEventTimeElapsed'
		body: 'TriggerAddEventTimeElapsed(${1:trigger inTrigger}, ${2:fixed inTime}, ${3:int inTimeType})'
	'void TriggerAddEventTimePeriodic':
		prefix: 'TriggerAddEventTimePeriodic'
		body: 'TriggerAddEventTimePeriodic(${1:trigger inTrigger}, ${2:fixed inTime}, ${3:int inTimeType})'
	'timer EventTimer':
		prefix: 'EventTimer'
		body: 'EventTimer()'
	'int TimerWindowCreate':
		prefix: 'TimerWindowCreate'
		body: 'TimerWindowCreate(${1:timer inTimer}, ${2:text inTitle}, ${3:bool inShow}, ${4:bool inShowElapsed})'
	'int TimerWindowLastCreated':
		prefix: 'TimerWindowLastCreated'
		body: 'TimerWindowLastCreated()'
	'void TimerWindowDestroy':
		prefix: 'TimerWindowDestroy'
		body: 'TimerWindowDestroy(${1:int inWindow})'
	'void TimerWindowSetAnchor':
		prefix: 'TimerWindowSetAnchor'
		body: 'TimerWindowSetAnchor(${1:int inWindow}, ${2:int inAnchor}, ${3:int inOffsetX}, ${4:int inOffsetY})'
	'void TimerWindowSetPosition':
		prefix: 'TimerWindowSetPosition'
		body: 'TimerWindowSetPosition(${1:int inWindow}, ${2:int inX}, ${3:int inY})'
	'void TimerWindowResetPosition':
		prefix: 'TimerWindowResetPosition'
		body: 'TimerWindowResetPosition(${1:int inWindow})'
	'void TimerWindowShow':
		prefix: 'TimerWindowShow'
		body: 'TimerWindowShow(${1:int inWindow}, ${2:playergroup inPlayers}, ${3:bool inShow})'
	'bool TimerWindowVisible':
		prefix: 'TimerWindowVisible'
		body: 'TimerWindowVisible(${1:int inWindow}, ${2:int inPlayer})'
	'void TimerWindowSetTimer':
		prefix: 'TimerWindowSetTimer'
		body: 'TimerWindowSetTimer(${1:int inWindow}, ${2:timer inTimer})'
	'void TimerWindowSetTitle':
		prefix: 'TimerWindowSetTitle'
		body: 'TimerWindowSetTitle(${1:int inWindow}, ${2:text inTitle})'
	'void TimerWindowSetStyle':
		prefix: 'TimerWindowSetStyle'
		body: 'TimerWindowSetStyle(${1:int inWindow}, ${2:int inStyle}, ${3:bool inShowElapsed})'
	'void TimerWindowSetGapWidth':
		prefix: 'TimerWindowSetGapWidth'
		body: 'TimerWindowSetGapWidth(${1:int inWindow}, ${2:int inWidth})'
	'void TimerWindowSetFixedHeight':
		prefix: 'TimerWindowSetFixedHeight'
		body: 'TimerWindowSetFixedHeight(${1:int inWindow}, ${2:int inHeight})'
	'void TimerWindowSetFormat':
		prefix: 'TimerWindowSetFormat'
		body: 'TimerWindowSetFormat(${1:int inWindow}, ${2:text inFormat})'
	'void TimerWindowSetColor':
		prefix: 'TimerWindowSetColor'
		body: 'TimerWindowSetColor(${1:int inWindow}, ${2:int inType}, ${3:color inColor}, ${4:fixed transparency})'
	'void TimerWindowShowBorder':
		prefix: 'TimerWindowShowBorder'
		body: 'TimerWindowShowBorder(${1:int inWindow}, ${2:bool inShow})'
	'void TimerWindowShowProgressBar':
		prefix: 'TimerWindowShowProgressBar'
		body: 'TimerWindowShowProgressBar(${1:int inWindow}, ${2:bool inShow})'
	'void TimerWindowSetProgressColor':
		prefix: 'TimerWindowSetProgressColor'
		body: 'TimerWindowSetProgressColor(${1:int inWindow}, ${2:color inColor}, ${3:int inStep})'
	'void TimerWindowSetImageType':
		prefix: 'TimerWindowSetImageType'
		body: 'TimerWindowSetImageType(${1:int inWindow}, ${2:int inImage}, ${3:int inType})'
	'transmissionsource TransmissionSource':
		prefix: 'TransmissionSource'
		body: 'TransmissionSource()'
	'transmissionsource TransmissionSourceFromUnit':
		prefix: 'TransmissionSourceFromUnit'
		body: 'TransmissionSourceFromUnit(${1:unit u}, ${2:bool flash}, ${3:bool overridePortrait}, ${4:string anim})'
	'transmissionsource TransmissionSourceFromUnitType':
		prefix: 'TransmissionSourceFromUnitType'
		body: 'TransmissionSourceFromUnitType(${1:string unitType}, ${2:bool overridePortrait})'
	'transmissionsource TransmissionSourceFromModel':
		prefix: 'TransmissionSourceFromModel'
		body: 'TransmissionSourceFromModel(${1:string modelLink})'
	'transmissionsource TransmissionSourceFromMovie':
		prefix: 'TransmissionSourceFromMovie'
		body: 'TransmissionSourceFromMovie(${1:string assetLink}, ${2:bool subtitles})'
	'void TransmissionSourceSetPauseAllowed':
		prefix: 'TransmissionSourceSetPauseAllowed'
		body: 'TransmissionSourceSetPauseAllowed(${1:transmissionsource source}, ${2:bool allowed})'
	'void TransmissionSourceSetStreamingAllowed':
		prefix: 'TransmissionSourceSetStreamingAllowed'
		body: 'TransmissionSourceSetStreamingAllowed(${1:transmissionsource source}, ${2:bool allowed})'
	'void TransmissionSourceSetBypassMessageLog':
		prefix: 'TransmissionSourceSetBypassMessageLog'
		body: 'TransmissionSourceSetBypassMessageLog(${1:transmissionsource source}, ${2:bool bypass})'
	'int TransmissionSendForPlayer':
		prefix: 'TransmissionSendForPlayer'
		body: 'TransmissionSendForPlayer(${1:playergroup players}, ${2:transmissionsource source}, ${3:int targetPortrait}, ${4:string actorLink}, ${5:string targetAnim}, ${6:soundlink soundLink}, ${7:text speaker}, ${8:text subtitle}, ${9:fixed duration}, ${10:int durationType}, ${11:bool waitUntilDone}, ${12:int owningPlayer})'
	'int TransmissionLastSent':
		prefix: 'TransmissionLastSent'
		body: 'TransmissionLastSent()'
	'void TransmissionClear':
		prefix: 'TransmissionClear'
		body: 'TransmissionClear(${1:int t})'
	'bool TransmissionPlayerHasActiveTransmission':
		prefix: 'TransmissionPlayerHasActiveTransmission'
		body: 'TransmissionPlayerHasActiveTransmission(${1:int inPlayerId})'
	'void TransmissionClearAll':
		prefix: 'TransmissionClearAll'
		body: 'TransmissionClearAll()'
	'void TransmissionClearGroup':
		prefix: 'TransmissionClearGroup'
		body: 'TransmissionClearGroup(${1:playergroup players})'
	'void TransmissionSetOption':
		prefix: 'TransmissionSetOption'
		body: 'TransmissionSetOption(${1:int inOptionIndex}, ${2:bool inValue})'
	'void TransmissionWait':
		prefix: 'TransmissionWait'
		body: 'TransmissionWait(${1:int t}, ${2:fixed offset})'
	'bool TransmissionIsComplete':
		prefix: 'TransmissionIsComplete'
		body: 'TransmissionIsComplete(${1:int t})'
	'trigger TriggerCreate':
		prefix: 'TriggerCreate'
		body: 'TriggerCreate(${1:string inFunction})'
	'trigger TriggerFind':
		prefix: 'TriggerFind'
		body: 'TriggerFind(${1:string inFunction})'
	'void TriggerDestroy':
		prefix: 'TriggerDestroy'
		body: 'TriggerDestroy(${1:trigger t})'
	'void TriggerEnable':
		prefix: 'TriggerEnable'
		body: 'TriggerEnable(${1:trigger t}, ${2:bool enable})'
	'bool TriggerIsEnabled':
		prefix: 'TriggerIsEnabled'
		body: 'TriggerIsEnabled(${1:trigger t})'
	'void TriggerResetCounts':
		prefix: 'TriggerResetCounts'
		body: 'TriggerResetCounts(${1:trigger t})'
	'int TriggerGetEvalCount':
		prefix: 'TriggerGetEvalCount'
		body: 'TriggerGetEvalCount(${1:trigger t})'
	'int TriggerGetExecCount':
		prefix: 'TriggerGetExecCount'
		body: 'TriggerGetExecCount(${1:trigger t})'
	'string TriggerGetFunction':
		prefix: 'TriggerGetFunction'
		body: 'TriggerGetFunction(${1:trigger t})'
	'bool TriggerEvaluate':
		prefix: 'TriggerEvaluate'
		body: 'TriggerEvaluate(${1:trigger t})'
	'void TriggerExecute':
		prefix: 'TriggerExecute'
		body: 'TriggerExecute(${1:trigger t}, ${2:bool testConds}, ${3:bool waitUntilDone})'
	'trigger TriggerGetCurrent':
		prefix: 'TriggerGetCurrent'
		body: 'TriggerGetCurrent()'
	'int TriggerActiveCount':
		prefix: 'TriggerActiveCount'
		body: 'TriggerActiveCount(${1:trigger t})'
	'void TriggerStop':
		prefix: 'TriggerStop'
		body: 'TriggerStop(${1:trigger t})'
	'void TriggerWaitForTrigger':
		prefix: 'TriggerWaitForTrigger'
		body: 'TriggerWaitForTrigger(${1:trigger t}, ${2:bool waitUntilDone})'
	'void TriggerCurrentTriggerThreadSetFlags':
		prefix: 'TriggerCurrentTriggerThreadSetFlags'
		body: 'TriggerCurrentTriggerThreadSetFlags(${1:int f}, ${2:bool on})'
	'void TriggerQueueEnter':
		prefix: 'TriggerQueueEnter'
		body: 'TriggerQueueEnter()'
	'void TriggerQueueExit':
		prefix: 'TriggerQueueExit'
		body: 'TriggerQueueExit()'
	'bool TriggerQueueIsEmpty':
		prefix: 'TriggerQueueIsEmpty'
		body: 'TriggerQueueIsEmpty()'
	'void TriggerQueuePause':
		prefix: 'TriggerQueuePause'
		body: 'TriggerQueuePause(${1:bool pause})'
	'void TriggerQueueClear':
		prefix: 'TriggerQueueClear'
		body: 'TriggerQueueClear(${1:int activeOption})'
	'void TriggerSkippableBegin':
		prefix: 'TriggerSkippableBegin'
		body: 'TriggerSkippableBegin(${1:playergroup allowedToSkip}, ${2:int requiredCount}, ${3:trigger onSkip}, ${4:bool testConds}, ${5:bool waitUntilDone})'
	'void TriggerSkippableEnd':
		prefix: 'TriggerSkippableEnd'
		body: 'TriggerSkippableEnd()'
	'void TriggerAddEventTriggerSkipped':
		prefix: 'TriggerAddEventTriggerSkipped'
		body: 'TriggerAddEventTriggerSkipped(${1:trigger t}, ${2:int inPlayer}, ${3:trigger inTrigger})'
	'trigger EventTrigger':
		prefix: 'EventTrigger'
		body: 'EventTrigger()'
	'string TriggerEventParamName':
		prefix: 'TriggerEventParamName'
		body: 'TriggerEventParamName(${1:string eventName}, ${2:string paramName})'
	'void TriggerSendEvent':
		prefix: 'TriggerSendEvent'
		body: 'TriggerSendEvent(${1:string name})'
	'void TriggerAddEventGeneric':
		prefix: 'TriggerAddEventGeneric'
		body: 'TriggerAddEventGeneric(${1:trigger t}, ${2:string name})'
	'string EventGenericName':
		prefix: 'EventGenericName'
		body: 'EventGenericName()'
	'void TriggerDebugWindowOpen':
		prefix: 'TriggerDebugWindowOpen'
		body: 'TriggerDebugWindowOpen(${1:bool open})'
	'void TriggerDebugOutput':
		prefix: 'TriggerDebugOutput'
		body: 'TriggerDebugOutput(${1:int type}, ${2:text inText}, ${3:bool includeGameUI})'
	'void TriggerDebugOutputEnable':
		prefix: 'TriggerDebugOutputEnable'
		body: 'TriggerDebugOutputEnable(${1:bool inEnable})'
	'void TriggerDebugEnableType':
		prefix: 'TriggerDebugEnableType'
		body: 'TriggerDebugEnableType(${1:int type}, ${2:bool enable})'
	'void TriggerDebugSetTypeName':
		prefix: 'TriggerDebugSetTypeName'
		body: 'TriggerDebugSetTypeName(${1:int type}, ${2:text inText})'
	'void TriggerDebugSetTypeColor':
		prefix: 'TriggerDebugSetTypeColor'
		body: 'TriggerDebugSetTypeColor(${1:int type}, ${2:color c})'
	'void TriggerDebugSetTypeFile':
		prefix: 'TriggerDebugSetTypeFile'
		body: 'TriggerDebugSetTypeFile(${1:int type}, ${2:string file})'
	'void TriggerDebugSetTypeFilter':
		prefix: 'TriggerDebugSetTypeFilter'
		body: 'TriggerDebugSetTypeFilter(${1:int type}, ${2:int filter}, ${3:bool enabled})'
	'unitgroup UnitCreate':
		prefix: 'UnitCreate'
		body: 'UnitCreate(${1:int inCount}, ${2:string inUnitType}, ${3:int inCreateStyle}, ${4:int inPlayer}, ${5:point inPos}, ${6:fixed inFacing})'
	'unit UnitLastCreated':
		prefix: 'UnitLastCreated'
		body: 'UnitLastCreated()'
	'unitgroup UnitLastCreatedGroup':
		prefix: 'UnitLastCreatedGroup'
		body: 'UnitLastCreatedGroup()'
	'unit UnitFromId':
		prefix: 'UnitFromId'
		body: 'UnitFromId(${1:int id})'
	'void UnitLoadModel':
		prefix: 'UnitLoadModel'
		body: 'UnitLoadModel(${1:unit inUnit})'
	'void UnitUnloadModel':
		prefix: 'UnitUnloadModel'
		body: 'UnitUnloadModel(${1:unit inUnit})'
	'void UnitRemove':
		prefix: 'UnitRemove'
		body: 'UnitRemove(${1:unit inUnit})'
	'void UnitKill':
		prefix: 'UnitKill'
		body: 'UnitKill(${1:unit inUnit})'
	'void UnitRevive':
		prefix: 'UnitRevive'
		body: 'UnitRevive(${1:unit inUnit})'
	'bool UnitIsAlive':
		prefix: 'UnitIsAlive'
		body: 'UnitIsAlive(${1:unit inUnit})'
	'bool UnitIsValid':
		prefix: 'UnitIsValid'
		body: 'UnitIsValid(${1:unit inUnit})'
	'void UnitWaitUntilIdle':
		prefix: 'UnitWaitUntilIdle'
		body: 'UnitWaitUntilIdle(${1:unit inUnit}, ${2:bool inIdle})'
	'text UnitGetName':
		prefix: 'UnitGetName'
		body: 'UnitGetName(${1:unit inUnit})'
	'int UnitGetTag':
		prefix: 'UnitGetTag'
		body: 'UnitGetTag(${1:unit inUnit})'
	'string UnitGetType':
		prefix: 'UnitGetType'
		body: 'UnitGetType(${1:unit inUnit})'
	'void UnitShowKillDisplay':
		prefix: 'UnitShowKillDisplay'
		body: 'UnitShowKillDisplay(${1:unit inUnit}, ${2:int inKillDisplay})'
	'int UnitGetOwner':
		prefix: 'UnitGetOwner'
		body: 'UnitGetOwner(${1:unit inUnit})'
	'void UnitSetOwner':
		prefix: 'UnitSetOwner'
		body: 'UnitSetOwner(${1:unit inUnit}, ${2:int inPlayer}, ${3:bool inChangeColor})'
	'void UnitSetTeamColorIndex':
		prefix: 'UnitSetTeamColorIndex'
		body: 'UnitSetTeamColorIndex(${1:unit inUnit}, ${2:int inIndex})'
	'void UnitResetTeamColorIndex':
		prefix: 'UnitResetTeamColorIndex'
		body: 'UnitResetTeamColorIndex(${1:unit inUnit})'
	'point UnitGetPosition':
		prefix: 'UnitGetPosition'
		body: 'UnitGetPosition(${1:unit inUnit})'
	'point UnitGetGoalPosition':
		prefix: 'UnitGetGoalPosition'
		body: 'UnitGetGoalPosition(${1:unit inUnit})'
	'void UnitSetPosition':
		prefix: 'UnitSetPosition'
		body: 'UnitSetPosition(${1:unit inUnit}, ${2:point inPos}, ${3:bool blend})'
	'fixed UnitGetHeight':
		prefix: 'UnitGetHeight'
		body: 'UnitGetHeight(${1:unit inUnit})'
	'void UnitSetHeight':
		prefix: 'UnitSetHeight'
		body: 'UnitSetHeight(${1:unit inUnit}, ${2:fixed inHeight}, ${3:fixed inDuration})'
	'fixed UnitGetFacing':
		prefix: 'UnitGetFacing'
		body: 'UnitGetFacing(${1:unit inUnit})'
	'void UnitSetFacing':
		prefix: 'UnitSetFacing'
		body: 'UnitSetFacing(${1:unit inUnit}, ${2:fixed inFacing}, ${3:fixed inDuration})'
	'point UnitGetAttachmentPoint':
		prefix: 'UnitGetAttachmentPoint'
		body: 'UnitGetAttachmentPoint(${1:unit inUnit}, ${2:string attachment})'
	'void UnitResetSpeed':
		prefix: 'UnitResetSpeed'
		body: 'UnitResetSpeed(${1:unit inUnit})'
	'void UnitSetScale':
		prefix: 'UnitSetScale'
		body: 'UnitSetScale(${1:unit inUnit}, ${2:fixed x}, ${3:fixed y}, ${4:fixed z})'
	'void UnitPauseAll':
		prefix: 'UnitPauseAll'
		body: 'UnitPauseAll(${1:bool inPause})'
	'void UnitSetCursor':
		prefix: 'UnitSetCursor'
		body: 'UnitSetCursor(${1:unit inUnit}, ${2:string cursorLink})'
	'void UnitSetPingCursor':
		prefix: 'UnitSetPingCursor'
		body: 'UnitSetPingCursor(${1:unit inUnit}, ${2:string cursorLink})'
	'void UnitSetInfoText':
		prefix: 'UnitSetInfoText'
		body: 'UnitSetInfoText(${1:unit inUnit}, ${2:text info}, ${3:text tip}, ${4:text subTip})'
	'void UnitSetInfoText2':
		prefix: 'UnitSetInfoText2'
		body: 'UnitSetInfoText2(${1:unit inUnit}, ${2:text info})'
	'void UnitSetInfoTip':
		prefix: 'UnitSetInfoTip'
		body: 'UnitSetInfoTip(${1:unit inUnit}, ${2:text tip})'
	'void UnitSetInfoSubTip':
		prefix: 'UnitSetInfoSubTip'
		body: 'UnitSetInfoSubTip(${1:unit inUnit}, ${2:text subTip})'
	'void UnitClearInfoText':
		prefix: 'UnitClearInfoText'
		body: 'UnitClearInfoText(${1:unit inUnit})'
	'void UnitForceStatusBar':
		prefix: 'UnitForceStatusBar'
		body: 'UnitForceStatusBar(${1:unit inUnit}, ${2:bool inShow})'
	'void UnitStatusBarOverride':
		prefix: 'UnitStatusBarOverride'
		body: 'UnitStatusBarOverride(${1:unit inUnit}, ${2:int inGroup})'
	'void UnitStatusBarClearOverride':
		prefix: 'UnitStatusBarClearOverride'
		body: 'UnitStatusBarClearOverride(${1:unit inUnit})'
	'void UnitSetState':
		prefix: 'UnitSetState'
		body: 'UnitSetState(${1:unit inUnit}, ${2:int inState}, ${3:bool inVal})'
	'bool UnitTestState':
		prefix: 'UnitTestState'
		body: 'UnitTestState(${1:unit inUnit}, ${2:int inState})'
	'void UnitSetPropertyInt':
		prefix: 'UnitSetPropertyInt'
		body: 'UnitSetPropertyInt(${1:unit inUnit}, ${2:int inProp}, ${3:int inVal})'
	'void UnitSetPropertyFixed':
		prefix: 'UnitSetPropertyFixed'
		body: 'UnitSetPropertyFixed(${1:unit inUnit}, ${2:int inProp}, ${3:fixed inVal})'
	'int UnitGetPropertyInt':
		prefix: 'UnitGetPropertyInt'
		body: 'UnitGetPropertyInt(${1:unit inUnit}, ${2:int inProp}, ${3:bool inCurrent})'
	'fixed UnitGetPropertyFixed':
		prefix: 'UnitGetPropertyFixed'
		body: 'UnitGetPropertyFixed(${1:unit inUnit}, ${2:int inProp}, ${3:bool inCurrent})'
	'void UnitSetCustomValue':
		prefix: 'UnitSetCustomValue'
		body: 'UnitSetCustomValue(${1:unit inUnit}, ${2:int inIndex}, ${3:fixed inVal})'
	'fixed UnitGetCustomValue':
		prefix: 'UnitGetCustomValue'
		body: 'UnitGetCustomValue(${1:unit inUnit}, ${2:int inIndex})'
	'void UnitAddChargeRegen':
		prefix: 'UnitAddChargeRegen'
		body: 'UnitAddChargeRegen(${1:unit inUnit}, ${2:string inCharge}, ${3:fixed inVal})'
	'void UnitAddChargeRegenRemaining':
		prefix: 'UnitAddChargeRegenRemaining'
		body: 'UnitAddChargeRegenRemaining(${1:unit inUnit}, ${2:string inCharge}, ${3:fixed inVal})'
	'fixed UnitGetChargeRegen':
		prefix: 'UnitGetChargeRegen'
		body: 'UnitGetChargeRegen(${1:unit inUnit}, ${2:string inCharge})'
	'void UnitAddChargeRegenFull':
		prefix: 'UnitAddChargeRegenFull'
		body: 'UnitAddChargeRegenFull(${1:unit inUnit}, ${2:string inCharge}, ${3:fixed inVal})'
	'fixed UnitGetChargeRegenFull':
		prefix: 'UnitGetChargeRegenFull'
		body: 'UnitGetChargeRegenFull(${1:unit inUnit}, ${2:string inCharge}, ${3:bool adjustmentOnly})'
	'void UnitAddChargeUsed':
		prefix: 'UnitAddChargeUsed'
		body: 'UnitAddChargeUsed(${1:unit inUnit}, ${2:string inCharge}, ${3:fixed inVal})'
	'fixed UnitGetChargeUsed':
		prefix: 'UnitGetChargeUsed'
		body: 'UnitGetChargeUsed(${1:unit inUnit}, ${2:string inCharge})'
	'void UnitAddCooldown':
		prefix: 'UnitAddCooldown'
		body: 'UnitAddCooldown(${1:unit inUnit}, ${2:string inCooldown}, ${3:fixed inVal})'
	'void UnitModifyCooldown':
		prefix: 'UnitModifyCooldown'
		body: 'UnitModifyCooldown(${1:unit inUnit}, ${2:string inCooldown}, ${3:fixed inVal}, ${4:int inOperation})'
	'void UnitClearCooldowns':
		prefix: 'UnitClearCooldowns'
		body: 'UnitClearCooldowns(${1:unit inUnit}, ${2:bool inReset})'
	'fixed UnitGetCooldown':
		prefix: 'UnitGetCooldown'
		body: 'UnitGetCooldown(${1:unit inUnit}, ${2:string inCooldown})'
	'void UnitCreateEffectPoint':
		prefix: 'UnitCreateEffectPoint'
		body: 'UnitCreateEffectPoint(${1:unit inUnit}, ${2:string inEffect}, ${3:point inTarget})'
	'void UnitCreateEffectUnit':
		prefix: 'UnitCreateEffectUnit'
		body: 'UnitCreateEffectUnit(${1:unit inUnit}, ${2:string inEffect}, ${3:unit inTarget})'
	'int UnitValidateEffectPoint':
		prefix: 'UnitValidateEffectPoint'
		body: 'UnitValidateEffectPoint(${1:unit inUnit}, ${2:string inEffect}, ${3:point inTarget})'
	'int UnitValidateEffectUnit':
		prefix: 'UnitValidateEffectUnit'
		body: 'UnitValidateEffectUnit(${1:unit inUnit}, ${2:string inEffect}, ${3:unit inTarget})'
	'void UnitDamage':
		prefix: 'UnitDamage'
		body: 'UnitDamage(${1:unit inAttacker}, ${2:string inEffect}, ${3:unit inVictim}, ${4:fixed inBonus})'
	'effecthistory UnitEffectHistory':
		prefix: 'UnitEffectHistory'
		body: 'UnitEffectHistory(${1:unit inUnit}, ${2:int inMaxCount})'
	'void UnitSetAIOption':
		prefix: 'UnitSetAIOption'
		body: 'UnitSetAIOption(${1:unit inUnit}, ${2:int inOption}, ${3:bool inVal})'
	'bool UnitGetAIOption':
		prefix: 'UnitGetAIOption'
		body: 'UnitGetAIOption(${1:unit inUnit}, ${2:int inOption})'
	'void UnitAbilitySpend':
		prefix: 'UnitAbilitySpend'
		body: 'UnitAbilitySpend(${1:unit inUnit}, ${2:abilcmd inAbilCmd}, ${3:int inLocation})'
	'void UnitAbilitySpendExplicit':
		prefix: 'UnitAbilitySpendExplicit'
		body: 'UnitAbilitySpendExplicit(${1:unit inUnit}, ${2:abilcmd inAbilCmd}, ${3:int inLocation}, ${4:fixed inVitalsFactor}, ${5:fixed inResourcesFactor}, ${6:fixed inChargesFactor}, ${7:fixed inCooldownFactor})'
	'void UnitAbilityReset':
		prefix: 'UnitAbilityReset'
		body: 'UnitAbilityReset(${1:unit inUnit}, ${2:abilcmd inAbilCmd}, ${3:int inLocation})'
	'fixed UnitAbilityChargeInfo':
		prefix: 'UnitAbilityChargeInfo'
		body: 'UnitAbilityChargeInfo(${1:unit inUnit}, ${2:abilcmd inAbilCmd}, ${3:int inType})'
	'int UnitAbilityCount':
		prefix: 'UnitAbilityCount'
		body: 'UnitAbilityCount(${1:unit inUnit})'
	'bool UnitAbilityExists':
		prefix: 'UnitAbilityExists'
		body: 'UnitAbilityExists(${1:unit inUnit}, ${2:string inAbil})'
	'void UnitAbilityEnable':
		prefix: 'UnitAbilityEnable'
		body: 'UnitAbilityEnable(${1:unit inUnit}, ${2:string inAbil}, ${3:bool inEnable})'
	'void UnitAbilityShow':
		prefix: 'UnitAbilityShow'
		body: 'UnitAbilityShow(${1:unit inUnit}, ${2:string inAbil}, ${3:bool inShow})'
	'string UnitAbilityGet':
		prefix: 'UnitAbilityGet'
		body: 'UnitAbilityGet(${1:unit inUnit}, ${2:int inIndex})'
	'bool UnitAbilityCheck':
		prefix: 'UnitAbilityCheck'
		body: 'UnitAbilityCheck(${1:unit inUnit}, ${2:string inAbil}, ${3:bool inEnabled})'
	'void UnitAbilityChangeLevel':
		prefix: 'UnitAbilityChangeLevel'
		body: 'UnitAbilityChangeLevel(${1:unit inUnit}, ${2:string inAbil}, ${3:int inLevel})'
	'int UnitAbilityGetLevel':
		prefix: 'UnitAbilityGetLevel'
		body: 'UnitAbilityGetLevel(${1:unit inUnit}, ${2:string inAbil})'
	'int UnitAbilityMaxLevel':
		prefix: 'UnitAbilityMaxLevel'
		body: 'UnitAbilityMaxLevel(${1:unit inUnit}, ${2:string inAbil})'
	'void UnitAbilityAddChargeRegen':
		prefix: 'UnitAbilityAddChargeRegen'
		body: 'UnitAbilityAddChargeRegen(${1:unit inUnit}, ${2:string inAbil}, ${3:string inCharge}, ${4:fixed inVal})'
	'void UnitAbilityAddChargeRegenRemaining':
		prefix: 'UnitAbilityAddChargeRegenRemaining'
		body: 'UnitAbilityAddChargeRegenRemaining(${1:unit inUnit}, ${2:string inAbil}, ${3:string inCharge}, ${4:fixed inVal})'
	'fixed UnitAbilityGetChargeRegen':
		prefix: 'UnitAbilityGetChargeRegen'
		body: 'UnitAbilityGetChargeRegen(${1:unit inUnit}, ${2:string inAbil}, ${3:string inCharge})'
	'void UnitAbilityAddChargeRegenFull':
		prefix: 'UnitAbilityAddChargeRegenFull'
		body: 'UnitAbilityAddChargeRegenFull(${1:unit inUnit}, ${2:string inAbil}, ${3:string inCharge}, ${4:fixed inVal})'
	'fixed UnitAbilityGetChargeRegenFull':
		prefix: 'UnitAbilityGetChargeRegenFull'
		body: 'UnitAbilityGetChargeRegenFull(${1:unit inUnit}, ${2:string inAbil}, ${3:string inCharge}, ${4:bool adjustmentOnly})'
	'void UnitAbilityAddChargeUsed':
		prefix: 'UnitAbilityAddChargeUsed'
		body: 'UnitAbilityAddChargeUsed(${1:unit inUnit}, ${2:string inAbil}, ${3:string inCharge}, ${4:fixed inVal})'
	'fixed UnitAbilityGetChargeUsed':
		prefix: 'UnitAbilityGetChargeUsed'
		body: 'UnitAbilityGetChargeUsed(${1:unit inUnit}, ${2:string inAbil}, ${3:string inCharge})'
	'void UnitAbilityAddCooldown':
		prefix: 'UnitAbilityAddCooldown'
		body: 'UnitAbilityAddCooldown(${1:unit inUnit}, ${2:string inAbil}, ${3:string inCooldown}, ${4:fixed inVal})'
	'fixed UnitAbilityGetCooldown':
		prefix: 'UnitAbilityGetCooldown'
		body: 'UnitAbilityGetCooldown(${1:unit inUnit}, ${2:string inAbil}, ${3:string inCooldown})'
	'fixed UnitAbilityEffectInstantGetRange':
		prefix: 'UnitAbilityEffectInstantGetRange'
		body: 'UnitAbilityEffectInstantGetRange(${1:unit inUnit}, ${2:string inAbil})'
	'bool UnitCheckAbilCmdState':
		prefix: 'UnitCheckAbilCmdState'
		body: 'UnitCheckAbilCmdState(${1:unit inUnit}, ${2:abilcmd inAbilCmd}, ${3:int inState})'
	'unit UnitAddOnChild':
		prefix: 'UnitAddOnChild'
		body: 'UnitAddOnChild(${1:unit inUnit}, ${2:int inIndex})'
	'unit UnitAddOnParent':
		prefix: 'UnitAddOnParent'
		body: 'UnitAddOnParent(${1:unit inUnit})'
	'void UnitCargoCreate':
		prefix: 'UnitCargoCreate'
		body: 'UnitCargoCreate(${1:unit inUnit}, ${2:string inId}, ${3:int inCount})'
	'unit UnitCargoLastCreated':
		prefix: 'UnitCargoLastCreated'
		body: 'UnitCargoLastCreated()'
	'unitgroup UnitCargoLastCreatedGroup':
		prefix: 'UnitCargoLastCreatedGroup'
		body: 'UnitCargoLastCreatedGroup()'
	'unit UnitCargo':
		prefix: 'UnitCargo'
		body: 'UnitCargo(${1:unit inUnit}, ${2:int inIndex})'
	'unitgroup UnitCargoGroup':
		prefix: 'UnitCargoGroup'
		body: 'UnitCargoGroup(${1:unit inUnit})'
	'int UnitCargoValue':
		prefix: 'UnitCargoValue'
		body: 'UnitCargoValue(${1:unit inUnit}, ${2:int inValue})'
	'unit UnitTransport':
		prefix: 'UnitTransport'
		body: 'UnitTransport(${1:unit inUnit})'
	'unitgroup UnitConjoinedGroup':
		prefix: 'UnitConjoinedGroup'
		body: 'UnitConjoinedGroup(${1:unit inUnit}, ${2:string inConjoinedBehavior})'
	'unit UnitAgent':
		prefix: 'UnitAgent'
		body: 'UnitAgent(${1:unit inUnit}, ${2:int inPlayer})'
	'void UnitMagazineArm':
		prefix: 'UnitMagazineArm'
		body: 'UnitMagazineArm(${1:unit inUnit}, ${2:abilcmd inAbilCmd}, ${3:int inCount})'
	'unit UnitMagazineLastCreated':
		prefix: 'UnitMagazineLastCreated'
		body: 'UnitMagazineLastCreated()'
	'unitgroup UnitMagazineLastCreatedGroup':
		prefix: 'UnitMagazineLastCreatedGroup'
		body: 'UnitMagazineLastCreatedGroup()'
	'int UnitMagazineCount':
		prefix: 'UnitMagazineCount'
		body: 'UnitMagazineCount(${1:unit inUnit}, ${2:string inAbil})'
	'int UnitQueueItemCount':
		prefix: 'UnitQueueItemCount'
		body: 'UnitQueueItemCount(${1:unit inUnit}, ${2:int inSlot})'
	'string UnitQueueItemGet':
		prefix: 'UnitQueueItemGet'
		body: 'UnitQueueItemGet(${1:unit inUnit}, ${2:int inItem}, ${3:int inSlot})'
	'fixed UnitQueueItemTime':
		prefix: 'UnitQueueItemTime'
		body: 'UnitQueueItemTime(${1:unit inUnit}, ${2:int inTimeType}, ${3:int inItem})'
	'bool UnitQueueItemTypeCheck':
		prefix: 'UnitQueueItemTypeCheck'
		body: 'UnitQueueItemTypeCheck(${1:unit inUnit}, ${2:int inItem}, ${3:int inType})'
	'int UnitQueueGetProperty':
		prefix: 'UnitQueueGetProperty'
		body: 'UnitQueueGetProperty(${1:unit inUnit}, ${2:int inProp})'
	'bool UnitMoverExists':
		prefix: 'UnitMoverExists'
		body: 'UnitMoverExists(${1:unit inUnit}, ${2:string inMover})'
	'bool UnitTestPlane':
		prefix: 'UnitTestPlane'
		body: 'UnitTestPlane(${1:unit inUnit}, ${2:int inPlane})'
	'fixed UnitGetDamageDealtTime':
		prefix: 'UnitGetDamageDealtTime'
		body: 'UnitGetDamageDealtTime(${1:unit inUnit})'
	'fixed UnitGetDamageTakenTime':
		prefix: 'UnitGetDamageTakenTime'
		body: 'UnitGetDamageTakenTime(${1:unit inUnit})'
	'fixed UnitGetProgressComplete':
		prefix: 'UnitGetProgressComplete'
		body: 'UnitGetProgressComplete(${1:unit inUnit}, ${2:int inSlot})'
	'void UnitSetProgressComplete':
		prefix: 'UnitSetProgressComplete'
		body: 'UnitSetProgressComplete(${1:unit inUnit}, ${2:int inSlot}, ${3:int inPercent})'
	'void UnitSetProgressStage':
		prefix: 'UnitSetProgressStage'
		body: 'UnitSetProgressStage(${1:unit inUnit}, ${2:int inSlot}, ${3:int inStage})'
	'bool UnitCheckProgressState':
		prefix: 'UnitCheckProgressState'
		body: 'UnitCheckProgressState(${1:unit inUnit}, ${2:int inSlot}, ${3:int inState})'
	'void UnitBehaviorAdd':
		prefix: 'UnitBehaviorAdd'
		body: 'UnitBehaviorAdd(${1:unit inUnit}, ${2:string inBehavior}, ${3:unit inCaster}, ${4:int inCount})'
	'void UnitBehaviorAddPlayer':
		prefix: 'UnitBehaviorAddPlayer'
		body: 'UnitBehaviorAddPlayer(${1:unit inUnit}, ${2:string inBehavior}, ${3:int inPlayer}, ${4:int inCount})'
	'int UnitBehaviorCountAll':
		prefix: 'UnitBehaviorCountAll'
		body: 'UnitBehaviorCountAll(${1:unit inUnit})'
	'int UnitBehaviorCount':
		prefix: 'UnitBehaviorCount'
		body: 'UnitBehaviorCount(${1:unit inUnit}, ${2:string inBehavior})'
	'fixed UnitBehaviorDuration':
		prefix: 'UnitBehaviorDuration'
		body: 'UnitBehaviorDuration(${1:unit inUnit}, ${2:string inBehavior})'
	'void UnitBehaviorSetDuration':
		prefix: 'UnitBehaviorSetDuration'
		body: 'UnitBehaviorSetDuration(${1:unit inUnit}, ${2:string inBehavior}, ${3:fixed inDuration})'
	'void UnitBehaviorSetDurationRemaining':
		prefix: 'UnitBehaviorSetDurationRemaining'
		body: 'UnitBehaviorSetDurationRemaining(${1:unit inUnit}, ${2:string inBehavior}, ${3:fixed inDuration})'
	'bool UnitBehaviorEnabled':
		prefix: 'UnitBehaviorEnabled'
		body: 'UnitBehaviorEnabled(${1:unit inUnit}, ${2:string inBehavior})'
	'string UnitBehaviorGet':
		prefix: 'UnitBehaviorGet'
		body: 'UnitBehaviorGet(${1:unit inUnit}, ${2:int inIndex})'
	'bool UnitHasBehavior':
		prefix: 'UnitHasBehavior'
		body: 'UnitHasBehavior(${1:unit inUnit}, ${2:string inBehavior})'
	'bool UnitHasBehavior2':
		prefix: 'UnitHasBehavior2'
		body: 'UnitHasBehavior2(${1:unit inUnit}, ${2:string inBehavior})'
	'void UnitBehaviorRemove':
		prefix: 'UnitBehaviorRemove'
		body: 'UnitBehaviorRemove(${1:unit inUnit}, ${2:string inBehavior}, ${3:int inCount})'
	'void UnitBehaviorRemovePlayer':
		prefix: 'UnitBehaviorRemovePlayer'
		body: 'UnitBehaviorRemovePlayer(${1:unit inUnit}, ${2:string inBehavior}, ${3:int inPlayer}, ${4:int inCount})'
	'void UnitBehaviorTransfer':
		prefix: 'UnitBehaviorTransfer'
		body: 'UnitBehaviorTransfer(${1:unit inSource}, ${2:unit inDest}, ${3:string inBehavior}, ${4:int inCount})'
	'bool UnitBehaviorHasFlag':
		prefix: 'UnitBehaviorHasFlag'
		body: 'UnitBehaviorHasFlag(${1:string inBehavior}, ${2:int inCategory})'
	'void UnitBehaviorRemoveCategory':
		prefix: 'UnitBehaviorRemoveCategory'
		body: 'UnitBehaviorRemoveCategory(${1:unit inUnit}, ${2:int inCategory})'
	'int UnitBehaviorEffectPlayer':
		prefix: 'UnitBehaviorEffectPlayer'
		body: 'UnitBehaviorEffectPlayer(${1:unit inUnit}, ${2:string inBehavior}, ${3:int inLocation}, ${4:int inIndex})'
	'unit UnitBehaviorEffectUnit':
		prefix: 'UnitBehaviorEffectUnit'
		body: 'UnitBehaviorEffectUnit(${1:unit inUnit}, ${2:string inBehavior}, ${3:int inLocation}, ${4:int inIndex})'
	'void UnitBehaviorAddChargeRegen':
		prefix: 'UnitBehaviorAddChargeRegen'
		body: 'UnitBehaviorAddChargeRegen(${1:unit inUnit}, ${2:string inBehavior}, ${3:string inCharge}, ${4:fixed inVal})'
	'void UnitBehaviorAddChargeRegenRemaining':
		prefix: 'UnitBehaviorAddChargeRegenRemaining'
		body: 'UnitBehaviorAddChargeRegenRemaining(${1:unit inUnit}, ${2:string inAbil}, ${3:string inCharge}, ${4:fixed inVal})'
	'fixed UnitBehaviorGetChargeRegen':
		prefix: 'UnitBehaviorGetChargeRegen'
		body: 'UnitBehaviorGetChargeRegen(${1:unit inUnit}, ${2:string inAbil}, ${3:string inCharge})'
	'void UnitBehaviorAddChargeRegenFull':
		prefix: 'UnitBehaviorAddChargeRegenFull'
		body: 'UnitBehaviorAddChargeRegenFull(${1:unit inUnit}, ${2:string inAbil}, ${3:string inCharge}, ${4:fixed inVal})'
	'fixed UnitBehaviorGetChargeRegenFull':
		prefix: 'UnitBehaviorGetChargeRegenFull'
		body: 'UnitBehaviorGetChargeRegenFull(${1:unit inUnit}, ${2:string inAbil}, ${3:string inCharge}, ${4:bool adjustmentOnly})'
	'void UnitBehaviorAddChargeUsed':
		prefix: 'UnitBehaviorAddChargeUsed'
		body: 'UnitBehaviorAddChargeUsed(${1:unit inUnit}, ${2:string inBehavior}, ${3:string inCharge}, ${4:fixed inVal})'
	'fixed UnitBehaviorGetChargeUsed':
		prefix: 'UnitBehaviorGetChargeUsed'
		body: 'UnitBehaviorGetChargeUsed(${1:unit inUnit}, ${2:string inBehavior}, ${3:string inCharge})'
	'void UnitBehaviorAddCooldown':
		prefix: 'UnitBehaviorAddCooldown'
		body: 'UnitBehaviorAddCooldown(${1:unit inUnit}, ${2:string inBehavior}, ${3:string inCooldown}, ${4:fixed inVal})'
	'fixed UnitBehaviorGetCooldown':
		prefix: 'UnitBehaviorGetCooldown'
		body: 'UnitBehaviorGetCooldown(${1:unit inUnit}, ${2:string inBehavior}, ${3:string inCooldown})'
	'void UnitBehaviorSpawn':
		prefix: 'UnitBehaviorSpawn'
		body: 'UnitBehaviorSpawn(${1:unit inUnit}, ${2:string inBehavior}, ${3:int inCount})'
	'fixed UnitBehaviorDamageModifyRemaining':
		prefix: 'UnitBehaviorDamageModifyRemaining'
		body: 'UnitBehaviorDamageModifyRemaining(${1:unit inUnit}, ${2:string inBehavior})'
	'fixed UnitBehaviorDamageModifyLimit':
		prefix: 'UnitBehaviorDamageModifyLimit'
		body: 'UnitBehaviorDamageModifyLimit(${1:unit inUnit}, ${2:string inBehavior})'
	'void UnitXPGainEnable':
		prefix: 'UnitXPGainEnable'
		body: 'UnitXPGainEnable(${1:unit inUnit}, ${2:string inBehavior}, ${3:bool inEnable})'
	'marker UnitMarker':
		prefix: 'UnitMarker'
		body: 'UnitMarker(${1:unit inUnit}, ${2:int inIndex})'
	'void UnitMarkerAdd':
		prefix: 'UnitMarkerAdd'
		body: 'UnitMarkerAdd(${1:unit inUnit}, ${2:marker inMarker})'
	'int UnitMarkerCount':
		prefix: 'UnitMarkerCount'
		body: 'UnitMarkerCount(${1:unit inUnit}, ${2:marker inMarker})'
	'void UnitMarkerRemove':
		prefix: 'UnitMarkerRemove'
		body: 'UnitMarkerRemove(${1:unit inUnit}, ${2:marker inMarker})'
	'order UnitOrder':
		prefix: 'UnitOrder'
		body: 'UnitOrder(${1:unit inUnit}, ${2:int inIndex})'
	'int UnitOrderCount':
		prefix: 'UnitOrderCount'
		body: 'UnitOrderCount(${1:unit inUnit})'
	'bool UnitOrderHasAbil':
		prefix: 'UnitOrderHasAbil'
		body: 'UnitOrderHasAbil(${1:unit inUnit}, ${2:string abilLink})'
	'bool UnitOrderIsAcquired':
		prefix: 'UnitOrderIsAcquired'
		body: 'UnitOrderIsAcquired(${1:unit inUnit}, ${2:int inIndex})'
	'bool UnitOrderIsValid':
		prefix: 'UnitOrderIsValid'
		body: 'UnitOrderIsValid(${1:unit inUnit}, ${2:order inOrder})'
	'bool UnitIsHarvesting':
		prefix: 'UnitIsHarvesting'
		body: 'UnitIsHarvesting(${1:unit inUnit}, ${2:int inResource})'
	'bool UnitIssueOrder':
		prefix: 'UnitIssueOrder'
		body: 'UnitIssueOrder(${1:unit inUnit}, ${2:order inOrder}, ${3:int inQueueType})'
	'int UnitRallyPoint':
		prefix: 'UnitRallyPoint'
		body: 'UnitRallyPoint(${1:unit inUnit}, ${2:unit inUser})'
	'int UnitRallyPointCount':
		prefix: 'UnitRallyPointCount'
		body: 'UnitRallyPointCount(${1:unit inUnit})'
	'int UnitRallyPointTargetCount':
		prefix: 'UnitRallyPointTargetCount'
		body: 'UnitRallyPointTargetCount(${1:unit inUnit}, ${2:int inPoint})'
	'point UnitRallyPointTargetPoint':
		prefix: 'UnitRallyPointTargetPoint'
		body: 'UnitRallyPointTargetPoint(${1:unit inUnit}, ${2:int inPoint}, ${3:int inTarget})'
	'unit UnitRallyPointTargetUnit':
		prefix: 'UnitRallyPointTargetUnit'
		body: 'UnitRallyPointTargetUnit(${1:unit inUnit}, ${2:int inPoint}, ${3:int inTarget})'
	'int UnitTechTreeBehaviorCount':
		prefix: 'UnitTechTreeBehaviorCount'
		body: 'UnitTechTreeBehaviorCount(${1:unit inUnit}, ${2:string behaviorType}, ${3:int countType})'
	'int UnitTechTreeUnitCount':
		prefix: 'UnitTechTreeUnitCount'
		body: 'UnitTechTreeUnitCount(${1:unit inUnit}, ${2:string unitType}, ${3:int countType})'
	'int UnitTechTreeUpgradeCount':
		prefix: 'UnitTechTreeUpgradeCount'
		body: 'UnitTechTreeUpgradeCount(${1:unit inUnit}, ${2:string upgradeType}, ${3:int countType})'
	'int UnitInventoryContainer':
		prefix: 'UnitInventoryContainer'
		body: 'UnitInventoryContainer(${1:unit inUnit})'
	'void UnitInventoryContainerOpen':
		prefix: 'UnitInventoryContainerOpen'
		body: 'UnitInventoryContainerOpen(${1:playergroup inPlayers}, ${2:unit inUnit}, ${3:int inContainer}, ${4:bool inOpen})'
	'int UnitInventoryCount':
		prefix: 'UnitInventoryCount'
		body: 'UnitInventoryCount(${1:unit inUnit}, ${2:int inCountType})'
	'unit UnitInventoryCreate':
		prefix: 'UnitInventoryCreate'
		body: 'UnitInventoryCreate(${1:unit inUnit}, ${2:string itemType})'
	'unitgroup UnitInventoryGroup':
		prefix: 'UnitInventoryGroup'
		body: 'UnitInventoryGroup(${1:unit inUnit})'
	'int UnitInventoryIndex':
		prefix: 'UnitInventoryIndex'
		body: 'UnitInventoryIndex(${1:unit inItem})'
	'unit UnitInventoryItem':
		prefix: 'UnitInventoryItem'
		body: 'UnitInventoryItem(${1:unit inUnit}, ${2:int inIndex})'
	'unit UnitInventoryLastCreated':
		prefix: 'UnitInventoryLastCreated'
		body: 'UnitInventoryLastCreated()'
	'void UnitInventoryMove':
		prefix: 'UnitInventoryMove'
		body: 'UnitInventoryMove(${1:unit inItem}, ${2:int inContainer}, ${3:int inSlot})'
	'void UnitInventoryRemove':
		prefix: 'UnitInventoryRemove'
		body: 'UnitInventoryRemove(${1:unit inItem})'
	'int UnitInventorySlot':
		prefix: 'UnitInventorySlot'
		body: 'UnitInventorySlot(${1:unit inItem})'
	'unit UnitInventoryUnit':
		prefix: 'UnitInventoryUnit'
		body: 'UnitInventoryUnit(${1:unit inItem})'
	'void UnitWeaponAdd':
		prefix: 'UnitWeaponAdd'
		body: 'UnitWeaponAdd(${1:unit inUnit}, ${2:string inWeapon}, ${3:string inTurret})'
	'int UnitWeaponCount':
		prefix: 'UnitWeaponCount'
		body: 'UnitWeaponCount(${1:unit inUnit})'
	'bool UnitWeaponCheck':
		prefix: 'UnitWeaponCheck'
		body: 'UnitWeaponCheck(${1:unit inUnit}, ${2:int inIndex}, ${3:int inTarget})'
	'string UnitWeaponGet':
		prefix: 'UnitWeaponGet'
		body: 'UnitWeaponGet(${1:unit inUnit}, ${2:int inIndex})'
	'bool UnitWeaponIsEnabled':
		prefix: 'UnitWeaponIsEnabled'
		body: 'UnitWeaponIsEnabled(${1:unit inUnit}, ${2:int inIndex})'
	'fixed UnitWeaponPeriod':
		prefix: 'UnitWeaponPeriod'
		body: 'UnitWeaponPeriod(${1:unit inUnit}, ${2:int inIndex})'
	'fixed UnitWeaponRange':
		prefix: 'UnitWeaponRange'
		body: 'UnitWeaponRange(${1:unit inUnit}, ${2:int inIndex})'
	'fixed UnitWeaponPeriodRemaining':
		prefix: 'UnitWeaponPeriodRemaining'
		body: 'UnitWeaponPeriodRemaining(${1:unit inUnit}, ${2:int inIndex})'
	'void UnitWeaponSetPeriodRemaining':
		prefix: 'UnitWeaponSetPeriodRemaining'
		body: 'UnitWeaponSetPeriodRemaining(${1:unit inUnit}, ${2:int inIndex}, ${3:fixed inRemaining})'
	'void UnitWeaponRemove':
		prefix: 'UnitWeaponRemove'
		body: 'UnitWeaponRemove(${1:unit inUnit}, ${2:string inWeapon})'
	'bool UnitWeaponsPlaneTest':
		prefix: 'UnitWeaponsPlaneTest'
		body: 'UnitWeaponsPlaneTest(${1:unit inUnit}, ${2:int inPlane})'
	'fixed UnitWeaponDamage':
		prefix: 'UnitWeaponDamage'
		body: 'UnitWeaponDamage(${1:unit inUnit}, ${2:int inIndex}, ${3:int inAttribute}, ${4:bool inMaximum})'
	'fixed UnitWeaponSpeedMultiplier':
		prefix: 'UnitWeaponSpeedMultiplier'
		body: 'UnitWeaponSpeedMultiplier(${1:unit inUnit}, ${2:int inIndex})'
	'bool UnitCanAttackTarget':
		prefix: 'UnitCanAttackTarget'
		body: 'UnitCanAttackTarget(${1:unit inUnit}, ${2:unit inTarget})'
	'bool UnitInRangeAndAbleToAttackTarget':
		prefix: 'UnitInRangeAndAbleToAttackTarget'
		body: 'UnitInRangeAndAbleToAttackTarget(${1:unit inUnit}, ${2:unit inTarget})'
	'fixed UnitXPTotal':
		prefix: 'UnitXPTotal'
		body: 'UnitXPTotal(${1:unit inUnit})'
	'int UnitLevel':
		prefix: 'UnitLevel'
		body: 'UnitLevel(${1:unit inUnit})'
	'fixed UnitXPGetCurrentXP':
		prefix: 'UnitXPGetCurrentXP'
		body: 'UnitXPGetCurrentXP(${1:unit inUnit}, ${2:string inVeterancyBehavior})'
	'void UnitXPAddXP':
		prefix: 'UnitXPAddXP'
		body: 'UnitXPAddXP(${1:unit inUnit}, ${2:string inVeterancyBehavior}, ${3:fixed inXP})'
	'void UnitXPSetCurrentXP':
		prefix: 'UnitXPSetCurrentXP'
		body: 'UnitXPSetCurrentXP(${1:unit inUnit}, ${2:string inVeterancyBehavior}, ${3:fixed inXP})'
	'int UnitXPGetXPForLevel':
		prefix: 'UnitXPGetXPForLevel'
		body: 'UnitXPGetXPForLevel(${1:unit inUnit}, ${2:string inVeterancyBehavior}, ${3:int inLevel})'
	'void UnitXPSetXPForLevel':
		prefix: 'UnitXPSetXPForLevel'
		body: 'UnitXPSetXPForLevel(${1:unit inUnit}, ${2:string inVeterancyBehavior}, ${3:int inLevel}, ${4:int inXp})'
	'int UnitXPGetCurrentLevel':
		prefix: 'UnitXPGetCurrentLevel'
		body: 'UnitXPGetCurrentLevel(${1:unit inUnit}, ${2:string inVeterancyBehavior})'
	'void UnitXPSetCurrentLevel':
		prefix: 'UnitXPSetCurrentLevel'
		body: 'UnitXPSetCurrentLevel(${1:unit inUnit}, ${2:string inVeterancyBehavior}, ${3:int inLevel})'
	'int UnitXPGetNumLevels':
		prefix: 'UnitXPGetNumLevels'
		body: 'UnitXPGetNumLevels(${1:unit inUnit}, ${2:string inVeterancyBehavior})'
	'string UnitTypeFromString':
		prefix: 'UnitTypeFromString'
		body: 'UnitTypeFromString(${1:string inString})'
	'text UnitTypeGetName':
		prefix: 'UnitTypeGetName'
		body: 'UnitTypeGetName(${1:string inUnitType})'
	'string UnitTypeGetGenderCode':
		prefix: 'UnitTypeGetGenderCode'
		body: 'UnitTypeGetGenderCode(${1:string inUnitType})'
	'fixed UnitTypeGetProperty':
		prefix: 'UnitTypeGetProperty'
		body: 'UnitTypeGetProperty(${1:string inUnitType}, ${2:int inProp})'
	'int UnitTypeGetCost':
		prefix: 'UnitTypeGetCost'
		body: 'UnitTypeGetCost(${1:string inUnitType}, ${2:int inCostType})'
	'bool UnitTypeTestFlag':
		prefix: 'UnitTypeTestFlag'
		body: 'UnitTypeTestFlag(${1:string inUnitType}, ${2:int inFlag})'
	'bool UnitTypeTestAttribute':
		prefix: 'UnitTypeTestAttribute'
		body: 'UnitTypeTestAttribute(${1:string inUnitType}, ${2:int inAttribute})'
	'bool UnitTypeIsAffectedByUpgrade':
		prefix: 'UnitTypeIsAffectedByUpgrade'
		body: 'UnitTypeIsAffectedByUpgrade(${1:string inUnitType}, ${2:string inUpgrade})'
	'void UnitTypeAnimationLoad':
		prefix: 'UnitTypeAnimationLoad'
		body: 'UnitTypeAnimationLoad(${1:string inUnitType}, ${2:string animPath})'
	'void UnitTypeAnimationLoadOverriding':
		prefix: 'UnitTypeAnimationLoadOverriding'
		body: 'UnitTypeAnimationLoadOverriding(${1:string inUnitType}, ${2:string animPath})'
	'void UnitTypeAnimationUnload':
		prefix: 'UnitTypeAnimationUnload'
		body: 'UnitTypeAnimationUnload(${1:string inUnitType}, ${2:string animPath})'
	'int UnitTypeMoveBlockersFromPoint':
		prefix: 'UnitTypeMoveBlockersFromPoint'
		body: 'UnitTypeMoveBlockersFromPoint(${1:string inType}, ${2:int inPlayer}, ${3:point inSource}, ${4:fixed inRange})'
	'int UnitTypeMoveBlockersFromUnit':
		prefix: 'UnitTypeMoveBlockersFromUnit'
		body: 'UnitTypeMoveBlockersFromUnit(${1:string inType}, ${2:int inPlayer}, ${3:unit inSource}, ${4:fixed inRange})'
	'point UnitTypePlacementFromPoint':
		prefix: 'UnitTypePlacementFromPoint'
		body: 'UnitTypePlacementFromPoint(${1:string inType}, ${2:int inPlayer}, ${3:point inSource}, ${4:fixed inRange})'
	'point UnitTypePlacementFromUnit':
		prefix: 'UnitTypePlacementFromUnit'
		body: 'UnitTypePlacementFromUnit(${1:string inType}, ${2:int inPlayer}, ${3:unit inSource}, ${4:fixed inRange})'
	'point UnitTypePlacementTestsFromPoint':
		prefix: 'UnitTypePlacementTestsFromPoint'
		body: 'UnitTypePlacementTestsFromPoint(${1:string inType}, ${2:int inPlayer}, ${3:point inSource}, ${4:fixed inRange}, ${5:int inTests})'
	'point UnitTypePlacementTestsFromUnit':
		prefix: 'UnitTypePlacementTestsFromUnit'
		body: 'UnitTypePlacementTestsFromUnit(${1:string inType}, ${2:int inPlayer}, ${3:unit inSource}, ${4:fixed inRange}, ${5:int inTests})'
	'bool UnitPathableToPoint':
		prefix: 'UnitPathableToPoint'
		body: 'UnitPathableToPoint(${1:unit u}, ${2:point inTarget}, ${3:fixed inRange}, ${4:fixed inMaxDistance})'
	'bool UnitPathableToUnit':
		prefix: 'UnitPathableToUnit'
		body: 'UnitPathableToUnit(${1:unit u}, ${2:unit inTarget}, ${3:fixed inRange}, ${4:fixed inMaxDistance})'
	'void UnitEventSetNullVariableInvalid':
		prefix: 'UnitEventSetNullVariableInvalid'
		body: 'UnitEventSetNullVariableInvalid(${1:bool inVal})'
	'void TriggerAddEventUnitCreated':
		prefix: 'TriggerAddEventUnitCreated'
		body: 'TriggerAddEventUnitCreated(${1:trigger t}, ${2:unitref u}, ${3:string creatorAbil}, ${4:string creatorBehavior})'
	'void TriggerAddEventUnitRemoved':
		prefix: 'TriggerAddEventUnitRemoved'
		body: 'TriggerAddEventUnitRemoved(${1:trigger t}, ${2:unitref u})'
	'void TriggerAddEventUnitDied':
		prefix: 'TriggerAddEventUnitDied'
		body: 'TriggerAddEventUnitDied(${1:trigger t}, ${2:unitref u})'
	'void TriggerAddEventUnitAcquiredTarget':
		prefix: 'TriggerAddEventUnitAcquiredTarget'
		body: 'TriggerAddEventUnitAcquiredTarget(${1:trigger t}, ${2:unitref u})'
	'void TriggerAddEventUnitStartedAttack':
		prefix: 'TriggerAddEventUnitStartedAttack'
		body: 'TriggerAddEventUnitStartedAttack(${1:trigger t}, ${2:unitref u})'
	'void TriggerAddEventUnitAttacked':
		prefix: 'TriggerAddEventUnitAttacked'
		body: 'TriggerAddEventUnitAttacked(${1:trigger t}, ${2:unitref u})'
	'void TriggerAddEventUnitStartedAttack2':
		prefix: 'TriggerAddEventUnitStartedAttack2'
		body: 'TriggerAddEventUnitStartedAttack2(${1:trigger t}, ${2:unitref u}, ${3:string inWeapon})'
	'void TriggerAddEventUnitAttacked2':
		prefix: 'TriggerAddEventUnitAttacked2'
		body: 'TriggerAddEventUnitAttacked2(${1:trigger t}, ${2:unitref u}, ${3:string inWeapon})'
	'void TriggerAddEventUnitAttributeChange':
		prefix: 'TriggerAddEventUnitAttributeChange'
		body: 'TriggerAddEventUnitAttributeChange(${1:trigger t}, ${2:unitref u})'
	'void TriggerAddEventUnitDamageAbsorbed':
		prefix: 'TriggerAddEventUnitDamageAbsorbed'
		body: 'TriggerAddEventUnitDamageAbsorbed(${1:trigger inTrigger}, ${2:unitref inUnit}, ${3:string inBehavior})'
	'void TriggerAddEventUnitDamaged':
		prefix: 'TriggerAddEventUnitDamaged'
		body: 'TriggerAddEventUnitDamaged(${1:trigger inTrigger}, ${2:unitref inUnit}, ${3:int inDamageType}, ${4:int inDamageFatal}, ${5:string inEffect})'
	'void TriggerAddEventUnitHealed':
		prefix: 'TriggerAddEventUnitHealed'
		body: 'TriggerAddEventUnitHealed(${1:trigger inTrigger}, ${2:unitref inUnit}, ${3:int inHealType}, ${4:string inEffect})'
	'void TriggerAddEventUnitBecomesIdle':
		prefix: 'TriggerAddEventUnitBecomesIdle'
		body: 'TriggerAddEventUnitBecomesIdle(${1:trigger t}, ${2:unitref u}, ${3:bool idle})'
	'void TriggerAddEventUnitInventoryChange':
		prefix: 'TriggerAddEventUnitInventoryChange'
		body: 'TriggerAddEventUnitInventoryChange(${1:trigger t}, ${2:unitref u}, ${3:int inChangeType}, ${4:unitref inItem})'
	'unit EventUnit':
		prefix: 'EventUnit'
		body: 'EventUnit()'
	'unit EventUnitTarget':
		prefix: 'EventUnitTarget'
		body: 'EventUnitTarget()'
	'string EventUnitGetWeapon':
		prefix: 'EventUnitGetWeapon'
		body: 'EventUnitGetWeapon()'
	'unit EventUnitCreatedUnit':
		prefix: 'EventUnitCreatedUnit'
		body: 'EventUnitCreatedUnit()'
	'string EventUnitCreatedAbil':
		prefix: 'EventUnitCreatedAbil'
		body: 'EventUnitCreatedAbil()'
	'string EventUnitCreatedBehavior':
		prefix: 'EventUnitCreatedBehavior'
		body: 'EventUnitCreatedBehavior()'
	'fixed EventUnitDamageAttempted':
		prefix: 'EventUnitDamageAttempted'
		body: 'EventUnitDamageAttempted()'
	'fixed EventUnitDamageAttemptedVitals':
		prefix: 'EventUnitDamageAttemptedVitals'
		body: 'EventUnitDamageAttemptedVitals()'
	'fixed EventUnitDamageAmount':
		prefix: 'EventUnitDamageAmount'
		body: 'EventUnitDamageAmount()'
	'fixed EventUnitDamageAbsorbed':
		prefix: 'EventUnitDamageAbsorbed'
		body: 'EventUnitDamageAbsorbed()'
	'fixed EventUnitDamageBehaviorShield':
		prefix: 'EventUnitDamageBehaviorShield'
		body: 'EventUnitDamageBehaviorShield()'
	'fixed EventUnitDamageVitalsLeeched':
		prefix: 'EventUnitDamageVitalsLeeched'
		body: 'EventUnitDamageVitalsLeeched(${1:int inVital})'
	'int EventUnitDamageKillXP':
		prefix: 'EventUnitDamageKillXP'
		body: 'EventUnitDamageKillXP()'
	'unit EventUnitDamageSourceUnit':
		prefix: 'EventUnitDamageSourceUnit'
		body: 'EventUnitDamageSourceUnit()'
	'int EventUnitDamageSourcePlayer':
		prefix: 'EventUnitDamageSourcePlayer'
		body: 'EventUnitDamageSourcePlayer()'
	'point EventUnitDamageSourcePoint':
		prefix: 'EventUnitDamageSourcePoint'
		body: 'EventUnitDamageSourcePoint()'
	'bool EventUnitDamageDeathCheck':
		prefix: 'EventUnitDamageDeathCheck'
		body: 'EventUnitDamageDeathCheck(${1:int inType})'
	'string EventUnitDamageEffect':
		prefix: 'EventUnitDamageEffect'
		body: 'EventUnitDamageEffect()'
	'unit EventUnitGetItem':
		prefix: 'EventUnitGetItem'
		body: 'EventUnitGetItem()'
	'string EventUnitGetItemType':
		prefix: 'EventUnitGetItemType'
		body: 'EventUnitGetItemType()'
	'unit EventUnitHealLaunchUnit':
		prefix: 'EventUnitHealLaunchUnit'
		body: 'EventUnitHealLaunchUnit()'
	'int EventUnitHealLaunchPlayer':
		prefix: 'EventUnitHealLaunchPlayer'
		body: 'EventUnitHealLaunchPlayer()'
	'int EventUnitHealVital':
		prefix: 'EventUnitHealVital'
		body: 'EventUnitHealVital()'
	'fixed EventUnitHealAmount':
		prefix: 'EventUnitHealAmount'
		body: 'EventUnitHealAmount()'
	'string EventUnitHealEffect':
		prefix: 'EventUnitHealEffect'
		body: 'EventUnitHealEffect()'
	'int EventUnitInventoryChange':
		prefix: 'EventUnitInventoryChange'
		body: 'EventUnitInventoryChange()'
	'unit EventUnitInventoryItem':
		prefix: 'EventUnitInventoryItem'
		body: 'EventUnitInventoryItem()'
	'int EventUnitInventoryItemContainer':
		prefix: 'EventUnitInventoryItemContainer'
		body: 'EventUnitInventoryItemContainer()'
	'int EventUnitInventoryItemSlot':
		prefix: 'EventUnitInventoryItemSlot'
		body: 'EventUnitInventoryItemSlot()'
	'point EventUnitInventoryItemTargetPoint':
		prefix: 'EventUnitInventoryItemTargetPoint'
		body: 'EventUnitInventoryItemTargetPoint()'
	'unit EventUnitInventoryItemTargetUnit':
		prefix: 'EventUnitInventoryItemTargetUnit'
		body: 'EventUnitInventoryItemTargetUnit()'
	'void TriggerAddEventUnitProperty':
		prefix: 'TriggerAddEventUnitProperty'
		body: 'TriggerAddEventUnitProperty(${1:trigger t}, ${2:unitref u}, ${3:int prop})'
	'int EventUnitProperty':
		prefix: 'EventUnitProperty'
		body: 'EventUnitProperty()'
	'int EventUnitPropertyChangeInt':
		prefix: 'EventUnitPropertyChangeInt'
		body: 'EventUnitPropertyChangeInt()'
	'fixed EventUnitPropertyChangeFixed':
		prefix: 'EventUnitPropertyChangeFixed'
		body: 'EventUnitPropertyChangeFixed()'
	'void TriggerAddEventUnitRegion':
		prefix: 'TriggerAddEventUnitRegion'
		body: 'TriggerAddEventUnitRegion(${1:trigger t}, ${2:unitref u}, ${3:region r}, ${4:bool state})'
	'void TriggerAddEventUnitRange':
		prefix: 'TriggerAddEventUnitRange'
		body: 'TriggerAddEventUnitRange(${1:trigger t}, ${2:unitref u}, ${3:unit fromUnit}, ${4:fixed range}, ${5:bool state})'
	'void TriggerAddEventUnitRangePoint':
		prefix: 'TriggerAddEventUnitRangePoint'
		body: 'TriggerAddEventUnitRangePoint(${1:trigger t}, ${2:unitref u}, ${3:point p}, ${4:fixed distance}, ${5:bool state})'
	'void TriggerAddEventUnitCargo':
		prefix: 'TriggerAddEventUnitCargo'
		body: 'TriggerAddEventUnitCargo(${1:trigger t}, ${2:unitref u}, ${3:bool state})'
	'region EventUnitRegion':
		prefix: 'EventUnitRegion'
		body: 'EventUnitRegion()'
	'unit EventUnitRangeUnit':
		prefix: 'EventUnitRangeUnit'
		body: 'EventUnitRangeUnit()'
	'unit EventUnitCargo':
		prefix: 'EventUnitCargo'
		body: 'EventUnitCargo()'
	'void TriggerAddEventUnitSelected':
		prefix: 'TriggerAddEventUnitSelected'
		body: 'TriggerAddEventUnitSelected(${1:trigger t}, ${2:unitref u}, ${3:int player}, ${4:bool state})'
	'void TriggerAddEventUnitClick':
		prefix: 'TriggerAddEventUnitClick'
		body: 'TriggerAddEventUnitClick(${1:trigger t}, ${2:unitref u}, ${3:int player})'
	'void TriggerAddEventUnitHighlight':
		prefix: 'TriggerAddEventUnitHighlight'
		body: 'TriggerAddEventUnitHighlight(${1:trigger t}, ${2:unitref u}, ${3:int player}, ${4:bool state})'
	'void TriggerAddEventUnitChangeOwner':
		prefix: 'TriggerAddEventUnitChangeOwner'
		body: 'TriggerAddEventUnitChangeOwner(${1:trigger t}, ${2:unitref u})'
	'int EventUnitOwnerOld':
		prefix: 'EventUnitOwnerOld'
		body: 'EventUnitOwnerOld()'
	'int EventUnitOwnerNew':
		prefix: 'EventUnitOwnerNew'
		body: 'EventUnitOwnerNew()'
	'void TriggerAddEventUnitOrder':
		prefix: 'TriggerAddEventUnitOrder'
		body: 'TriggerAddEventUnitOrder(${1:trigger t}, ${2:unitref u}, ${3:abilcmd a})'
	'order EventUnitOrder':
		prefix: 'EventUnitOrder'
		body: 'EventUnitOrder()'
	'void TriggerAddEventUnitAbility':
		prefix: 'TriggerAddEventUnitAbility'
		body: 'TriggerAddEventUnitAbility(${1:trigger t}, ${2:unitref u}, ${3:abilcmd a}, ${4:int stage}, ${5:bool includeSharedAbils})'
	'void TriggerAddEventUnitAbilityAutoCastChange':
		prefix: 'TriggerAddEventUnitAbilityAutoCastChange'
		body: 'TriggerAddEventUnitAbilityAutoCastChange(${1:trigger t}, ${2:unitref u}, ${3:abilcmd a}, ${4:int inChangeType}, ${5:bool includeSharedAbils})'
	'abilcmd EventUnitAbility':
		prefix: 'EventUnitAbility'
		body: 'EventUnitAbility()'
	'int EventUnitAbilityStage':
		prefix: 'EventUnitAbilityStage'
		body: 'EventUnitAbilityStage()'
	'point EventUnitTargetPoint':
		prefix: 'EventUnitTargetPoint'
		body: 'EventUnitTargetPoint()'
	'unit EventUnitTargetUnit':
		prefix: 'EventUnitTargetUnit'
		body: 'EventUnitTargetUnit()'
	'unit EventUnitAbilityOtherUnit':
		prefix: 'EventUnitAbilityOtherUnit'
		body: 'EventUnitAbilityOtherUnit()'
	'void TriggerAddEventUnitBehaviorChange':
		prefix: 'TriggerAddEventUnitBehaviorChange'
		body: 'TriggerAddEventUnitBehaviorChange(${1:trigger t}, ${2:unitref u}, ${3:string behavior}, ${4:int inChangeType})'
	'void TriggerAddEventUnitBehaviorChangeFromCategory':
		prefix: 'TriggerAddEventUnitBehaviorChangeFromCategory'
		body: 'TriggerAddEventUnitBehaviorChangeFromCategory(${1:trigger t}, ${2:unitref u}, ${3:int inCategory}, ${4:int inChangeType})'
	'void TriggerAddEventUnitGainExperience':
		prefix: 'TriggerAddEventUnitGainExperience'
		body: 'TriggerAddEventUnitGainExperience(${1:trigger t}, ${2:unitref u})'
	'void TriggerAddEventUnitGainLevel':
		prefix: 'TriggerAddEventUnitGainLevel'
		body: 'TriggerAddEventUnitGainLevel(${1:trigger t}, ${2:unitref u})'
	'string EventUnitBehavior':
		prefix: 'EventUnitBehavior'
		body: 'EventUnitBehavior()'
	'int EventUnitBehaviorChange':
		prefix: 'EventUnitBehaviorChange'
		body: 'EventUnitBehaviorChange()'
	'fixed EventUnitXPDelta':
		prefix: 'EventUnitXPDelta'
		body: 'EventUnitXPDelta()'
	'unit EventUnitVictimUnit':
		prefix: 'EventUnitVictimUnit'
		body: 'EventUnitVictimUnit()'
	'unit EventUnitItemUsed':
		prefix: 'EventUnitItemUsed'
		body: 'EventUnitItemUsed()'
	'string EventUnitEffectUsed':
		prefix: 'EventUnitEffectUsed'
		body: 'EventUnitEffectUsed()'
	'int EventUnitAttributePoints':
		prefix: 'EventUnitAttributePoints'
		body: 'EventUnitAttributePoints()'
	'void TriggerAddEventUnitArmMagazineProgress':
		prefix: 'TriggerAddEventUnitArmMagazineProgress'
		body: 'TriggerAddEventUnitArmMagazineProgress(${1:trigger t}, ${2:unitref u}, ${3:int stage})'
	'void TriggerAddEventUnitConstructProgress':
		prefix: 'TriggerAddEventUnitConstructProgress'
		body: 'TriggerAddEventUnitConstructProgress(${1:trigger t}, ${2:unitref u}, ${3:int stage})'
	'void TriggerAddEventUnitLearnProgress':
		prefix: 'TriggerAddEventUnitLearnProgress'
		body: 'TriggerAddEventUnitLearnProgress(${1:trigger t}, ${2:unitref u}, ${3:int stage})'
	'void TriggerAddEventUnitResearchProgress':
		prefix: 'TriggerAddEventUnitResearchProgress'
		body: 'TriggerAddEventUnitResearchProgress(${1:trigger t}, ${2:unitref u}, ${3:int stage})'
	'void TriggerAddEventUnitReviveProgress':
		prefix: 'TriggerAddEventUnitReviveProgress'
		body: 'TriggerAddEventUnitReviveProgress(${1:trigger t}, ${2:unitref u}, ${3:int stage})'
	'void TriggerAddEventUnitSpecializeProgress':
		prefix: 'TriggerAddEventUnitSpecializeProgress'
		body: 'TriggerAddEventUnitSpecializeProgress(${1:trigger t}, ${2:unitref u}, ${3:int stage})'
	'void TriggerAddEventUnitTrainProgress':
		prefix: 'TriggerAddEventUnitTrainProgress'
		body: 'TriggerAddEventUnitTrainProgress(${1:trigger t}, ${2:unitref u}, ${3:int stage})'
	'string EventUnitProgressObjectType':
		prefix: 'EventUnitProgressObjectType'
		body: 'EventUnitProgressObjectType()'
	'unit EventUnitProgressUnit':
		prefix: 'EventUnitProgressUnit'
		body: 'EventUnitProgressUnit()'
	'void TriggerAddEventUnitPowerup':
		prefix: 'TriggerAddEventUnitPowerup'
		body: 'TriggerAddEventUnitPowerup(${1:trigger t}, ${2:unitref u})'
	'unit EventUnitPowerupUnit':
		prefix: 'EventUnitPowerupUnit'
		body: 'EventUnitPowerupUnit()'
	'void TriggerAddEventUnitRevive':
		prefix: 'TriggerAddEventUnitRevive'
		body: 'TriggerAddEventUnitRevive(${1:trigger t}, ${2:unitref u})'
	'string PickedExclusiveMapTag':
		prefix: 'PickedExclusiveMapTag'
		body: 'PickedExclusiveMapTag()'
	'unitfilter UnitFilter':
		prefix: 'UnitFilter'
		body: 'UnitFilter(${1:int inRequired1}, ${2:int inRequired2}, ${3:int inExcluded1}, ${4:int inExcluded2})'
	'unitfilter UnitFilterStr':
		prefix: 'UnitFilterStr'
		body: 'UnitFilterStr(${1:string filters})'
	'void UnitFilterSetState':
		prefix: 'UnitFilterSetState'
		body: 'UnitFilterSetState(${1:unitfilter inFilter}, ${2:int inType}, ${3:int inState})'
	'int UnitFilterGetState':
		prefix: 'UnitFilterGetState'
		body: 'UnitFilterGetState(${1:unitfilter inFilter}, ${2:int inType})'
	'bool UnitFilterMatch':
		prefix: 'UnitFilterMatch'
		body: 'UnitFilterMatch(${1:unit inUnit}, ${2:int inPlayer}, ${3:unitfilter inFilter})'
	'unitgroup UnitGroupEmpty':
		prefix: 'UnitGroupEmpty'
		body: 'UnitGroupEmpty()'
	'unitgroup UnitGroupCopy':
		prefix: 'UnitGroupCopy'
		body: 'UnitGroupCopy(${1:unitgroup inGroup})'
	'unitgroup UnitGroupFromId':
		prefix: 'UnitGroupFromId'
		body: 'UnitGroupFromId(${1:int id})'
	'unitgroup UnitGroup':
		prefix: 'UnitGroup'
		body: 'UnitGroup(${1:string type}, ${2:int player}, ${3:region r}, ${4:unitfilter filter}, ${5:int maxCount})'
	'int UnitCount':
		prefix: 'UnitCount'
		body: 'UnitCount(${1:string type}, ${2:int player}, ${3:region r}, ${4:unitfilter filter}, ${5:int maxCount})'
	'unitgroup UnitGroupSearch':
		prefix: 'UnitGroupSearch'
		body: 'UnitGroupSearch(${1:string type}, ${2:int player}, ${3:point p}, ${4:fixed radius}, ${5:unitfilter filter}, ${6:int maxCount})'
	'unitgroup UnitGroupAlliance':
		prefix: 'UnitGroupAlliance'
		body: 'UnitGroupAlliance(${1:int player}, ${2:int alliance}, ${3:region r}, ${4:unitfilter filter}, ${5:int maxCount})'
	'int UnitCountAlliance':
		prefix: 'UnitCountAlliance'
		body: 'UnitCountAlliance(${1:int player}, ${2:int alliance}, ${3:region r}, ${4:unitfilter filter}, ${5:int maxCount})'
	'unitgroup UnitGroupFilter':
		prefix: 'UnitGroupFilter'
		body: 'UnitGroupFilter(${1:string type}, ${2:int player}, ${3:unitgroup g}, ${4:unitfilter filter}, ${5:int maxCount})'
	'unitgroup UnitGroupFilterAlliance':
		prefix: 'UnitGroupFilterAlliance'
		body: 'UnitGroupFilterAlliance(${1:unitgroup g}, ${2:int player}, ${3:int alliance}, ${4:int maxCount})'
	'unitgroup UnitGroupFilterPlane':
		prefix: 'UnitGroupFilterPlane'
		body: 'UnitGroupFilterPlane(${1:unitgroup g}, ${2:int plane}, ${3:int maxCount})'
	'unitgroup UnitGroupFilterPlayer':
		prefix: 'UnitGroupFilterPlayer'
		body: 'UnitGroupFilterPlayer(${1:unitgroup g}, ${2:int player}, ${3:int maxCount})'
	'unitgroup UnitGroupFilterRegion':
		prefix: 'UnitGroupFilterRegion'
		body: 'UnitGroupFilterRegion(${1:unitgroup g}, ${2:region r}, ${3:int maxCount})'
	'unitgroup UnitGroupFilterThreat':
		prefix: 'UnitGroupFilterThreat'
		body: 'UnitGroupFilterThreat(${1:unitgroup g}, ${2:unit u}, ${3:string alternateType}, ${4:int maxCount})'
	'unitgroup UnitGroupIdle':
		prefix: 'UnitGroupIdle'
		body: 'UnitGroupIdle(${1:int player}, ${2:bool workerOnly})'
	'point UnitGroupCenterOfGroup':
		prefix: 'UnitGroupCenterOfGroup'
		body: 'UnitGroupCenterOfGroup(${1:unitgroup g})'
	'unit UnitGroupClosestToPoint':
		prefix: 'UnitGroupClosestToPoint'
		body: 'UnitGroupClosestToPoint(${1:unitgroup g}, ${2:point p})'
	'void UnitGroupClear':
		prefix: 'UnitGroupClear'
		body: 'UnitGroupClear(${1:unitgroup inGroup})'
	'void UnitGroupAdd':
		prefix: 'UnitGroupAdd'
		body: 'UnitGroupAdd(${1:unitgroup inGroup}, ${2:unit inUnit})'
	'void UnitGroupAddUnitGroup':
		prefix: 'UnitGroupAddUnitGroup'
		body: 'UnitGroupAddUnitGroup(${1:unitgroup inGroup}, ${2:unitgroup inAddGroup})'
	'void UnitGroupRemove':
		prefix: 'UnitGroupRemove'
		body: 'UnitGroupRemove(${1:unitgroup inGroup}, ${2:unit inUnit})'
	'void UnitGroupRemoveUnitGroup':
		prefix: 'UnitGroupRemoveUnitGroup'
		body: 'UnitGroupRemoveUnitGroup(${1:unitgroup inGroup}, ${2:unitgroup inRemoveGroup})'
	'bool UnitGroupIssueOrder':
		prefix: 'UnitGroupIssueOrder'
		body: 'UnitGroupIssueOrder(${1:unitgroup inGroup}, ${2:order inOrder}, ${3:int inQueueType})'
	'void UnitGroupWaitUntilIdle':
		prefix: 'UnitGroupWaitUntilIdle'
		body: 'UnitGroupWaitUntilIdle(${1:unitgroup inGroup}, ${2:int inCount}, ${3:bool inIdle})'
	'int UnitGroupCount':
		prefix: 'UnitGroupCount'
		body: 'UnitGroupCount(${1:unitgroup inGroup}, ${2:int inType})'
	'unit UnitGroupUnit':
		prefix: 'UnitGroupUnit'
		body: 'UnitGroupUnit(${1:unitgroup inGroup}, ${2:int inIndex})'
	'unit UnitGroupRandomUnit':
		prefix: 'UnitGroupRandomUnit'
		body: 'UnitGroupRandomUnit(${1:unitgroup inGroup}, ${2:int inType})'
	'bool UnitGroupHasUnit':
		prefix: 'UnitGroupHasUnit'
		body: 'UnitGroupHasUnit(${1:unitgroup inGroup}, ${2:unit inUnit})'
	'bool UnitGroupTestPlane':
		prefix: 'UnitGroupTestPlane'
		body: 'UnitGroupTestPlane(${1:unitgroup inGroup}, ${2:int inPlane})'
	'unit UnitGroupNearestUnit':
		prefix: 'UnitGroupNearestUnit'
		body: 'UnitGroupNearestUnit(${1:unitgroup inGroup}, ${2:point inPoint})'
	'void UnitGroupPauseAll':
		prefix: 'UnitGroupPauseAll'
		body: 'UnitGroupPauseAll(${1:unitgroup inGroup}, ${2:bool inPause})'
	'unitref UnitRefFromUnit':
		prefix: 'UnitRefFromUnit'
		body: 'UnitRefFromUnit(${1:unit u})'
	'unitref UnitRefFromVariable':
		prefix: 'UnitRefFromVariable'
		body: 'UnitRefFromVariable(${1:string v})'
	'unit UnitRefToUnit':
		prefix: 'UnitRefToUnit'
		body: 'UnitRefToUnit(${1:unitref r})'
	'void UnitSelect':
		prefix: 'UnitSelect'
		body: 'UnitSelect(${1:unit inUnit}, ${2:int inPlayer}, ${3:bool inSelect})'
	'void UnitGroupSelect':
		prefix: 'UnitGroupSelect'
		body: 'UnitGroupSelect(${1:unitgroup inGroup}, ${2:int inPlayer}, ${3:bool inSelect})'
	'void UnitClearSelection':
		prefix: 'UnitClearSelection'
		body: 'UnitClearSelection(${1:int inPlayer})'
	'bool UnitIsSelected':
		prefix: 'UnitIsSelected'
		body: 'UnitIsSelected(${1:unit inUnit}, ${2:int inPlayer})'
	'unitgroup UnitGroupSelected':
		prefix: 'UnitGroupSelected'
		body: 'UnitGroupSelected(${1:int inPlayer})'
	'void UnitFlashSelection':
		prefix: 'UnitFlashSelection'
		body: 'UnitFlashSelection(${1:unit inUnit}, ${2:fixed inPeriod})'
	'void UnitControlGroupAddUnit':
		prefix: 'UnitControlGroupAddUnit'
		body: 'UnitControlGroupAddUnit(${1:int inPlayer}, ${2:int inGroup}, ${3:unit inUnit})'
	'void UnitControlGroupAddUnits':
		prefix: 'UnitControlGroupAddUnits'
		body: 'UnitControlGroupAddUnits(${1:int inPlayer}, ${2:int inGroup}, ${3:unitgroup inUnits})'
	'void UnitControlGroupRemoveUnit':
		prefix: 'UnitControlGroupRemoveUnit'
		body: 'UnitControlGroupRemoveUnit(${1:int inPlayer}, ${2:int inGroup}, ${3:unit inUnit})'
	'void UnitControlGroupRemoveUnits':
		prefix: 'UnitControlGroupRemoveUnits'
		body: 'UnitControlGroupRemoveUnits(${1:int inPlayer}, ${2:int inGroup}, ${3:unitgroup inUnits})'
	'void UnitControlGroupClear':
		prefix: 'UnitControlGroupClear'
		body: 'UnitControlGroupClear(${1:int inPlayer}, ${2:int inGroup})'
	'int UserDataInstanceCount':
		prefix: 'UserDataInstanceCount'
		body: 'UserDataInstanceCount(${1:string inType})'
	'string UserDataInstance':
		prefix: 'UserDataInstance'
		body: 'UserDataInstance(${1:string inType}, ${2:int inIndex})'
	'int UserDataFieldCount':
		prefix: 'UserDataFieldCount'
		body: 'UserDataFieldCount(${1:string inType})'
	'string UserDataField':
		prefix: 'UserDataField'
		body: 'UserDataField(${1:string inType}, ${2:int inIndex})'
	'int UserDataFieldType':
		prefix: 'UserDataFieldType'
		body: 'UserDataFieldType(${1:string inType}, ${2:string inField})'
	'int UserDataFieldValueCount':
		prefix: 'UserDataFieldValueCount'
		body: 'UserDataFieldValueCount(${1:string inType}, ${2:string inField})'
	'bool UserDataFieldIsModifiable':
		prefix: 'UserDataFieldIsModifiable'
		body: 'UserDataFieldIsModifiable(${1:string inType}, ${2:string inField})'
	'abilcmd UserDataGetAbilCmd':
		prefix: 'UserDataGetAbilCmd'
		body: 'UserDataGetAbilCmd(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'string UserDataGetActor':
		prefix: 'UserDataGetActor'
		body: 'UserDataGetActor(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'color UserDataGetColor':
		prefix: 'UserDataGetColor'
		body: 'UserDataGetColor(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'int UserDataGetCompare':
		prefix: 'UserDataGetCompare'
		body: 'UserDataGetCompare(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'fixed UserDataGetFixed':
		prefix: 'UserDataGetFixed'
		body: 'UserDataGetFixed(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'string UserDataGetGameLink':
		prefix: 'UserDataGetGameLink'
		body: 'UserDataGetGameLink(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'string UserDataGetImagePath':
		prefix: 'UserDataGetImagePath'
		body: 'UserDataGetImagePath(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'int UserDataGetImageEdge':
		prefix: 'UserDataGetImageEdge'
		body: 'UserDataGetImageEdge(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'string UserDataGetImageAttachPoint':
		prefix: 'UserDataGetImageAttachPoint'
		body: 'UserDataGetImageAttachPoint(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'int UserDataGetInt':
		prefix: 'UserDataGetInt'
		body: 'UserDataGetInt(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'string UserDataGetModel':
		prefix: 'UserDataGetModel'
		body: 'UserDataGetModel(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'string UserDataGetMovie':
		prefix: 'UserDataGetMovie'
		body: 'UserDataGetMovie(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'string UserDataGetSound':
		prefix: 'UserDataGetSound'
		body: 'UserDataGetSound(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'string UserDataGetString':
		prefix: 'UserDataGetString'
		body: 'UserDataGetString(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'text UserDataGetText':
		prefix: 'UserDataGetText'
		body: 'UserDataGetText(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'string UserDataGetUnit':
		prefix: 'UserDataGetUnit'
		body: 'UserDataGetUnit(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'string UserDataGetUpgrade':
		prefix: 'UserDataGetUpgrade'
		body: 'UserDataGetUpgrade(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'string UserDataGetUserType':
		prefix: 'UserDataGetUserType'
		body: 'UserDataGetUserType(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'string UserDataGetUserInstance':
		prefix: 'UserDataGetUserInstance'
		body: 'UserDataGetUserInstance(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'void UserDataSetAbilCmd':
		prefix: 'UserDataSetAbilCmd'
		body: 'UserDataSetAbilCmd(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:abilcmd inValue})'
	'void UserDataSetActor':
		prefix: 'UserDataSetActor'
		body: 'UserDataSetActor(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:string inValue})'
	'void UserDataSetColor':
		prefix: 'UserDataSetColor'
		body: 'UserDataSetColor(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:color inValue})'
	'void UserDataSetCompare':
		prefix: 'UserDataSetCompare'
		body: 'UserDataSetCompare(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:int inValue})'
	'void UserDataSetFixed':
		prefix: 'UserDataSetFixed'
		body: 'UserDataSetFixed(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:fixed inValue})'
	'void UserDataSetGameLink':
		prefix: 'UserDataSetGameLink'
		body: 'UserDataSetGameLink(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:string inValue})'
	'void UserDataSetImagePath':
		prefix: 'UserDataSetImagePath'
		body: 'UserDataSetImagePath(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:string inValue})'
	'void UserDataSetImageEdge':
		prefix: 'UserDataSetImageEdge'
		body: 'UserDataSetImageEdge(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:int inValue})'
	'void UserDataSetImageAttachPoint':
		prefix: 'UserDataSetImageAttachPoint'
		body: 'UserDataSetImageAttachPoint(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:string inValue})'
	'void UserDataSetInt':
		prefix: 'UserDataSetInt'
		body: 'UserDataSetInt(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:int inValue})'
	'void UserDataSetModel':
		prefix: 'UserDataSetModel'
		body: 'UserDataSetModel(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:string inValue})'
	'void UserDataSetMovie':
		prefix: 'UserDataSetMovie'
		body: 'UserDataSetMovie(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:string inValue})'
	'void UserDataSetSound':
		prefix: 'UserDataSetSound'
		body: 'UserDataSetSound(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:string inValue})'
	'void UserDataSetString':
		prefix: 'UserDataSetString'
		body: 'UserDataSetString(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:string inValue})'
	'void UserDataSetText':
		prefix: 'UserDataSetText'
		body: 'UserDataSetText(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:text inValue})'
	'void UserDataSetUnit':
		prefix: 'UserDataSetUnit'
		body: 'UserDataSetUnit(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:string inValue})'
	'void UserDataSetUpgrade':
		prefix: 'UserDataSetUpgrade'
		body: 'UserDataSetUpgrade(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:string inValue})'
	'void UserDataSetUser':
		prefix: 'UserDataSetUser'
		body: 'UserDataSetUser(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex}, ${5:string inValueType}, ${6:string inValueInstance})'
	'void UserDataResetValue':
		prefix: 'UserDataResetValue'
		body: 'UserDataResetValue(${1:string inType}, ${2:string inInstance}, ${3:string inField}, ${4:int inIndex})'
	'void UserDataResetInstance':
		prefix: 'UserDataResetInstance'
		body: 'UserDataResetInstance(${1:string inType}, ${2:string inInstance})'
	'void UserDataResetType':
		prefix: 'UserDataResetType'
		body: 'UserDataResetType(${1:string inType})'
	'void UserDataResetAll':
		prefix: 'UserDataResetAll'
		body: 'UserDataResetAll()'
	'void UserDataSaveInstance':
		prefix: 'UserDataSaveInstance'
		body: 'UserDataSaveInstance(${1:string inType}, ${2:string inInstance}, ${3:bank inBank}, ${4:string inSection})'
	'void UserDataLoadInstance':
		prefix: 'UserDataLoadInstance'
		body: 'UserDataLoadInstance(${1:string inType}, ${2:string inInstance}, ${3:bank inBank}, ${4:string inSection})'
	'void UserDataSaveType':
		prefix: 'UserDataSaveType'
		body: 'UserDataSaveType(${1:string inType}, ${2:bank inBank}, ${3:string inSection})'
	'void UserDataLoadType':
		prefix: 'UserDataLoadType'
		body: 'UserDataLoadType(${1:string inType}, ${2:bank inBank}, ${3:string inSection})'
	'string UserDataTypeFromReference':
		prefix: 'UserDataTypeFromReference'
		body: 'UserDataTypeFromReference(${1:string inRef})'
	'string UserDataInstanceFromReference':
		prefix: 'UserDataInstanceFromReference'
		body: 'UserDataInstanceFromReference(${1:string inRef})'
	'void UISetMode':
		prefix: 'UISetMode'
		body: 'UISetMode(${1:playergroup players}, ${2:int mode}, ${3:fixed duration})'
	'void UISetMinimumLetterboxHeight':
		prefix: 'UISetMinimumLetterboxHeight'
		body: 'UISetMinimumLetterboxHeight(${1:int inHeight})'
	'void UISetWorldVisible':
		prefix: 'UISetWorldVisible'
		body: 'UISetWorldVisible(${1:playergroup players}, ${2:bool isVisible})'
	'void UISetCursorVisible':
		prefix: 'UISetCursorVisible'
		body: 'UISetCursorVisible(${1:playergroup players}, ${2:bool isCursorVisible})'
	'void UISetCursorAutoHide':
		prefix: 'UISetCursorAutoHide'
		body: 'UISetCursorAutoHide(${1:playergroup players}, ${2:bool autoHide}, ${3:fixed delay})'
	'void UISetHotkeyProfile':
		prefix: 'UISetHotkeyProfile'
		body: 'UISetHotkeyProfile(${1:playergroup players}, ${2:string profileName})'
	'text UIHotKeyString':
		prefix: 'UIHotKeyString'
		body: 'UIHotKeyString(${1:int hotKey}, ${2:int count}, ${3:bool abbreviate}, ${4:bool addTags})'
	'void UIDisplayMessage':
		prefix: 'UIDisplayMessage'
		body: 'UIDisplayMessage(${1:playergroup players}, ${2:int messageArea}, ${3:text messageText})'
	'void UIClearMessages':
		prefix: 'UIClearMessages'
		body: 'UIClearMessages(${1:playergroup players}, ${2:int messageArea})'
	'void UIShowCinematicText':
		prefix: 'UIShowCinematicText'
		body: 'UIShowCinematicText(${1:playergroup inPlayers}, ${2:text inMessageText}, ${3:fixed inTimeBetweenCharacters}, ${4:fixed inMaxTime}, ${5:soundlink inSoundLink})'
	'void UIHideCinematicText':
		prefix: 'UIHideCinematicText'
		body: 'UIHideCinematicText(${1:playergroup inPlayers})'
	'void UIShowTextCrawl':
		prefix: 'UIShowTextCrawl'
		body: 'UIShowTextCrawl(${1:playergroup inPlayers}, ${2:text inTitle}, ${3:text inText}, ${4:fixed inMaxTime}, ${5:soundlink inBirthSoundLink}, ${6:soundlink inTypeSoundLink})'
	'void UIHideTextCrawl':
		prefix: 'UIHideTextCrawl'
		body: 'UIHideTextCrawl(${1:playergroup inPlayers})'
	'void UIUnitColorStyleOverride':
		prefix: 'UIUnitColorStyleOverride'
		body: 'UIUnitColorStyleOverride(${1:playergroup inPlayers}, ${2:int style})'
	'void UIUnitColorStyleClearOverride':
		prefix: 'UIUnitColorStyleClearOverride'
		body: 'UIUnitColorStyleClearOverride(${1:playergroup inPlayers})'
	'void UIFlyerHelperOverride':
		prefix: 'UIFlyerHelperOverride'
		body: 'UIFlyerHelperOverride(${1:playergroup inPlayers}, ${2:int display})'
	'void UIFlyerHelperClearOverride':
		prefix: 'UIFlyerHelperClearOverride'
		body: 'UIFlyerHelperClearOverride(${1:playergroup inPlayers})'
	'void UIStatusBarOverride':
		prefix: 'UIStatusBarOverride'
		body: 'UIStatusBarOverride(${1:playergroup inPlayers}, ${2:int group})'
	'void UIStatusBarClearOverride':
		prefix: 'UIStatusBarClearOverride'
		body: 'UIStatusBarClearOverride(${1:playergroup inPlayers})'
	'void UISetAchievementToastStyle':
		prefix: 'UISetAchievementToastStyle'
		body: 'UISetAchievementToastStyle(${1:playergroup inPlayers}, ${2:int style})'
	'void UISetNextLoadingScreen':
		prefix: 'UISetNextLoadingScreen'
		body: 'UISetNextLoadingScreen(${1:string imagePath}, ${2:text title}, ${3:text subtitle}, ${4:text body}, ${5:text help}, ${6:bool waitForInput})'
	'void UISetNextLoadingScreenImageScale':
		prefix: 'UISetNextLoadingScreenImageScale'
		body: 'UISetNextLoadingScreenImageScale(${1:int imageScale})'
	'void UISetNextLoadingScreenTextPosition':
		prefix: 'UISetNextLoadingScreenTextPosition'
		body: 'UISetNextLoadingScreenTextPosition(${1:int anchor}, ${2:int offsetX}, ${3:int offsetY}, ${4:int width}, ${5:int height})'
	'void UISetRestartLoadingScreen':
		prefix: 'UISetRestartLoadingScreen'
		body: 'UISetRestartLoadingScreen(${1:text help})'
	'void UIAlert':
		prefix: 'UIAlert'
		body: 'UIAlert(${1:string alert}, ${2:int player}, ${3:text message}, ${4:string icon})'
	'void UIAlertPoint':
		prefix: 'UIAlertPoint'
		body: 'UIAlertPoint(${1:string alert}, ${2:int player}, ${3:text message}, ${4:string icon}, ${5:point p})'
	'void UIAlertUnit':
		prefix: 'UIAlertUnit'
		body: 'UIAlertUnit(${1:string alert}, ${2:int player}, ${3:text message}, ${4:string icon}, ${5:unit u})'
	'void UIAlertClear':
		prefix: 'UIAlertClear'
		body: 'UIAlertClear(${1:int player})'
	'void UISetAlertTypeVisible':
		prefix: 'UISetAlertTypeVisible'
		body: 'UISetAlertTypeVisible(${1:playergroup inPlayers}, ${2:string inAlert}, ${3:bool inVisible})'
	'void UISetFrameVisible':
		prefix: 'UISetFrameVisible'
		body: 'UISetFrameVisible(${1:playergroup inPlayers}, ${2:int inFrameType}, ${3:bool inVisible})'
	'bool UIFrameVisible':
		prefix: 'UIFrameVisible'
		body: 'UIFrameVisible(${1:int inPlayer}, ${2:int inFrameType})'
	'void UISetGameMenuItemVisible':
		prefix: 'UISetGameMenuItemVisible'
		body: 'UISetGameMenuItemVisible(${1:playergroup inPlayers}, ${2:int inMenuItemType}, ${3:bool inVisible})'
	'bool UIGameMenuItemVisible':
		prefix: 'UIGameMenuItemVisible'
		body: 'UIGameMenuItemVisible(${1:int inPlayer}, ${2:int inMenuItemType})'
	'void UISetGameMenuItemText':
		prefix: 'UISetGameMenuItemText'
		body: 'UISetGameMenuItemText(${1:playergroup inPlayers}, ${2:int inMenuItemType}, ${3:text inText})'
	'void UISetGameMenuItemShortcut':
		prefix: 'UISetGameMenuItemShortcut'
		body: 'UISetGameMenuItemShortcut(${1:playergroup inPlayers}, ${2:int inMenuItemType}, ${3:text inShortcut})'
	'void UIClearCustomMenuItemList':
		prefix: 'UIClearCustomMenuItemList'
		body: 'UIClearCustomMenuItemList(${1:playergroup inPlayers})'
	'void UISetCustomMenuItemVisible':
		prefix: 'UISetCustomMenuItemVisible'
		body: 'UISetCustomMenuItemVisible(${1:playergroup inPlayers}, ${2:int inMenuItemType}, ${3:bool inVisible})'
	'bool UICustomMenuItemVisible':
		prefix: 'UICustomMenuItemVisible'
		body: 'UICustomMenuItemVisible(${1:int inPlayer}, ${2:int inMenuItemType})'
	'void UISetCustomMenuItemShortcut':
		prefix: 'UISetCustomMenuItemShortcut'
		body: 'UISetCustomMenuItemShortcut(${1:playergroup inPlayers}, ${2:int inMenuItemType}, ${3:text inText})'
	'void UISetCustomMenuItemText':
		prefix: 'UISetCustomMenuItemText'
		body: 'UISetCustomMenuItemText(${1:playergroup inPlayers}, ${2:int inMenuItemType}, ${3:text inText})'
	'void UIShowStandardMenu':
		prefix: 'UIShowStandardMenu'
		body: 'UIShowStandardMenu(${1:playergroup inPlayers})'
	'void UIShowCustomMenu':
		prefix: 'UIShowCustomMenu'
		body: 'UIShowCustomMenu(${1:playergroup inPlayers}, ${2:text inTitleText})'
	'void UIShowCustomDialog':
		prefix: 'UIShowCustomDialog'
		body: 'UIShowCustomDialog(${1:playergroup inPlayers}, ${2:int inType}, ${3:text inTitle}, ${4:text inText}, ${5:bool pause})'
	'void UISetResourceTradeCountdownTime':
		prefix: 'UISetResourceTradeCountdownTime'
		body: 'UISetResourceTradeCountdownTime(${1:int time})'
	'void UISetResourceTradingAllowed':
		prefix: 'UISetResourceTradingAllowed'
		body: 'UISetResourceTradingAllowed(${1:int inResourceType}, ${2:bool inAllowed})'
	'void UISetResourceTradingMinorStep':
		prefix: 'UISetResourceTradingMinorStep'
		body: 'UISetResourceTradingMinorStep(${1:int inResourceType}, ${2:int inAmount})'
	'void UISetResourceTradingMajorStep':
		prefix: 'UISetResourceTradingMajorStep'
		body: 'UISetResourceTradingMajorStep(${1:int inResourceType}, ${2:int inAmount})'
	'void UISetButtonHighlighted':
		prefix: 'UISetButtonHighlighted'
		body: 'UISetButtonHighlighted(${1:playergroup inPlayers}, ${2:abilcmd inAbilCmd}, ${3:bool inHighlight})'
	'void UISetButtonFaceHighlighted':
		prefix: 'UISetButtonFaceHighlighted'
		body: 'UISetButtonFaceHighlighted(${1:playergroup inPlayers}, ${2:string face}, ${3:bool inHighlight})'
	'void UISetMiniMapBackGroundColor':
		prefix: 'UISetMiniMapBackGroundColor'
		body: 'UISetMiniMapBackGroundColor(${1:color inColor})'
	'void UISetMiniMapCameraFoVVisible':
		prefix: 'UISetMiniMapCameraFoVVisible'
		body: 'UISetMiniMapCameraFoVVisible(${1:bool visible})'
	'void UISetCommandAllowed':
		prefix: 'UISetCommandAllowed'
		body: 'UISetCommandAllowed(${1:playergroup players}, ${2:int option}, ${3:bool allow})'
	'void UISetCommandDisallowedMessage':
		prefix: 'UISetCommandDisallowedMessage'
		body: 'UISetCommandDisallowedMessage(${1:playergroup players}, ${2:text message})'
	'void UISetHotkeyAllowed':
		prefix: 'UISetHotkeyAllowed'
		body: 'UISetHotkeyAllowed(${1:playergroup players}, ${2:int hotkey}, ${3:bool allow})'
	'void UISetDragSelectEnabled':
		prefix: 'UISetDragSelectEnabled'
		body: 'UISetDragSelectEnabled(${1:playergroup players}, ${2:bool enable})'
	'void UISetChallengeMode':
		prefix: 'UISetChallengeMode'
		body: 'UISetChallengeMode(${1:playergroup players}, ${2:bool challengeMode})'
	'void UISetChallengeScoreText':
		prefix: 'UISetChallengeScoreText'
		body: 'UISetChallengeScoreText(${1:playergroup players}, ${2:string challengeId}, ${3:text scoreText})'
	'void UISetChallengeHighScore':
		prefix: 'UISetChallengeHighScore'
		body: 'UISetChallengeHighScore(${1:playergroup players}, ${2:string challengeName}, ${3:int highScore})'
	'int UIGetChallengeHighScore':
		prefix: 'UIGetChallengeHighScore'
		body: 'UIGetChallengeHighScore(${1:int player}, ${2:string challengeName})'
	'void UISetChallengeCompleted':
		prefix: 'UISetChallengeCompleted'
		body: 'UISetChallengeCompleted(${1:playergroup players}, ${2:string challengeName}, ${3:bool completed})'
	'void UISetBattleNetButtonOffset':
		prefix: 'UISetBattleNetButtonOffset'
		body: 'UISetBattleNetButtonOffset(${1:playergroup inPlayers}, ${2:int inOffsetX}, ${3:int inOffsetY})'
	'void UIClearBattleNetButtonOffset':
		prefix: 'UIClearBattleNetButtonOffset'
		body: 'UIClearBattleNetButtonOffset(${1:playergroup inPlayers})'
	'void UISetResourceVisible':
		prefix: 'UISetResourceVisible'
		body: 'UISetResourceVisible(${1:playergroup inPlayers}, ${2:int inResource}, ${3:bool inVisible})'
	'void UISetSelectionTypeEnabled':
		prefix: 'UISetSelectionTypeEnabled'
		body: 'UISetSelectionTypeEnabled(${1:playergroup inPlayers}, ${2:int inSelectionType}, ${3:bool inEnabled})'
	'void UILaunchNydusLink':
		prefix: 'UILaunchNydusLink'
		body: 'UILaunchNydusLink(${1:playergroup inPlayers}, ${2:int inNydusLink})'
	'void UIMessageLogPanelSetVisible':
		prefix: 'UIMessageLogPanelSetVisible'
		body: 'UIMessageLogPanelSetVisible(${1:playergroup inPlayers}, ${2:bool inVisible})'
	'void UISetTargetingOrder':
		prefix: 'UISetTargetingOrder'
		body: 'UISetTargetingOrder(${1:playergroup inPlayers}, ${2:unitgroup inUnits}, ${3:order inOrder}, ${4:bool inSticky})'
	'void TriggerAddEventAbortMission':
		prefix: 'TriggerAddEventAbortMission'
		body: 'TriggerAddEventAbortMission(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventCustomDialogDismissed':
		prefix: 'TriggerAddEventCustomDialogDismissed'
		body: 'TriggerAddEventCustomDialogDismissed(${1:trigger t}, ${2:int player}, ${3:int result})'
	'void TriggerAddEventGameMenuItemSelected':
		prefix: 'TriggerAddEventGameMenuItemSelected'
		body: 'TriggerAddEventGameMenuItemSelected(${1:trigger t}, ${2:int player}, ${3:int gameMenuIndex})'
	'void TriggerAddEventMouseClicked':
		prefix: 'TriggerAddEventMouseClicked'
		body: 'TriggerAddEventMouseClicked(${1:trigger t}, ${2:int player}, ${3:int mouseButton}, ${4:bool down})'
	'void TriggerAddEventMouseMoved':
		prefix: 'TriggerAddEventMouseMoved'
		body: 'TriggerAddEventMouseMoved(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventMouseWheel':
		prefix: 'TriggerAddEventMouseWheel'
		body: 'TriggerAddEventMouseWheel(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventKeyPressed':
		prefix: 'TriggerAddEventKeyPressed'
		body: 'TriggerAddEventKeyPressed(${1:trigger t}, ${2:int player}, ${3:int key}, ${4:bool down}, ${5:int s}, ${6:int c}, ${7:int a})'
	'void TriggerAddEventHotkeyPressed':
		prefix: 'TriggerAddEventHotkeyPressed'
		body: 'TriggerAddEventHotkeyPressed(${1:trigger t}, ${2:int player}, ${3:int hotkey}, ${4:bool down})'
	'void TriggerAddEventButtonPressed':
		prefix: 'TriggerAddEventButtonPressed'
		body: 'TriggerAddEventButtonPressed(${1:trigger t}, ${2:int player}, ${3:string button})'
	'void TriggerAddEventGameCreditsFinished':
		prefix: 'TriggerAddEventGameCreditsFinished'
		body: 'TriggerAddEventGameCreditsFinished(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventTargetModeUpdate':
		prefix: 'TriggerAddEventTargetModeUpdate'
		body: 'TriggerAddEventTargetModeUpdate(${1:trigger t}, ${2:int player}, ${3:abilcmd inAbilCmd}, ${4:int state})'
	'void TriggerAddEventResourceRequest':
		prefix: 'TriggerAddEventResourceRequest'
		body: 'TriggerAddEventResourceRequest(${1:trigger t}, ${2:int player})'
	'void TriggerAddEventResourceTrade':
		prefix: 'TriggerAddEventResourceTrade'
		body: 'TriggerAddEventResourceTrade(${1:trigger t}, ${2:int player}, ${3:int recipientPlayer})'
	'void TriggerAddEventCommandError':
		prefix: 'TriggerAddEventCommandError'
		body: 'TriggerAddEventCommandError(${1:trigger t}, ${2:int player}, ${3:int error}, ${4:abilcmd inAbilCmd})'
	'void TriggerAddEventAlert':
		prefix: 'TriggerAddEventAlert'
		body: 'TriggerAddEventAlert(${1:trigger t}, ${2:int player}, ${3:string modelLink})'
	'int EventCustomDialogResult':
		prefix: 'EventCustomDialogResult'
		body: 'EventCustomDialogResult()'
	'int EventGameMenuItemSelected':
		prefix: 'EventGameMenuItemSelected'
		body: 'EventGameMenuItemSelected()'
	'int EventMouseClickedButton':
		prefix: 'EventMouseClickedButton'
		body: 'EventMouseClickedButton()'
	'int EventMouseClickedPosXUI':
		prefix: 'EventMouseClickedPosXUI'
		body: 'EventMouseClickedPosXUI()'
	'int EventMouseClickedPosYUI':
		prefix: 'EventMouseClickedPosYUI'
		body: 'EventMouseClickedPosYUI()'
	'fixed EventMouseClickedPosXWorld':
		prefix: 'EventMouseClickedPosXWorld'
		body: 'EventMouseClickedPosXWorld()'
	'fixed EventMouseClickedPosYWorld':
		prefix: 'EventMouseClickedPosYWorld'
		body: 'EventMouseClickedPosYWorld()'
	'fixed EventMouseClickedPosZWorld':
		prefix: 'EventMouseClickedPosZWorld'
		body: 'EventMouseClickedPosZWorld()'
	'int EventMouseMovedPosXUI':
		prefix: 'EventMouseMovedPosXUI'
		body: 'EventMouseMovedPosXUI()'
	'int EventMouseMovedPosYUI':
		prefix: 'EventMouseMovedPosYUI'
		body: 'EventMouseMovedPosYUI()'
	'fixed EventMouseMovedPosXWorld':
		prefix: 'EventMouseMovedPosXWorld'
		body: 'EventMouseMovedPosXWorld()'
	'fixed EventMouseMovedPosYWorld':
		prefix: 'EventMouseMovedPosYWorld'
		body: 'EventMouseMovedPosYWorld()'
	'fixed EventMouseMovedPosZWorld':
		prefix: 'EventMouseMovedPosZWorld'
		body: 'EventMouseMovedPosZWorld()'
	'fixed EventMouseWheelSpin':
		prefix: 'EventMouseWheelSpin'
		body: 'EventMouseWheelSpin()'
	'int EventKeyPressed':
		prefix: 'EventKeyPressed'
		body: 'EventKeyPressed()'
	'bool EventKeyShift':
		prefix: 'EventKeyShift'
		body: 'EventKeyShift()'
	'bool EventKeyControl':
		prefix: 'EventKeyControl'
		body: 'EventKeyControl()'
	'bool EventKeyAlt':
		prefix: 'EventKeyAlt'
		body: 'EventKeyAlt()'
	'string EventButtonPressed':
		prefix: 'EventButtonPressed'
		body: 'EventButtonPressed()'
	'abilcmd EventTargetModeAbilCmd':
		prefix: 'EventTargetModeAbilCmd'
		body: 'EventTargetModeAbilCmd()'
	'int EventTargetModeState':
		prefix: 'EventTargetModeState'
		body: 'EventTargetModeState()'
	'int EventResourceRequestAmount':
		prefix: 'EventResourceRequestAmount'
		body: 'EventResourceRequestAmount(${1:int resourceIndex})'
	'int EventResourceTradeRecipient':
		prefix: 'EventResourceTradeRecipient'
		body: 'EventResourceTradeRecipient()'
	'int EventResourceTradeAmount':
		prefix: 'EventResourceTradeAmount'
		body: 'EventResourceTradeAmount(${1:int resourceIndex})'
	'int EventCommandErrorValue':
		prefix: 'EventCommandErrorValue'
		body: 'EventCommandErrorValue()'
	'abilcmd EventCommandErrorAbilCmd':
		prefix: 'EventCommandErrorAbilCmd'
		body: 'EventCommandErrorAbilCmd()'
	'string EventAlert':
		prefix: 'EventAlert'
		body: 'EventAlert()'
	'void VisEnable':
		prefix: 'VisEnable'
		body: 'VisEnable(${1:int visType}, ${2:bool enable})'
	'bool VisIsEnabled':
		prefix: 'VisIsEnabled'
		body: 'VisIsEnabled(${1:int visType})'
	'bool VisIsVisibleForPlayer':
		prefix: 'VisIsVisibleForPlayer'
		body: 'VisIsVisibleForPlayer(${1:int player}, ${2:point inPos})'
	'fixed VisGetFoWAlpha':
		prefix: 'VisGetFoWAlpha'
		body: 'VisGetFoWAlpha(${1:int player})'
	'void VisSetFoWAlpha':
		prefix: 'VisSetFoWAlpha'
		body: 'VisSetFoWAlpha(${1:int player}, ${2:fixed alpha})'
	'void VisResetFoWAlpha':
		prefix: 'VisResetFoWAlpha'
		body: 'VisResetFoWAlpha(${1:int player})'
	'void VisExploreArea':
		prefix: 'VisExploreArea'
		body: 'VisExploreArea(${1:int player}, ${2:region area}, ${3:bool explored}, ${4:bool checkCliffLevel})'
	'void VisFillArea':
		prefix: 'VisFillArea'
		body: 'VisFillArea(${1:int player}, ${2:region area}, ${3:int fillType}, ${4:bool checkCliffLevel})'
	'void VisRevealArea':
		prefix: 'VisRevealArea'
		body: 'VisRevealArea(${1:int player}, ${2:region area}, ${3:fixed duration}, ${4:bool checkCliffLevel})'
	'revealer VisRevealerCreate':
		prefix: 'VisRevealerCreate'
		body: 'VisRevealerCreate(${1:int player}, ${2:region area})'
	'revealer VisRevealerLastCreated':
		prefix: 'VisRevealerLastCreated'
		body: 'VisRevealerLastCreated()'
	'void VisRevealerDestroy':
		prefix: 'VisRevealerDestroy'
		body: 'VisRevealerDestroy(${1:revealer r})'
	'void VisRevealerEnable':
		prefix: 'VisRevealerEnable'
		body: 'VisRevealerEnable(${1:revealer r}, ${2:bool enable})'
	'void VisRevealerUpdate':
		prefix: 'VisRevealerUpdate'
		body: 'VisRevealerUpdate(${1:revealer r})'
	'actor libNtve_gf_AttachModelToActor':
		prefix: 'libNtve_gf_AttachModelToActor'
		body: 'libNtve_gf_AttachModelToActor(${1:actor lp_actor}, ${2:string lp_model}, ${3:string lp_attachPoint})'
	'actorscope libNtve_gf_LastCreatedActorScope':
		prefix: 'libNtve_gf_LastCreatedActorScope'
		body: 'libNtve_gf_LastCreatedActorScope()'
	'actor libNtve_gf_LastCreatedActor':
		prefix: 'libNtve_gf_LastCreatedActor'
		body: 'libNtve_gf_LastCreatedActor()'
	'actor libNtve_gf_AttachModelToUnit':
		prefix: 'libNtve_gf_AttachModelToUnit'
		body: 'libNtve_gf_AttachModelToUnit(${1:unit lp_unit}, ${2:string lp_model}, ${3:string lp_attachPoint})'
	'actor libNtve_gf_AttachModelToUnitInheritVisibility':
		prefix: 'libNtve_gf_AttachModelToUnitInheritVisibility'
		body: 'libNtve_gf_AttachModelToUnitInheritVisibility(${1:unit lp_unit}, ${2:string lp_model}, ${3:string lp_attachPoint})'
	'actor libNtve_gf_AttachModelToActor2':
		prefix: 'libNtve_gf_AttachModelToActor2'
		body: 'libNtve_gf_AttachModelToActor2(${1:actor lp_actor}, ${2:string lp_model}, ${3:string lp_attachPoint})'
	'actorscope libNtve_gf_ActorScopeLastCreated':
		prefix: 'libNtve_gf_ActorScopeLastCreated'
		body: 'libNtve_gf_ActorScopeLastCreated()'
	'actorscope libNtve_gf_ActorScopeLastCreatedSend':
		prefix: 'libNtve_gf_ActorScopeLastCreatedSend'
		body: 'libNtve_gf_ActorScopeLastCreatedSend()'
	'actor libNtve_gf_ActorLastCreated':
		prefix: 'libNtve_gf_ActorLastCreated'
		body: 'libNtve_gf_ActorLastCreated()'
	'actor libNtve_gf_ActorLastCreatedSend':
		prefix: 'libNtve_gf_ActorLastCreatedSend'
		body: 'libNtve_gf_ActorLastCreatedSend()'
	'actor libNtve_gf_AttachActorToUnit':
		prefix: 'libNtve_gf_AttachActorToUnit'
		body: 'libNtve_gf_AttachActorToUnit(${1:unit lp_unit}, ${2:string lp_actor}, ${3:string lp_attachPoint})'
	'actor libNtve_gf_AttachActorToActor':
		prefix: 'libNtve_gf_AttachActorToActor'
		body: 'libNtve_gf_AttachActorToActor(${1:actor lp_hostingActor}, ${2:string lp_attachingActor}, ${3:string lp_attachPoint})'
	'actor libNtve_gf_CreateActorAtPoint':
		prefix: 'libNtve_gf_CreateActorAtPoint'
		body: 'libNtve_gf_CreateActorAtPoint(${1:string lp_actor}, ${2:point lp_position})'
	'actor libNtve_gf_CreateModelAtPoint':
		prefix: 'libNtve_gf_CreateModelAtPoint'
		body: 'libNtve_gf_CreateModelAtPoint(${1:string lp_model}, ${2:point lp_position})'
	'void libNtve_gf_CreateModelWithPointFacing':
		prefix: 'libNtve_gf_CreateModelWithPointFacing'
		body: 'libNtve_gf_CreateModelWithPointFacing(${1:string lp_model}, ${2:point lp_position})'
	'void libNtve_gf_SendActorMessageToUnit':
		prefix: 'libNtve_gf_SendActorMessageToUnit'
		body: 'libNtve_gf_SendActorMessageToUnit(${1:unit lp_unit}, ${2:string lp_message})'
	'void libNtve_gf_ActorRegionSendSimple':
		prefix: 'libNtve_gf_ActorRegionSendSimple'
		body: 'libNtve_gf_ActorRegionSendSimple(${1:actor lp_region}, ${2:string lp_message})'
	'void libNtve_gf_SendActorMessageToGameRegion':
		prefix: 'libNtve_gf_SendActorMessageToGameRegion'
		body: 'libNtve_gf_SendActorMessageToGameRegion(${1:region lp_region}, ${2:string lp_message})'
	'void libNtve_gf_SendActorMessageToGameRegionWithFilters':
		prefix: 'libNtve_gf_SendActorMessageToGameRegionWithFilters'
		body: 'libNtve_gf_SendActorMessageToGameRegionWithFilters(${1:region lp_region}, ${2:int lp_intersectType}, ${3:string lp_message}, ${4:string lp_classFilters}, ${5:string lp_terms})'
	'string libNtve_gf_ActorMsg1':
		prefix: 'libNtve_gf_ActorMsg1'
		body: 'libNtve_gf_ActorMsg1(${1:string lp_msgName}, ${2:string lp_param1})'
	'string libNtve_gf_ActorMsg2':
		prefix: 'libNtve_gf_ActorMsg2'
		body: 'libNtve_gf_ActorMsg2(${1:string lp_msgName}, ${2:string lp_param1}, ${3:string lp_param2})'
	'string libNtve_gf_ActorMsg3':
		prefix: 'libNtve_gf_ActorMsg3'
		body: 'libNtve_gf_ActorMsg3(${1:string lp_msgName}, ${2:string lp_param1}, ${3:string lp_param2}, ${4:string lp_param3})'
	'string libNtve_gf_ActorMsg4':
		prefix: 'libNtve_gf_ActorMsg4'
		body: 'libNtve_gf_ActorMsg4(${1:string lp_msgName}, ${2:string lp_param1}, ${3:string lp_param2}, ${4:string lp_param3}, ${5:string lp_param4})'
	'string libNtve_gf_ActionDamage':
		prefix: 'libNtve_gf_ActionDamage'
		body: 'libNtve_gf_ActionDamage()'
	'string libNtve_gf_ActionImpact':
		prefix: 'libNtve_gf_ActionImpact'
		body: 'libNtve_gf_ActionImpact()'
	'string libNtve_gf_AliasAdd':
		prefix: 'libNtve_gf_AliasAdd'
		body: 'libNtve_gf_AliasAdd(${1:string lp_alias})'
	'string libNtve_gf_AliasRemove':
		prefix: 'libNtve_gf_AliasRemove'
		body: 'libNtve_gf_AliasRemove(${1:string lp_alias})'
	'string libNtve_gf_AnimBaselineStart':
		prefix: 'libNtve_gf_AnimBaselineStart'
		body: 'libNtve_gf_AnimBaselineStart()'
	'string libNtve_gf_AnimBaselineStop':
		prefix: 'libNtve_gf_AnimBaselineStop'
		body: 'libNtve_gf_AnimBaselineStop()'
	'string libNtve_gf_AnimBlendTimeApply':
		prefix: 'libNtve_gf_AnimBlendTimeApply'
		body: 'libNtve_gf_AnimBlendTimeApply(${1:fixed lp_blendTime})'
	'string libNtve_gf_AnimBlendTimeRemove':
		prefix: 'libNtve_gf_AnimBlendTimeRemove'
		body: 'libNtve_gf_AnimBlendTimeRemove()'
	'string libNtve_gf_AnimClear':
		prefix: 'libNtve_gf_AnimClear'
		body: 'libNtve_gf_AnimClear(${1:string lp_animName}, ${2:fixed lp_blendTime})'
	'string libNtve_gf_AnimClearAllBut':
		prefix: 'libNtve_gf_AnimClearAllBut'
		body: 'libNtve_gf_AnimClearAllBut(${1:string lp_animName}, ${2:fixed lp_blendTime})'
	'string libNtve_gf_AnimDumpDB':
		prefix: 'libNtve_gf_AnimDumpDB'
		body: 'libNtve_gf_AnimDumpDB()'
	'string libNtve_gf_AnimGroupRemoveAll':
		prefix: 'libNtve_gf_AnimGroupRemoveAll'
		body: 'libNtve_gf_AnimGroupRemoveAll()'
	'string libNtve_gf_AnimPlaySequence':
		prefix: 'libNtve_gf_AnimPlaySequence'
		body: 'libNtve_gf_AnimPlaySequence(${1:string lp_animName}, ${2:string lp_sequenceList})'
	'string libNtve_gf_AnimSetCompletion':
		prefix: 'libNtve_gf_AnimSetCompletion'
		body: 'libNtve_gf_AnimSetCompletion(${1:string lp_animName}, ${2:fixed lp_percent})'
	'string libNtve_gf_AnimSetDuration':
		prefix: 'libNtve_gf_AnimSetDuration'
		body: 'libNtve_gf_AnimSetDuration(${1:string lp_animName}, ${2:fixed lp_duration})'
	'string libNtve_gf_AnimSetPaused':
		prefix: 'libNtve_gf_AnimSetPaused'
		body: 'libNtve_gf_AnimSetPaused(${1:bool lp_pause})'
	'string libNtve_gf_AnimSetTime':
		prefix: 'libNtve_gf_AnimSetTime'
		body: 'libNtve_gf_AnimSetTime(${1:string lp_animName}, ${2:fixed lp_time}, ${3:bool lp_scaled})'
	'string libNtve_gf_AnimSetTimeScale':
		prefix: 'libNtve_gf_AnimSetTimeScale'
		body: 'libNtve_gf_AnimSetTimeScale(${1:string lp_animName}, ${2:fixed lp_scale})'
	'string libNtve_gf_AnimSetTimeScaleGlobal':
		prefix: 'libNtve_gf_AnimSetTimeScaleGlobal'
		body: 'libNtve_gf_AnimSetTimeScaleGlobal(${1:fixed lp_value})'
	'string libNtve_gf_AttachSetBearings':
		prefix: 'libNtve_gf_AttachSetBearings'
		body: 'libNtve_gf_AttachSetBearings(${1:string lp_attachMethods}, ${2:string lp_bearings})'
	'string libNtve_gf_AttachSetBearingsFrom':
		prefix: 'libNtve_gf_AttachSetBearingsFrom'
		body: 'libNtve_gf_AttachSetBearingsFrom(${1:string lp_attachMethods}, ${2:string lp_actorName}, ${3:string lp_actorSiteOps})'
	'string libNtve_gf_AttachSetPosition':
		prefix: 'libNtve_gf_AttachSetPosition'
		body: 'libNtve_gf_AttachSetPosition(${1:string lp_attachMethods}, ${2:string lp_position})'
	'string libNtve_gf_AttachSetPositionFrom':
		prefix: 'libNtve_gf_AttachSetPositionFrom'
		body: 'libNtve_gf_AttachSetPositionFrom(${1:string lp_attachMethods}, ${2:string lp_actorName}, ${3:string lp_actorSiteOps})'
	'string libNtve_gf_AttachSetRotation':
		prefix: 'libNtve_gf_AttachSetRotation'
		body: 'libNtve_gf_AttachSetRotation(${1:string lp_attachMethods}, ${2:fixed lp_rotation})'
	'string libNtve_gf_AttachSetRotationFrom':
		prefix: 'libNtve_gf_AttachSetRotationFrom'
		body: 'libNtve_gf_AttachSetRotationFrom(${1:string lp_attachMethods}, ${2:string lp_actorName}, ${3:string lp_actorSiteOps})'
	'string libNtve_gf_Create':
		prefix: 'libNtve_gf_Create'
		body: 'libNtve_gf_Create(${1:string lp_actor}, ${2:string lp_content})'
	'string libNtve_gf_CreateCopy':
		prefix: 'libNtve_gf_CreateCopy'
		body: 'libNtve_gf_CreateCopy(${1:string lp_createKey}, ${2:string lp_sourceKey})'
	'string libNtve_gf_DeathCustomize':
		prefix: 'libNtve_gf_DeathCustomize'
		body: 'libNtve_gf_DeathCustomize(${1:string lp_subname})'
	'string libNtve_gf_Destroy':
		prefix: 'libNtve_gf_Destroy'
		body: 'libNtve_gf_Destroy()'
	'string libNtve_gf_HostSiteOpsSet':
		prefix: 'libNtve_gf_HostSiteOpsSet'
		body: 'libNtve_gf_HostSiteOpsSet(${1:string lp_hostName}, ${2:string lp_ops}, ${3:int lp_holdPosition}, ${4:int lp_holdRotation})'
	'string libNtve_gf_ListAdd':
		prefix: 'libNtve_gf_ListAdd'
		body: 'libNtve_gf_ListAdd(${1:string lp_actorRefName})'
	'string libNtve_gf_ListRemove':
		prefix: 'libNtve_gf_ListRemove'
		body: 'libNtve_gf_ListRemove(${1:string lp_actorRefName})'
	'string libNtve_gf_MissileTentacleReturn':
		prefix: 'libNtve_gf_MissileTentacleReturn'
		body: 'libNtve_gf_MissileTentacleReturn()'
	'string libNtve_gf_ModelEventSuppress':
		prefix: 'libNtve_gf_ModelEventSuppress'
		body: 'libNtve_gf_ModelEventSuppress(${1:int lp_value}, ${2:string lp_event})'
	'string libNtve_gf_ModelSwap':
		prefix: 'libNtve_gf_ModelSwap'
		body: 'libNtve_gf_ModelSwap(${1:string lp_model}, ${2:int lp_variation})'
	'string libNtve_gf_MoverSetAcceleration':
		prefix: 'libNtve_gf_MoverSetAcceleration'
		body: 'libNtve_gf_MoverSetAcceleration(${1:fixed lp_value})'
	'string libNtve_gf_MoverSetDeceleration':
		prefix: 'libNtve_gf_MoverSetDeceleration'
		body: 'libNtve_gf_MoverSetDeceleration(${1:fixed lp_value})'
	'string libNtve_gf_MoverSetDestination2D':
		prefix: 'libNtve_gf_MoverSetDestination2D'
		body: 'libNtve_gf_MoverSetDestination2D(${1:fixed lp_x}, ${2:fixed lp_y})'
	'string libNtve_gf_MoverSetDestinationFrom':
		prefix: 'libNtve_gf_MoverSetDestinationFrom'
		body: 'libNtve_gf_MoverSetDestinationFrom(${1:string lp_actorRefName})'
	'string libNtve_gf_MoverSetDestinationH':
		prefix: 'libNtve_gf_MoverSetDestinationH'
		body: 'libNtve_gf_MoverSetDestinationH(${1:fixed lp_value})'
	'string libNtve_gf_MoverSetDestinationZ':
		prefix: 'libNtve_gf_MoverSetDestinationZ'
		body: 'libNtve_gf_MoverSetDestinationZ(${1:fixed lp_value})'
	'string libNtve_gf_MoverSetSpeed':
		prefix: 'libNtve_gf_MoverSetSpeed'
		body: 'libNtve_gf_MoverSetSpeed(${1:fixed lp_value})'
	'string libNtve_gf_MoverSetSpeedMax':
		prefix: 'libNtve_gf_MoverSetSpeedMax'
		body: 'libNtve_gf_MoverSetSpeedMax(${1:fixed lp_value})'
	'string libNtve_gf_MoverSetSpeedFromDuration':
		prefix: 'libNtve_gf_MoverSetSpeedFromDuration'
		body: 'libNtve_gf_MoverSetSpeedFromDuration(${1:fixed lp_value})'
	'string libNtve_gf_MoverMove':
		prefix: 'libNtve_gf_MoverMove'
		body: 'libNtve_gf_MoverMove()'
	'string libNtve_gf_MoverStop':
		prefix: 'libNtve_gf_MoverStop'
		body: 'libNtve_gf_MoverStop()'
	'string libNtve_gf_MoverStopNow':
		prefix: 'libNtve_gf_MoverStopNow'
		body: 'libNtve_gf_MoverStopNow()'
	'string libNtve_gf_MultiplyScale':
		prefix: 'libNtve_gf_MultiplyScale'
		body: 'libNtve_gf_MultiplyScale(${1:fixed lp_x}, ${2:fixed lp_y}, ${3:fixed lp_z}, ${4:fixed lp_duration})'
	'string libNtve_gf_Print':
		prefix: 'libNtve_gf_Print'
		body: 'libNtve_gf_Print(${1:string lp_string})'
	'string libNtve_gf_QueryPersistent':
		prefix: 'libNtve_gf_QueryPersistent'
		body: 'libNtve_gf_QueryPersistent(${1:string lp_enterResponseActor}, ${2:string lp_leaveResponeActor})'
	'string libNtve_gf_QueryRadius':
		prefix: 'libNtve_gf_QueryRadius'
		body: 'libNtve_gf_QueryRadius(${1:fixed lp_radius}, ${2:string lp_responseActor})'
	'string libNtve_gf_QueryRegion':
		prefix: 'libNtve_gf_QueryRegion'
		body: 'libNtve_gf_QueryRegion(${1:string lp_regionActor}, ${2:string lp_responseActor})'
	'string libNtve_gf_RefClear':
		prefix: 'libNtve_gf_RefClear'
		body: 'libNtve_gf_RefClear(${1:string lp_actorRefName})'
	'string libNtve_gf_RefDestroy':
		prefix: 'libNtve_gf_RefDestroy'
		body: 'libNtve_gf_RefDestroy(${1:string lp_actorRefName})'
	'string libNtve_gf_RefDump':
		prefix: 'libNtve_gf_RefDump'
		body: 'libNtve_gf_RefDump(${1:string lp_actorRefName})'
	'string libNtve_gf_RefNotify':
		prefix: 'libNtve_gf_RefNotify'
		body: 'libNtve_gf_RefNotify(${1:string lp_actorRefName}, ${2:string lp_subName})'
	'string libNtve_gf_RefSet':
		prefix: 'libNtve_gf_RefSet'
		body: 'libNtve_gf_RefSet(${1:string lp_actorRefName}, ${2:string lp_refSource})'
	'string libNtve_gf_RefSetFromMsg':
		prefix: 'libNtve_gf_RefSetFromMsg'
		body: 'libNtve_gf_RefSetFromMsg(${1:string lp_actorRefName}, ${2:string lp_message})'
	'string libNtve_gf_RefSetFromActor':
		prefix: 'libNtve_gf_RefSetFromActor'
		body: 'libNtve_gf_RefSetFromActor(${1:string lp_actorRefName}, ${2:string lp_refPrimary}, ${3:string lp_refSecondary})'
	'string libNtve_gf_RefSetRefreshName':
		prefix: 'libNtve_gf_RefSetRefreshName'
		body: 'libNtve_gf_RefSetRefreshName(${1:string lp_actorRefName}, ${2:string lp_refreshName})'
	'string libNtve_gf_SetBearings':
		prefix: 'libNtve_gf_SetBearings'
		body: 'libNtve_gf_SetBearings(${1:fixed lp_positionX}, ${2:fixed lp_positionY}, ${3:fixed lp_positionZ}, ${4:fixed lp_forwardX}, ${5:fixed lp_forwardY}, ${6:fixed lp_forwardZ}, ${7:fixed lp_upX}, ${8:fixed lp_upY}, ${9:fixed lp_upZ})'
	'string libNtve_gf_SetBearingsFrom':
		prefix: 'libNtve_gf_SetBearingsFrom'
		body: 'libNtve_gf_SetBearingsFrom(${1:string lp_actor})'
	'string libNtve_gf_SetBearingsH':
		prefix: 'libNtve_gf_SetBearingsH'
		body: 'libNtve_gf_SetBearingsH(${1:fixed lp_positionX}, ${2:fixed lp_positionY}, ${3:fixed lp_height}, ${4:fixed lp_forwardX}, ${5:fixed lp_forwardY}, ${6:fixed lp_forwardZ}, ${7:fixed lp_upX}, ${8:fixed lp_upY}, ${9:fixed lp_upZ})'
	'string libNtve_gf_SetFacing':
		prefix: 'libNtve_gf_SetFacing'
		body: 'libNtve_gf_SetFacing(${1:fixed lp_facing})'
	'string libNtve_gf_SetHeight':
		prefix: 'libNtve_gf_SetHeight'
		body: 'libNtve_gf_SetHeight(${1:fixed lp_height})'
	'string libNtve_gf_SetOpacity':
		prefix: 'libNtve_gf_SetOpacity'
		body: 'libNtve_gf_SetOpacity(${1:fixed lp_opacity}, ${2:fixed lp_blendDuration})'
	'string libNtve_gf_SetPosition':
		prefix: 'libNtve_gf_SetPosition'
		body: 'libNtve_gf_SetPosition(${1:fixed lp_x}, ${2:fixed lp_y}, ${3:fixed lp_z})'
	'string libNtve_gf_SetPosition2D':
		prefix: 'libNtve_gf_SetPosition2D'
		body: 'libNtve_gf_SetPosition2D(${1:fixed lp_x}, ${2:fixed lp_y})'
	'string libNtve_gf_SetPosition2DH':
		prefix: 'libNtve_gf_SetPosition2DH'
		body: 'libNtve_gf_SetPosition2DH(${1:fixed lp_x}, ${2:fixed lp_y})'
	'string libNtve_gf_SetPositionFrom':
		prefix: 'libNtve_gf_SetPositionFrom'
		body: 'libNtve_gf_SetPositionFrom(${1:string lp_actor})'
	'string libNtve_gf_SetPositionH':
		prefix: 'libNtve_gf_SetPositionH'
		body: 'libNtve_gf_SetPositionH(${1:fixed lp_x}, ${2:fixed lp_y}, ${3:fixed lp_height})'
	'string libNtve_gf_SetRenderToTextureEnabled':
		prefix: 'libNtve_gf_SetRenderToTextureEnabled'
		body: 'libNtve_gf_SetRenderToTextureEnabled(${1:bool lp_enabled})'
	'string libNtve_gf_SetRotation':
		prefix: 'libNtve_gf_SetRotation'
		body: 'libNtve_gf_SetRotation(${1:fixed lp_forwardX}, ${2:fixed lp_forwardY}, ${3:fixed lp_forwardZ}, ${4:fixed lp_upX}, ${5:fixed lp_upY}, ${6:fixed lp_upZ})'
	'string libNtve_gf_SetRotationFrom':
		prefix: 'libNtve_gf_SetRotationFrom'
		body: 'libNtve_gf_SetRotationFrom(${1:string lp_actor})'
	'string libNtve_gf_SetScale':
		prefix: 'libNtve_gf_SetScale'
		body: 'libNtve_gf_SetScale(${1:fixed lp_x}, ${2:fixed lp_y}, ${3:fixed lp_z}, ${4:fixed lp_blendDuration})'
	'string libNtve_gf_SetScaleAbsolute':
		prefix: 'libNtve_gf_SetScaleAbsolute'
		body: 'libNtve_gf_SetScaleAbsolute(${1:fixed lp_x}, ${2:fixed lp_y}, ${3:fixed lp_z}, ${4:fixed lp_blendDuration})'
	'string libNtve_gf_SetTeamColor':
		prefix: 'libNtve_gf_SetTeamColor'
		body: 'libNtve_gf_SetTeamColor(${1:color lp_diffuseColor}, ${2:color lp_emissiveColor})'
	'string libNtve_gf_SetLocalTintColor':
		prefix: 'libNtve_gf_SetLocalTintColor'
		body: 'libNtve_gf_SetLocalTintColor(${1:color lp_color})'
	'string libNtve_gf_SetTintColor':
		prefix: 'libNtve_gf_SetTintColor'
		body: 'libNtve_gf_SetTintColor(${1:color lp_color}, ${2:fixed lp_hdr}, ${3:fixed lp_duration})'
	'string libNtve_gf_SetVisibility':
		prefix: 'libNtve_gf_SetVisibility'
		body: 'libNtve_gf_SetVisibility(${1:bool lp_visible})'
	'string libNtve_gf_SetWalkAnimMoveSpeed':
		prefix: 'libNtve_gf_SetWalkAnimMoveSpeed'
		body: 'libNtve_gf_SetWalkAnimMoveSpeed(${1:fixed lp_value})'
	'string libNtve_gf_SetZ':
		prefix: 'libNtve_gf_SetZ'
		body: 'libNtve_gf_SetZ(${1:fixed lp_z})'
	'string libNtve_gf_Signal':
		prefix: 'libNtve_gf_Signal'
		body: 'libNtve_gf_Signal(${1:string lp_signal})'
	'string libNtve_gf_SoundAddDSP':
		prefix: 'libNtve_gf_SoundAddDSP'
		body: 'libNtve_gf_SoundAddDSP(${1:string lp_effect})'
	'string libNtve_gf_SoundSetMuted':
		prefix: 'libNtve_gf_SoundSetMuted'
		body: 'libNtve_gf_SoundSetMuted(${1:bool lp_mutedState}, ${2:bool lp_fade})'
	'string libNtve_gf_SoundSetOffset':
		prefix: 'libNtve_gf_SoundSetOffset'
		body: 'libNtve_gf_SoundSetOffset(${1:int lp_offset})'
	'string libNtve_gf_SoundSetPaused':
		prefix: 'libNtve_gf_SoundSetPaused'
		body: 'libNtve_gf_SoundSetPaused(${1:bool lp_pausedState}, ${2:bool lp_fade})'
	'string libNtve_gf_StatusDecrement':
		prefix: 'libNtve_gf_StatusDecrement'
		body: 'libNtve_gf_StatusDecrement(${1:string lp_statusVariable})'
	'string libNtve_gf_StatusIncrement':
		prefix: 'libNtve_gf_StatusIncrement'
		body: 'libNtve_gf_StatusIncrement(${1:string lp_statusVariable})'
	'string libNtve_gf_TextureDump':
		prefix: 'libNtve_gf_TextureDump'
		body: 'libNtve_gf_TextureDump()'
	'string libNtve_gf_TextureDumpDB':
		prefix: 'libNtve_gf_TextureDumpDB'
		body: 'libNtve_gf_TextureDumpDB()'
	'string libNtve_gf_TextureGroupApply':
		prefix: 'libNtve_gf_TextureGroupApply'
		body: 'libNtve_gf_TextureGroupApply(${1:string lp_textureProps})'
	'string libNtve_gf_TextureGroupRemove':
		prefix: 'libNtve_gf_TextureGroupRemove'
		body: 'libNtve_gf_TextureGroupRemove(${1:string lp_textureProps})'
	'string libNtve_gf_TextureSelectByID':
		prefix: 'libNtve_gf_TextureSelectByID'
		body: 'libNtve_gf_TextureSelectByID(${1:string lp_texture})'
	'string libNtve_gf_MakeMsgTextureVideoPlay':
		prefix: 'libNtve_gf_MakeMsgTextureVideoPlay'
		body: 'libNtve_gf_MakeMsgTextureVideoPlay(${1:string lp_texture}, ${2:int lp_fPS}, ${3:int lp_textureVideoPlayFlags}, ${4:int lp_soundType}, ${5:string lp_attachQuery})'
	'string libNtve_gf_TextureVideoSetFrame':
		prefix: 'libNtve_gf_TextureVideoSetFrame'
		body: 'libNtve_gf_TextureVideoSetFrame(${1:string lp_texture}, ${2:int lp_frame})'
	'string libNtve_gf_TextureVideoSetPaused':
		prefix: 'libNtve_gf_TextureVideoSetPaused'
		body: 'libNtve_gf_TextureVideoSetPaused(${1:string lp_texture}, ${2:bool lp_pauseState})'
	'string libNtve_gf_TextureVideoSetTime':
		prefix: 'libNtve_gf_TextureVideoSetTime'
		body: 'libNtve_gf_TextureVideoSetTime(${1:string lp_texture}, ${2:fixed lp_time})'
	'string libNtve_gf_TextureVideoStop':
		prefix: 'libNtve_gf_TextureVideoStop'
		body: 'libNtve_gf_TextureVideoStop(${1:string lp_texture})'
	'string libNtve_gf_TextureVideoStopAll':
		prefix: 'libNtve_gf_TextureVideoStopAll'
		body: 'libNtve_gf_TextureVideoStopAll()'
	'string libNtve_gf_TimerSet':
		prefix: 'libNtve_gf_TimerSet'
		body: 'libNtve_gf_TimerSet(${1:fixed lp_duration}, ${2:string lp_timerName})'
	'string libNtve_gf_TimerKill':
		prefix: 'libNtve_gf_TimerKill'
		body: 'libNtve_gf_TimerKill(${1:string lp_timerName})'
	'void libNtve_gf_KillModel':
		prefix: 'libNtve_gf_KillModel'
		body: 'libNtve_gf_KillModel(${1:actor lp_model})'
	'void libNtve_gf_RemoveDoodadsinRegion':
		prefix: 'libNtve_gf_RemoveDoodadsinRegion'
		body: 'libNtve_gf_RemoveDoodadsinRegion(${1:region lp_target}, ${2:string lp_doodadType})'
	'void libNtve_gf_RemoveDeathModelsinRegion':
		prefix: 'libNtve_gf_RemoveDeathModelsinRegion'
		body: 'libNtve_gf_RemoveDeathModelsinRegion(${1:region lp_region})'
	'void libNtve_gf_RemoveDeathModelsinRegionImmediately':
		prefix: 'libNtve_gf_RemoveDeathModelsinRegionImmediately'
		body: 'libNtve_gf_RemoveDeathModelsinRegionImmediately(${1:region lp_region})'
	'actor libNtve_gf_LookAtTargetFromPointWithZOffset':
		prefix: 'libNtve_gf_LookAtTargetFromPointWithZOffset'
		body: 'libNtve_gf_LookAtTargetFromPointWithZOffset(${1:point lp_point}, ${2:fixed lp_z})'
	'actor libNtve_gf_LookAtTargetFromUnitAttachPoint':
		prefix: 'libNtve_gf_LookAtTargetFromUnitAttachPoint'
		body: 'libNtve_gf_LookAtTargetFromUnitAttachPoint(${1:unit lp_unit}, ${2:string lp_attachPoint})'
	'void libNtve_gf_CreateLookAtTargetAtPoint':
		prefix: 'libNtve_gf_CreateLookAtTargetAtPoint'
		body: 'libNtve_gf_CreateLookAtTargetAtPoint(${1:point lp_point})'
	'void libNtve_gf_CreateLookAtTargetAtUnitAttachPoint':
		prefix: 'libNtve_gf_CreateLookAtTargetAtUnitAttachPoint'
		body: 'libNtve_gf_CreateLookAtTargetAtUnitAttachPoint(${1:unit lp_unit}, ${2:string lp_attachPoint})'
	'void libNtve_gf_SimpleLookAtStart':
		prefix: 'libNtve_gf_SimpleLookAtStart'
		body: 'libNtve_gf_SimpleLookAtStart(${1:unit lp_unit}, ${2:string lp_type}, ${3:actor lp_lookAtTarget})'
	'void libNtve_gf_MakeUnitLookAtPoint':
		prefix: 'libNtve_gf_MakeUnitLookAtPoint'
		body: 'libNtve_gf_MakeUnitLookAtPoint(${1:unit lp_unit}, ${2:string lp_type}, ${3:point lp_point})'
	'void libNtve_gf_MakeUnitLookAtUnit':
		prefix: 'libNtve_gf_MakeUnitLookAtUnit'
		body: 'libNtve_gf_MakeUnitLookAtUnit(${1:unit lp_unit}, ${2:string lp_type}, ${3:unit lp_lookAtTargetUnit}, ${4:string lp_attachPoint})'
	'void libNtve_gf_SimpleLookAtStop':
		prefix: 'libNtve_gf_SimpleLookAtStop'
		body: 'libNtve_gf_SimpleLookAtStop(${1:unit lp_unit}, ${2:string lp_type})'
	'actor libNtve_gf_MainActorofUnit':
		prefix: 'libNtve_gf_MainActorofUnit'
		body: 'libNtve_gf_MainActorofUnit(${1:unit lp_unit})'
	'void libNtve_gf_MakeModelFaceAngle':
		prefix: 'libNtve_gf_MakeModelFaceAngle'
		body: 'libNtve_gf_MakeModelFaceAngle(${1:actor lp_model}, ${2:fixed lp_angle})'
	'void libNtve_gf_PlayMovieTextureOnUnitActor':
		prefix: 'libNtve_gf_PlayMovieTextureOnUnitActor'
		body: 'libNtve_gf_PlayMovieTextureOnUnitActor(${1:unit lp_unit}, ${2:string lp_movieTexture})'
	'void libNtve_gf_StopAllVideoTexturesOnUnit':
		prefix: 'libNtve_gf_StopAllVideoTexturesOnUnit'
		body: 'libNtve_gf_StopAllVideoTexturesOnUnit(${1:unit lp_unit})'
	'void libNtve_gf_ShowHideDoodadsInRegion':
		prefix: 'libNtve_gf_ShowHideDoodadsInRegion'
		body: 'libNtve_gf_ShowHideDoodadsInRegion(${1:bool lp_showHide}, ${2:region lp_target}, ${3:string lp_doodadType})'
	'int libNtve_gf_DifficultyValueInt':
		prefix: 'libNtve_gf_DifficultyValueInt'
		body: 'libNtve_gf_DifficultyValueInt(${1:int lp_easy}, ${2:int lp_normal}, ${3:int lp_advanced}, ${4:int lp_expert})'
	'fixed libNtve_gf_DifficultyValueFixed':
		prefix: 'libNtve_gf_DifficultyValueFixed'
		body: 'libNtve_gf_DifficultyValueFixed(${1:fixed lp_easy}, ${2:fixed lp_normal}, ${3:fixed lp_advanced}, ${4:fixed lp_expert})'
	'string libNtve_gf_DifficultyValueUnitType':
		prefix: 'libNtve_gf_DifficultyValueUnitType'
		body: 'libNtve_gf_DifficultyValueUnitType(${1:string lp_easy}, ${2:string lp_normal}, ${3:string lp_advanced}, ${4:string lp_expert})'
	'void libNtve_gf_AICast':
		prefix: 'libNtve_gf_AICast'
		body: 'libNtve_gf_AICast(${1:unit lp_unit}, ${2:order lp_order})'
	'void libNtve_gf_DeclareNextTown':
		prefix: 'libNtve_gf_DeclareNextTown'
		body: 'libNtve_gf_DeclareNextTown(${1:int lp_player}, ${2:point lp_center})'
	'void libNtve_gf_SetTacticalAIRange':
		prefix: 'libNtve_gf_SetTacticalAIRange'
		body: 'libNtve_gf_SetTacticalAIRange(${1:int lp_player}, ${2:string lp_unitType}, ${3:int lp_distance})'
	'void libNtve_gf_SetTacticalAIThink':
		prefix: 'libNtve_gf_SetTacticalAIThink'
		body: 'libNtve_gf_SetTacticalAIThink(${1:int lp_player}, ${2:string lp_unitType}, ${3:string lp_target}, ${4:bool lp_isNative})'
	'void libNtve_gf_PlayAnimation':
		prefix: 'libNtve_gf_PlayAnimation'
		body: 'libNtve_gf_PlayAnimation(${1:actor lp_target}, ${2:string lp_identifier}, ${3:string lp_animation}, ${4:int lp_flags}, ${5:fixed lp_blendTime})'
	'void libNtve_gf_PlayAnimationOnDoodadsInRegion':
		prefix: 'libNtve_gf_PlayAnimationOnDoodadsInRegion'
		body: 'libNtve_gf_PlayAnimationOnDoodadsInRegion(${1:region lp_target}, ${2:string lp_doodadType}, ${3:string lp_identifier}, ${4:string lp_animation}, ${5:int lp_flags}, ${6:fixed lp_blendTime})'
	'void libNtve_gf_KillDoodadsInRegion':
		prefix: 'libNtve_gf_KillDoodadsInRegion'
		body: 'libNtve_gf_KillDoodadsInRegion(${1:region lp_target}, ${2:string lp_doodadType})'
	'void libNtve_gf_ClearAnimation':
		prefix: 'libNtve_gf_ClearAnimation'
		body: 'libNtve_gf_ClearAnimation(${1:actor lp_target}, ${2:string lp_identifier})'
	'void libNtve_gf_ClearAnimationOnDoodadsInRegion':
		prefix: 'libNtve_gf_ClearAnimationOnDoodadsInRegion'
		body: 'libNtve_gf_ClearAnimationOnDoodadsInRegion(${1:region lp_target}, ${2:string lp_doodadType}, ${3:string lp_identifier})'
	'void libNtve_gf_TurnAnimationPropertiesOn':
		prefix: 'libNtve_gf_TurnAnimationPropertiesOn'
		body: 'libNtve_gf_TurnAnimationPropertiesOn(${1:actor lp_target}, ${2:string lp_prop})'
	'void libNtve_gf_TurnAnimationPropertiesOnWithBlendInOut':
		prefix: 'libNtve_gf_TurnAnimationPropertiesOnWithBlendInOut'
		body: 'libNtve_gf_TurnAnimationPropertiesOnWithBlendInOut(${1:actor lp_target}, ${2:string lp_prop}, ${3:string lp_blendInAnimation}, ${4:string lp_blendOutAnimation})'
	'void libNtve_gf_TurnAnimationPropertiesOff':
		prefix: 'libNtve_gf_TurnAnimationPropertiesOff'
		body: 'libNtve_gf_TurnAnimationPropertiesOff(${1:actor lp_target}, ${2:string lp_prop})'
	'void libNtve_gf_TurnAllAnimationPropertiesOff':
		prefix: 'libNtve_gf_TurnAllAnimationPropertiesOff'
		body: 'libNtve_gf_TurnAllAnimationPropertiesOff(${1:actor lp_target})'
	'void libNtve_gf_SetAnimationTime':
		prefix: 'libNtve_gf_SetAnimationTime'
		body: 'libNtve_gf_SetAnimationTime(${1:actor lp_target}, ${2:string lp_identifier}, ${3:fixed lp_time}, ${4:bool lp_scaled})'
	'void libNtve_gf_SetAnimationTimeScale':
		prefix: 'libNtve_gf_SetAnimationTimeScale'
		body: 'libNtve_gf_SetAnimationTimeScale(${1:actor lp_target}, ${2:string lp_identifier}, ${3:fixed lp_scale})'
	'void libNtve_gf_SetAnimationCompletion':
		prefix: 'libNtve_gf_SetAnimationCompletion'
		body: 'libNtve_gf_SetAnimationCompletion(${1:actor lp_target}, ${2:string lp_identifier}, ${3:fixed lp_percent})'
	'void libNtve_gf_SetAnimationDuration':
		prefix: 'libNtve_gf_SetAnimationDuration'
		body: 'libNtve_gf_SetAnimationDuration(${1:actor lp_target}, ${2:string lp_identifier}, ${3:fixed lp_duration})'
	'void libNtve_gf_SwooshCamera':
		prefix: 'libNtve_gf_SwooshCamera'
		body: 'libNtve_gf_SwooshCamera(${1:int lp_player}, ${2:fixed lp_distance1}, ${3:fixed lp_distance2}, ${4:point lp_location}, ${5:fixed lp_duration})'
	'camerainfo libNtve_gf_CopyOfCameraObject':
		prefix: 'libNtve_gf_CopyOfCameraObject'
		body: 'libNtve_gf_CopyOfCameraObject(${1:camerainfo lp_cam})'
	'fixed libNtve_gf_CostOfAbility':
		prefix: 'libNtve_gf_CostOfAbility'
		body: 'libNtve_gf_CostOfAbility(${1:string lp_ability}, ${2:string lp_costType})'
	'void libNtve_gf__CineModeTurnOnOffForPlayer':
		prefix: 'libNtve_gf__CineModeTurnOnOffForPlayer'
		body: 'libNtve_gf__CineModeTurnOnOffForPlayer(${1:int lp_player}, ${2:bool lp_onOff})'
	'void libNtve_gf__CineModeTurnOnOffForPlayerGroup':
		prefix: 'libNtve_gf__CineModeTurnOnOffForPlayerGroup'
		body: 'libNtve_gf__CineModeTurnOnOffForPlayerGroup(${1:playergroup lp_players}, ${2:bool lp_onOff})'
	'bool libNtve_gf__CineModeFogSetting':
		prefix: 'libNtve_gf__CineModeFogSetting'
		body: 'libNtve_gf__CineModeFogSetting(${1:int lp_player})'
	'void libNtve_gf__CineModeChangeFogSettingForPlayer':
		prefix: 'libNtve_gf__CineModeChangeFogSettingForPlayer'
		body: 'libNtve_gf__CineModeChangeFogSettingForPlayer(${1:int lp_player}, ${2:bool lp_fog})'
	'void libNtve_gf__CineModeChangeFogSettingForPlayerGroup':
		prefix: 'libNtve_gf__CineModeChangeFogSettingForPlayerGroup'
		body: 'libNtve_gf__CineModeChangeFogSettingForPlayerGroup(${1:playergroup lp_players}, ${2:bool lp_fog})'
	'bool libNtve_gf__CineModeMaskSetting':
		prefix: 'libNtve_gf__CineModeMaskSetting'
		body: 'libNtve_gf__CineModeMaskSetting(${1:int lp_player})'
	'void libNtve_gf__CineModeChangeMaskSettingForPlayer':
		prefix: 'libNtve_gf__CineModeChangeMaskSettingForPlayer'
		body: 'libNtve_gf__CineModeChangeMaskSettingForPlayer(${1:int lp_player}, ${2:bool lp_mask})'
	'void libNtve_gf__CineModeChangeMaskSettingForPlayerGroup':
		prefix: 'libNtve_gf__CineModeChangeMaskSettingForPlayerGroup'
		body: 'libNtve_gf__CineModeChangeMaskSettingForPlayerGroup(${1:playergroup lp_players}, ${2:bool lp_mask})'
	'void libNtve_gf__CineModeHideUI':
		prefix: 'libNtve_gf__CineModeHideUI'
		body: 'libNtve_gf__CineModeHideUI(${1:playergroup lp_players})'
	'void libNtve_gf__CineModeRestoreUI':
		prefix: 'libNtve_gf__CineModeRestoreUI'
		body: 'libNtve_gf__CineModeRestoreUI(${1:playergroup lp_players})'
	'void libNtve_gf__CineModeStoreCheatStatus':
		prefix: 'libNtve_gf__CineModeStoreCheatStatus'
		body: 'libNtve_gf__CineModeStoreCheatStatus()'
	'void libNtve_gf__CineModeRestoreCheatStatus':
		prefix: 'libNtve_gf__CineModeRestoreCheatStatus'
		body: 'libNtve_gf__CineModeRestoreCheatStatus()'
	'void libNtve_gf_CinematicMode':
		prefix: 'libNtve_gf_CinematicMode'
		body: 'libNtve_gf_CinematicMode(${1:bool lp_onOff}, ${2:playergroup lp_players}, ${3:fixed lp_duration})'
	'void libNtve_gf_GlobalCinematicSetting':
		prefix: 'libNtve_gf_GlobalCinematicSetting'
		body: 'libNtve_gf_GlobalCinematicSetting(${1:bool lp_onOff})'
	'void libNtve_gf_SetCinematicTransitionStyle':
		prefix: 'libNtve_gf_SetCinematicTransitionStyle'
		body: 'libNtve_gf_SetCinematicTransitionStyle(${1:int lp_style})'
	'bool libNtve_gf_PlayerInCinematicMode':
		prefix: 'libNtve_gf_PlayerInCinematicMode'
		body: 'libNtve_gf_PlayerInCinematicMode(${1:int lp_player})'
	'void libNtve_gf_MovieDynamicSubtitlesandDuration':
		prefix: 'libNtve_gf_MovieDynamicSubtitlesandDuration'
		body: 'libNtve_gf_MovieDynamicSubtitlesandDuration(${1:string lp_soundFile})'
	'text libNtve_gf_ConvertBooleanToText':
		prefix: 'libNtve_gf_ConvertBooleanToText'
		body: 'libNtve_gf_ConvertBooleanToText(${1:bool lp_value})'
	'string libNtve_gf_ConvertBooleanToString':
		prefix: 'libNtve_gf_ConvertBooleanToString'
		body: 'libNtve_gf_ConvertBooleanToString(${1:bool lp_value})'
	'bool libNtve_gf_ConvertStringToBoolean':
		prefix: 'libNtve_gf_ConvertStringToBoolean'
		body: 'libNtve_gf_ConvertStringToBoolean(${1:string lp_value})'
	'string libNtve_gf_ConvertPointToString':
		prefix: 'libNtve_gf_ConvertPointToString'
		body: 'libNtve_gf_ConvertPointToString(${1:point lp_value})'
	'point libNtve_gf_ConvertStringToPoint':
		prefix: 'libNtve_gf_ConvertStringToPoint'
		body: 'libNtve_gf_ConvertStringToPoint(${1:string lp_value})'
	'color libNtve_gf_ConvertPlayerColorToColor':
		prefix: 'libNtve_gf_ConvertPlayerColorToColor'
		body: 'libNtve_gf_ConvertPlayerColorToColor(${1:int lp_playerColor})'
	'string libNtve_gf_ConvertColorToString':
		prefix: 'libNtve_gf_ConvertColorToString'
		body: 'libNtve_gf_ConvertColorToString(${1:color lp_color})'
	'string libNtve_gf_ConvertBearingsToString':
		prefix: 'libNtve_gf_ConvertBearingsToString'
		body: 'libNtve_gf_ConvertBearingsToString(${1:fixed lp_positionX}, ${2:fixed lp_positionY}, ${3:fixed lp_positionZ}, ${4:fixed lp_forwardX}, ${5:fixed lp_forwardY}, ${6:fixed lp_forwardZ}, ${7:fixed lp_upX}, ${8:fixed lp_upY}, ${9:fixed lp_upZ})'
	'string libNtve_gf_ConvertXYToString':
		prefix: 'libNtve_gf_ConvertXYToString'
		body: 'libNtve_gf_ConvertXYToString(${1:fixed lp_x}, ${2:fixed lp_y})'
	'string libNtve_gf_Convert3DVectorToString':
		prefix: 'libNtve_gf_Convert3DVectorToString'
		body: 'libNtve_gf_Convert3DVectorToString(${1:fixed lp_x}, ${2:fixed lp_y}, ${3:fixed lp_z})'
	'string libNtve_gf_Convert3DRotationToString':
		prefix: 'libNtve_gf_Convert3DRotationToString'
		body: 'libNtve_gf_Convert3DRotationToString(${1:fixed lp_forwardX}, ${2:fixed lp_forwardY}, ${3:fixed lp_forwardZ}, ${4:fixed lp_upX}, ${5:fixed lp_upY}, ${6:fixed lp_upZ})'
	'string libNtve_gf_ConvertStringToUILayoutFrameName':
		prefix: 'libNtve_gf_ConvertStringToUILayoutFrameName'
		body: 'libNtve_gf_ConvertStringToUILayoutFrameName(${1:string lp_value})'
	'void libNtve_gf_SaveDataTableValueDialogItem':
		prefix: 'libNtve_gf_SaveDataTableValueDialogItem'
		body: 'libNtve_gf_SaveDataTableValueDialogItem(${1:bool lp_scope}, ${2:string lp_name}, ${3:int lp_value})'
	'void libNtve_gf_SaveDataTableValueDifficultyLevel':
		prefix: 'libNtve_gf_SaveDataTableValueDifficultyLevel'
		body: 'libNtve_gf_SaveDataTableValueDifficultyLevel(${1:bool lp_scope}, ${2:string lp_name}, ${3:int lp_value})'
	'void libNtve_gf_SaveDataTableValuePlayerColor':
		prefix: 'libNtve_gf_SaveDataTableValuePlayerColor'
		body: 'libNtve_gf_SaveDataTableValuePlayerColor(${1:bool lp_scope}, ${2:string lp_name}, ${3:int lp_value})'
	'void libNtve_gf_SaveDataTableValueTextTag':
		prefix: 'libNtve_gf_SaveDataTableValueTextTag'
		body: 'libNtve_gf_SaveDataTableValueTextTag(${1:bool lp_scope}, ${2:string lp_name}, ${3:int lp_value})'
	'int libNtve_gf_ValueFromDataTableDialogItem':
		prefix: 'libNtve_gf_ValueFromDataTableDialogItem'
		body: 'libNtve_gf_ValueFromDataTableDialogItem(${1:bool lp_scope}, ${2:string lp_name})'
	'int libNtve_gf_ValueFromDataTableDifficultyLevel':
		prefix: 'libNtve_gf_ValueFromDataTableDifficultyLevel'
		body: 'libNtve_gf_ValueFromDataTableDifficultyLevel(${1:bool lp_scope}, ${2:string lp_name})'
	'int libNtve_gf_ValueFromDataTablePlayerColor':
		prefix: 'libNtve_gf_ValueFromDataTablePlayerColor'
		body: 'libNtve_gf_ValueFromDataTablePlayerColor(${1:bool lp_scope}, ${2:string lp_name})'
	'int libNtve_gf_ValueFromDataTableTextTag':
		prefix: 'libNtve_gf_ValueFromDataTableTextTag'
		body: 'libNtve_gf_ValueFromDataTableTextTag(${1:bool lp_scope}, ${2:string lp_name})'
	'int libNtve_gf_ConvertIntegerToDebugMessageType':
		prefix: 'libNtve_gf_ConvertIntegerToDebugMessageType'
		body: 'libNtve_gf_ConvertIntegerToDebugMessageType(${1:int lp_value})'
	'void libNtve_gf_SetDialogItemText':
		prefix: 'libNtve_gf_SetDialogItemText'
		body: 'libNtve_gf_SetDialogItemText(${1:int lp_dialogItem}, ${2:text lp_text}, ${3:playergroup lp_players})'
	'text libNtve_gf_DialogItemText':
		prefix: 'libNtve_gf_DialogItemText'
		body: 'libNtve_gf_DialogItemText(${1:int lp_dialogItem}, ${2:int lp_player})'
	'int libNtve_gf_CreateDialogItemAchievement':
		prefix: 'libNtve_gf_CreateDialogItemAchievement'
		body: 'libNtve_gf_CreateDialogItemAchievement(${1:int lp_dialog}, ${2:int lp_width}, ${3:int lp_height}, ${4:int lp_anchor}, ${5:int lp_offsetX}, ${6:int lp_offsetY}, ${7:text lp_tooltip}, ${8:string lp_achievement})'
	'int libNtve_gf_CreateDialogItemButton':
		prefix: 'libNtve_gf_CreateDialogItemButton'
		body: 'libNtve_gf_CreateDialogItemButton(${1:int lp_dialog}, ${2:int lp_width}, ${3:int lp_height}, ${4:int lp_anchor}, ${5:int lp_offsetX}, ${6:int lp_offsetY}, ${7:text lp_tooltip}, ${8:text lp_buttonText}, ${9:string lp_hoverImage})'
	'int libNtve_gf_CreateDialogItemCheckBox':
		prefix: 'libNtve_gf_CreateDialogItemCheckBox'
		body: 'libNtve_gf_CreateDialogItemCheckBox(${1:int lp_dialog}, ${2:int lp_width}, ${3:int lp_height}, ${4:int lp_anchor}, ${5:int lp_offsetX}, ${6:int lp_offsetY}, ${7:text lp_tooltip}, ${8:bool lp_checked})'
	'int libNtve_gf_CreateDialogItemImage':
		prefix: 'libNtve_gf_CreateDialogItemImage'
		body: 'libNtve_gf_CreateDialogItemImage(${1:int lp_dialog}, ${2:int lp_width}, ${3:int lp_height}, ${4:int lp_anchor}, ${5:int lp_offsetX}, ${6:int lp_offsetY}, ${7:text lp_tooltip}, ${8:string lp_image}, ${9:int lp_imageType}, ${10:bool lp_tiled}, ${11:color lp_tintColor}, ${12:int lp_blendMode})'
	'int libNtve_gf_CreateDialogItemLabel':
		prefix: 'libNtve_gf_CreateDialogItemLabel'
		body: 'libNtve_gf_CreateDialogItemLabel(${1:int lp_dialog}, ${2:int lp_width}, ${3:int lp_height}, ${4:int lp_anchor}, ${5:int lp_offsetX}, ${6:int lp_offsetY}, ${7:text lp_text}, ${8:color lp_color}, ${9:bool lp_textWriteout}, ${10:fixed lp_textWriteoutDuration})'
	'void libNtve_gf_SetDialogItemRotation':
		prefix: 'libNtve_gf_SetDialogItemRotation'
		body: 'libNtve_gf_SetDialogItemRotation(${1:int lp_dialogItem}, ${2:int lp_rotation}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemtoUseAspectUncorrection':
		prefix: 'libNtve_gf_SetDialogItemtoUseAspectUncorrection'
		body: 'libNtve_gf_SetDialogItemtoUseAspectUncorrection(${1:int lp_dialogItem}, ${2:bool lp_useAspectUncorrection}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemCurrentValue':
		prefix: 'libNtve_gf_SetDialogItemCurrentValue'
		body: 'libNtve_gf_SetDialogItemCurrentValue(${1:int lp_dialogItem}, ${2:fixed lp_currentValue}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemMinimumValue':
		prefix: 'libNtve_gf_SetDialogItemMinimumValue'
		body: 'libNtve_gf_SetDialogItemMinimumValue(${1:int lp_dialogItem}, ${2:fixed lp_minValue}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemMaximumValue':
		prefix: 'libNtve_gf_SetDialogItemMaximumValue'
		body: 'libNtve_gf_SetDialogItemMaximumValue(${1:int lp_dialogItem}, ${2:fixed lp_maxValue}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemChecked':
		prefix: 'libNtve_gf_SetDialogItemChecked'
		body: 'libNtve_gf_SetDialogItemChecked(${1:int lp_dialogItem}, ${2:bool lp_checked}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemEditorValue':
		prefix: 'libNtve_gf_SetDialogItemEditorValue'
		body: 'libNtve_gf_SetDialogItemEditorValue(${1:int lp_dialogItem}, ${2:string lp_value}, ${3:playergroup lp_players})'
	'fixed libNtve_gf_DialogItemValue':
		prefix: 'libNtve_gf_DialogItemValue'
		body: 'libNtve_gf_DialogItemValue(${1:int lp_dialogItem}, ${2:int lp_player})'
	'fixed libNtve_gf_DialogItemMaximumValue':
		prefix: 'libNtve_gf_DialogItemMaximumValue'
		body: 'libNtve_gf_DialogItemMaximumValue(${1:int lp_dialogItem}, ${2:int lp_player})'
	'fixed libNtve_gf_DialogItemMinimumValue':
		prefix: 'libNtve_gf_DialogItemMinimumValue'
		body: 'libNtve_gf_DialogItemMinimumValue(${1:int lp_dialogItem}, ${2:int lp_player})'
	'bool libNtve_gf_DialogItemIsChecked':
		prefix: 'libNtve_gf_DialogItemIsChecked'
		body: 'libNtve_gf_DialogItemIsChecked(${1:int lp_dialogItem}, ${2:int lp_player})'
	'string libNtve_gf_DialogItemEditValue':
		prefix: 'libNtve_gf_DialogItemEditValue'
		body: 'libNtve_gf_DialogItemEditValue(${1:int lp_dialogItem}, ${2:int lp_player})'
	'void libNtve_gf_SetDialogItemColor':
		prefix: 'libNtve_gf_SetDialogItemColor'
		body: 'libNtve_gf_SetDialogItemColor(${1:int lp_dialogItem}, ${2:color lp_color}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemStyle':
		prefix: 'libNtve_gf_SetDialogItemStyle'
		body: 'libNtve_gf_SetDialogItemStyle(${1:int lp_dialogItem}, ${2:string lp_style}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemTextWriteout':
		prefix: 'libNtve_gf_SetDialogItemTextWriteout'
		body: 'libNtve_gf_SetDialogItemTextWriteout(${1:int lp_dialogItem}, ${2:bool lp_writeout}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemTextWriteoutDuration':
		prefix: 'libNtve_gf_SetDialogItemTextWriteoutDuration'
		body: 'libNtve_gf_SetDialogItemTextWriteoutDuration(${1:int lp_dialogItem}, ${2:fixed lp_duration}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemTooltip':
		prefix: 'libNtve_gf_SetDialogItemTooltip'
		body: 'libNtve_gf_SetDialogItemTooltip(${1:int lp_dialogItem}, ${2:text lp_tooltip}, ${3:playergroup lp_players})'
	'color libNtve_gf_DialogItemColor':
		prefix: 'libNtve_gf_DialogItemColor'
		body: 'libNtve_gf_DialogItemColor(${1:int lp_dialogItem}, ${2:int lp_player})'
	'string libNtve_gf_DialogItemStyle':
		prefix: 'libNtve_gf_DialogItemStyle'
		body: 'libNtve_gf_DialogItemStyle(${1:int lp_dialogItem}, ${2:int lp_player})'
	'text libNtve_gf_DialogItemTooltip':
		prefix: 'libNtve_gf_DialogItemTooltip'
		body: 'libNtve_gf_DialogItemTooltip(${1:int lp_dialogItem}, ${2:int lp_player})'
	'void libNtve_gf_SetDialogItemImage':
		prefix: 'libNtve_gf_SetDialogItemImage'
		body: 'libNtve_gf_SetDialogItemImage(${1:int lp_dialogItem}, ${2:string lp_image}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemImage2':
		prefix: 'libNtve_gf_SetDialogItemImage2'
		body: 'libNtve_gf_SetDialogItemImage2(${1:int lp_dialogItem}, ${2:string lp_image}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemImageType':
		prefix: 'libNtve_gf_SetDialogItemImageType'
		body: 'libNtve_gf_SetDialogItemImageType(${1:int lp_dialogItem}, ${2:int lp_imageType}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemBlendMode':
		prefix: 'libNtve_gf_SetDialogItemBlendMode'
		body: 'libNtve_gf_SetDialogItemBlendMode(${1:int lp_dialogItem}, ${2:int lp_blendMode}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemImageType2':
		prefix: 'libNtve_gf_SetDialogItemImageType2'
		body: 'libNtve_gf_SetDialogItemImageType2(${1:int lp_dialogItem}, ${2:bool lp_tiled}, ${3:playergroup lp_players})'
	'string libNtve_gf_DialogItemImage':
		prefix: 'libNtve_gf_DialogItemImage'
		body: 'libNtve_gf_DialogItemImage(${1:int lp_dialogItem}, ${2:int lp_player})'
	'int libNtve_gf_DialogItemImageType':
		prefix: 'libNtve_gf_DialogItemImageType'
		body: 'libNtve_gf_DialogItemImageType(${1:int lp_dialogItem}, ${2:int lp_player})'
	'void libNtve_gf_SetDialogItemFlash':
		prefix: 'libNtve_gf_SetDialogItemFlash'
		body: 'libNtve_gf_SetDialogItemFlash(${1:int lp_dialogItem}, ${2:string lp_flash}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemCutscene':
		prefix: 'libNtve_gf_SetDialogItemCutscene'
		body: 'libNtve_gf_SetDialogItemCutscene(${1:int lp_dialogItem}, ${2:string lp_cutscene}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemAchievement':
		prefix: 'libNtve_gf_SetDialogItemAchievement'
		body: 'libNtve_gf_SetDialogItemAchievement(${1:int lp_dialogItem}, ${2:string lp_achievement}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemRenderPriority':
		prefix: 'libNtve_gf_SetDialogItemRenderPriority'
		body: 'libNtve_gf_SetDialogItemRenderPriority(${1:int lp_dialogItem}, ${2:int lp_renderPriority}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemClickOnDown':
		prefix: 'libNtve_gf_SetDialogItemClickOnDown'
		body: 'libNtve_gf_SetDialogItemClickOnDown(${1:int lp_dialogItem}, ${2:bool lp_clickOnDown}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemToggled':
		prefix: 'libNtve_gf_SetDialogItemToggled'
		body: 'libNtve_gf_SetDialogItemToggled(${1:int lp_dialogItem}, ${2:bool lp_toggled}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemMovie':
		prefix: 'libNtve_gf_SetDialogItemMovie'
		body: 'libNtve_gf_SetDialogItemMovie(${1:int lp_dialogItem}, ${2:string lp_movie}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemDesaturated':
		prefix: 'libNtve_gf_SetDialogItemDesaturated'
		body: 'libNtve_gf_SetDialogItemDesaturated(${1:int lp_dialogItem}, ${2:bool lp_desaturated}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemDesaturationColor':
		prefix: 'libNtve_gf_SetDialogItemDesaturationColor'
		body: 'libNtve_gf_SetDialogItemDesaturationColor(${1:int lp_dialogItem}, ${2:color lp_color}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemCustomTooltip':
		prefix: 'libNtve_gf_SetDialogItemCustomTooltip'
		body: 'libNtve_gf_SetDialogItemCustomTooltip(${1:int lp_dialogItem}, ${2:int lp_tooltip}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemUnit':
		prefix: 'libNtve_gf_SetDialogItemUnit'
		body: 'libNtve_gf_SetDialogItemUnit(${1:int lp_dialogItem}, ${2:unit lp_unit}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemModel':
		prefix: 'libNtve_gf_SetDialogItemModel'
		body: 'libNtve_gf_SetDialogItemModel(${1:int lp_dialogItem}, ${2:string lp_model}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemAnimation':
		prefix: 'libNtve_gf_SetDialogItemAnimation'
		body: 'libNtve_gf_SetDialogItemAnimation(${1:int lp_dialogItem}, ${2:string lp_animation}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemCamera':
		prefix: 'libNtve_gf_SetDialogItemCamera'
		body: 'libNtve_gf_SetDialogItemCamera(${1:int lp_dialogItem}, ${2:string lp_camera}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemBorderVisible':
		prefix: 'libNtve_gf_SetDialogItemBorderVisible'
		body: 'libNtve_gf_SetDialogItemBorderVisible(${1:int lp_dialogItem}, ${2:bool lp_visible}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemBorderImage':
		prefix: 'libNtve_gf_SetDialogItemBorderImage'
		body: 'libNtve_gf_SetDialogItemBorderImage(${1:int lp_dialogItem}, ${2:string lp_image}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemBackgroundVisible':
		prefix: 'libNtve_gf_SetDialogItemBackgroundVisible'
		body: 'libNtve_gf_SetDialogItemBackgroundVisible(${1:int lp_dialogItem}, ${2:bool lp_visible}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemUseTransition':
		prefix: 'libNtve_gf_SetDialogItemUseTransition'
		body: 'libNtve_gf_SetDialogItemUseTransition(${1:int lp_dialogItem}, ${2:bool lp_useTransition}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemMuted':
		prefix: 'libNtve_gf_SetDialogItemMuted'
		body: 'libNtve_gf_SetDialogItemMuted(${1:int lp_dialogItem}, ${2:bool lp_muted}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemPaused':
		prefix: 'libNtve_gf_SetDialogItemPaused'
		body: 'libNtve_gf_SetDialogItemPaused(${1:int lp_dialogItem}, ${2:bool lp_paused}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemAcceptMouse':
		prefix: 'libNtve_gf_SetDialogItemAcceptMouse'
		body: 'libNtve_gf_SetDialogItemAcceptMouse(${1:int lp_dialogItem}, ${2:bool lp_acceptMouse}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemTintColor':
		prefix: 'libNtve_gf_SetDialogItemTintColor'
		body: 'libNtve_gf_SetDialogItemTintColor(${1:int lp_dialogItem}, ${2:color lp_color}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemTeamColor':
		prefix: 'libNtve_gf_SetDialogItemTeamColor'
		body: 'libNtve_gf_SetDialogItemTeamColor(${1:int lp_dialogItem}, ${2:color lp_color}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemLight':
		prefix: 'libNtve_gf_SetDialogItemLight'
		body: 'libNtve_gf_SetDialogItemLight(${1:int lp_dialogItem}, ${2:string lp_light}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemTransitionModel':
		prefix: 'libNtve_gf_SetDialogItemTransitionModel'
		body: 'libNtve_gf_SetDialogItemTransitionModel(${1:int lp_dialogItem}, ${2:string lp_model}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemForceVisible':
		prefix: 'libNtve_gf_SetDialogItemForceVisible'
		body: 'libNtve_gf_SetDialogItemForceVisible(${1:int lp_dialogItem}, ${2:bool lp_visible}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemRenderType':
		prefix: 'libNtve_gf_SetDialogItemRenderType'
		body: 'libNtve_gf_SetDialogItemRenderType(${1:int lp_dialogItem}, ${2:int lp_renderType}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemUnitLink':
		prefix: 'libNtve_gf_SetDialogItemUnitLink'
		body: 'libNtve_gf_SetDialogItemUnitLink(${1:int lp_dialogItem}, ${2:string lp_unitLink}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemTeamColorIndex':
		prefix: 'libNtve_gf_SetDialogItemTeamColorIndex'
		body: 'libNtve_gf_SetDialogItemTeamColorIndex(${1:int lp_dialogItem}, ${2:int lp_index}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemAnimationDuration':
		prefix: 'libNtve_gf_SetDialogItemAnimationDuration'
		body: 'libNtve_gf_SetDialogItemAnimationDuration(${1:int lp_dialogItem}, ${2:fixed lp_time}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemAnimationTime':
		prefix: 'libNtve_gf_SetDialogItemAnimationTime'
		body: 'libNtve_gf_SetDialogItemAnimationTime(${1:int lp_dialogItem}, ${2:fixed lp_time}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemActor':
		prefix: 'libNtve_gf_SetDialogItemActor'
		body: 'libNtve_gf_SetDialogItemActor(${1:int lp_dialogItem}, ${2:string lp_actor}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemBehavior':
		prefix: 'libNtve_gf_SetDialogItemBehavior'
		body: 'libNtve_gf_SetDialogItemBehavior(${1:int lp_dialogItem}, ${2:string lp_behavior}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemHotkey':
		prefix: 'libNtve_gf_SetDialogItemHotkey'
		body: 'libNtve_gf_SetDialogItemHotkey(${1:int lp_dialogItem}, ${2:int lp_hotkey}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemAllowedMouseButtons':
		prefix: 'libNtve_gf_SetDialogItemAllowedMouseButtons'
		body: 'libNtve_gf_SetDialogItemAllowedMouseButtons(${1:int lp_dialogItem}, ${2:int lp_allowedButtons}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemAlphaMask':
		prefix: 'libNtve_gf_SetDialogItemAlphaMask'
		body: 'libNtve_gf_SetDialogItemAlphaMask(${1:int lp_dialogItem}, ${2:string lp_image}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemAnimationIndex':
		prefix: 'libNtve_gf_SetDialogItemAnimationIndex'
		body: 'libNtve_gf_SetDialogItemAnimationIndex(${1:int lp_dialogItem}, ${2:int lp_index}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemHandle':
		prefix: 'libNtve_gf_SetDialogItemHandle'
		body: 'libNtve_gf_SetDialogItemHandle(${1:int lp_dialogItem}, ${2:string lp_handle}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemBorderColor':
		prefix: 'libNtve_gf_SetDialogItemBorderColor'
		body: 'libNtve_gf_SetDialogItemBorderColor(${1:int lp_dialogItem}, ${2:color lp_color}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemFillColor':
		prefix: 'libNtve_gf_SetDialogItemFillColor'
		body: 'libNtve_gf_SetDialogItemFillColor(${1:int lp_dialogItem}, ${2:color lp_color}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemSubmenu':
		prefix: 'libNtve_gf_SetDialogItemSubmenu'
		body: 'libNtve_gf_SetDialogItemSubmenu(${1:int lp_dialogItem}, ${2:string lp_submenu}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemUnitGroup':
		prefix: 'libNtve_gf_SetDialogItemUnitGroup'
		body: 'libNtve_gf_SetDialogItemUnitGroup(${1:int lp_dialogItem}, ${2:unitgroup lp_unitGroup}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemPlayerId':
		prefix: 'libNtve_gf_SetDialogItemPlayerId'
		body: 'libNtve_gf_SetDialogItemPlayerId(${1:int lp_dialogItem}, ${2:int lp_playerId}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemScoreValueLink':
		prefix: 'libNtve_gf_SetDialogItemScoreValueLink'
		body: 'libNtve_gf_SetDialogItemScoreValueLink(${1:int lp_dialogItem}, ${2:string lp_scoreValueLink}, ${3:playergroup lp_players})'
	'void libNtve_gf_SetDialogItemStateIndex':
		prefix: 'libNtve_gf_SetDialogItemStateIndex'
		body: 'libNtve_gf_SetDialogItemStateIndex(${1:int lp_dialogItem}, ${2:int lp_stateIndex}, ${3:playergroup lp_players})'
	'void libNtve_gf_DisplayScreenButton':
		prefix: 'libNtve_gf_DisplayScreenButton'
		body: 'libNtve_gf_DisplayScreenButton(${1:int lp_screenButtonID}, ${2:text lp_text}, ${3:int lp_width}, ${4:int lp_height}, ${5:int lp_anchor}, ${6:int lp_offsetX}, ${7:int lp_offsetY}, ${8:trigger lp_callback})'
	'void libNtve_gf_HideScreenButton':
		prefix: 'libNtve_gf_HideScreenButton'
		body: 'libNtve_gf_HideScreenButton(${1:bool lp_showHide}, ${2:int lp_screenButtonID})'
	'void libNtve_gf_FlashScreenButton':
		prefix: 'libNtve_gf_FlashScreenButton'
		body: 'libNtve_gf_FlashScreenButton(${1:int lp_screenButtonID}, ${2:fixed lp_flashTime}, ${3:color lp_color1}, ${4:color lp_color2})'
	'void libNtve_gf_StopFlashingScreenButton':
		prefix: 'libNtve_gf_StopFlashingScreenButton'
		body: 'libNtve_gf_StopFlashingScreenButton(${1:int lp_screenButtonID})'
	'void libNtve_gf_SetScreenButtonBorderImage':
		prefix: 'libNtve_gf_SetScreenButtonBorderImage'
		body: 'libNtve_gf_SetScreenButtonBorderImage(${1:int lp_screenButtonID}, ${2:string lp_borderImage}, ${3:string lp_hoverImage}, ${4:int lp_borderType})'
	'void libNtve_gf_SetScreenButtonFlashingBorderImage':
		prefix: 'libNtve_gf_SetScreenButtonFlashingBorderImage'
		body: 'libNtve_gf_SetScreenButtonFlashingBorderImage(${1:int lp_screenButtonID}, ${2:string lp_borderImage}, ${3:string lp_hoverImage}, ${4:int lp_borderType})'
	'int libNtve_gf_ScreenButtonDialog':
		prefix: 'libNtve_gf_ScreenButtonDialog'
		body: 'libNtve_gf_ScreenButtonDialog(${1:int lp_screenButtonID})'
	'int libNtve_gf_ScreenButton':
		prefix: 'libNtve_gf_ScreenButton'
		body: 'libNtve_gf_ScreenButton(${1:int lp_screenButtonID})'
	'void libNtve_gf_DisplayScreenImage':
		prefix: 'libNtve_gf_DisplayScreenImage'
		body: 'libNtve_gf_DisplayScreenImage(${1:int lp_screenImageID}, ${2:string lp_image}, ${3:int lp_blendMode}, ${4:int lp_width}, ${5:int lp_height}, ${6:int lp_anchor}, ${7:int lp_offsetX}, ${8:int lp_offsetY})'
	'void libNtve_gf_HideScreenImage':
		prefix: 'libNtve_gf_HideScreenImage'
		body: 'libNtve_gf_HideScreenImage(${1:bool lp_showHideOption}, ${2:int lp_screenImageID})'
	'void libNtve_gf_PulseScreenImage':
		prefix: 'libNtve_gf_PulseScreenImage'
		body: 'libNtve_gf_PulseScreenImage(${1:int lp_screenImageID}, ${2:fixed lp_period}, ${3:fixed lp_transparency1}, ${4:fixed lp_transparency2})'
	'void libNtve_gf_StopPulsingScreenImage':
		prefix: 'libNtve_gf_StopPulsingScreenImage'
		body: 'libNtve_gf_StopPulsingScreenImage(${1:int lp_screenImageID})'
	'int libNtve_gf_ScreenImageDialog':
		prefix: 'libNtve_gf_ScreenImageDialog'
		body: 'libNtve_gf_ScreenImageDialog(${1:int lp_screenImageID})'
	'int libNtve_gf_ScreenImageDialogItem':
		prefix: 'libNtve_gf_ScreenImageDialogItem'
		body: 'libNtve_gf_ScreenImageDialogItem(${1:int lp_screenImageID})'
	'void libNtve_gf_DisplayScreenLabel':
		prefix: 'libNtve_gf_DisplayScreenLabel'
		body: 'libNtve_gf_DisplayScreenLabel(${1:int lp_screenLabelID}, ${2:text lp_label}, ${3:string lp_style}, ${4:int lp_width}, ${5:int lp_height}, ${6:int lp_anchor}, ${7:int lp_offsetX}, ${8:int lp_offsetY})'
	'void libNtve_gf_HideScreenImage2':
		prefix: 'libNtve_gf_HideScreenImage2'
		body: 'libNtve_gf_HideScreenImage2(${1:bool lp_showHideOption}, ${2:int lp_screenLabelID})'
	'int libNtve_gf_ScreenLabelDialog':
		prefix: 'libNtve_gf_ScreenLabelDialog'
		body: 'libNtve_gf_ScreenLabelDialog(${1:int lp_screenLabelID})'
	'int libNtve_gf_ScreenLabelDialogItem':
		prefix: 'libNtve_gf_ScreenLabelDialogItem'
		body: 'libNtve_gf_ScreenLabelDialogItem(${1:int lp_screenLabelID})'
	'void libNtve_gf_CreateExplosionAtPoint':
		prefix: 'libNtve_gf_CreateExplosionAtPoint'
		body: 'libNtve_gf_CreateExplosionAtPoint(${1:int lp_size}, ${2:int lp_race}, ${3:point lp_point})'
	'bool libNtve_gf_PlayerCanCreateEffectAtPoint':
		prefix: 'libNtve_gf_PlayerCanCreateEffectAtPoint'
		body: 'libNtve_gf_PlayerCanCreateEffectAtPoint(${1:int lp_player}, ${2:string lp_effect}, ${3:point lp_point})'
	'bool libNtve_gf_PlayerCanCreateEffectOnUnit':
		prefix: 'libNtve_gf_PlayerCanCreateEffectOnUnit'
		body: 'libNtve_gf_PlayerCanCreateEffectOnUnit(${1:int lp_player}, ${2:string lp_effect}, ${3:unit lp_target})'
	'bool libNtve_gf_UnitCanCreateEffectAtPoint':
		prefix: 'libNtve_gf_UnitCanCreateEffectAtPoint'
		body: 'libNtve_gf_UnitCanCreateEffectAtPoint(${1:unit lp_caster}, ${2:string lp_effect}, ${3:point lp_point})'
	'bool libNtve_gf_UnitCanCreateEffectOnUnit':
		prefix: 'libNtve_gf_UnitCanCreateEffectOnUnit'
		body: 'libNtve_gf_UnitCanCreateEffectOnUnit(${1:unit lp_caster}, ${2:string lp_effect}, ${3:unit lp_target})'
	'fixed libNtve_gf_GamePlayTime':
		prefix: 'libNtve_gf_GamePlayTime'
		body: 'libNtve_gf_GamePlayTime(${1:int lp_player})'
	'void libNtve_gf_GameRemoveChargeRegen':
		prefix: 'libNtve_gf_GameRemoveChargeRegen'
		body: 'libNtve_gf_GameRemoveChargeRegen(${1:string lp_inCharge})'
	'void libNtve_gf_GameRemoveChargeUsed':
		prefix: 'libNtve_gf_GameRemoveChargeUsed'
		body: 'libNtve_gf_GameRemoveChargeUsed(${1:string lp_inCharge})'
	'void libNtve_gf_GameRemoveCooldown':
		prefix: 'libNtve_gf_GameRemoveCooldown'
		body: 'libNtve_gf_GameRemoveCooldown(${1:string lp_inCooldown})'
	'void libNtve_gf_PreloadModelAnimation':
		prefix: 'libNtve_gf_PreloadModelAnimation'
		body: 'libNtve_gf_PreloadModelAnimation(${1:string lp_file}, ${2:bool lp_queue})'
	'void libNtve_gf_PreloadModelObject':
		prefix: 'libNtve_gf_PreloadModelObject'
		body: 'libNtve_gf_PreloadModelObject(${1:string lp_id}, ${2:bool lp_queue})'
	'void libNtve_gf_PreloadSoundObject':
		prefix: 'libNtve_gf_PreloadSoundObject'
		body: 'libNtve_gf_PreloadSoundObject(${1:string lp_id}, ${2:bool lp_queue})'
	'void libNtve_gf_PreloadSoundtrack':
		prefix: 'libNtve_gf_PreloadSoundtrack'
		body: 'libNtve_gf_PreloadSoundtrack(${1:string lp_soundtrack}, ${2:bool lp_queue})'
	'void libNtve_gf_PreloadUnit':
		prefix: 'libNtve_gf_PreloadUnit'
		body: 'libNtve_gf_PreloadUnit(${1:string lp_unit}, ${2:bool lp_queue})'
	'void libNtve_gf_WaitForTimer':
		prefix: 'libNtve_gf_WaitForTimer'
		body: 'libNtve_gf_WaitForTimer(${1:timer lp_timer}, ${2:fixed lp_time}, ${3:bool lp_waitType})'
	'void libNtve_gf_ShowHideLeaderboard':
		prefix: 'libNtve_gf_ShowHideLeaderboard'
		body: 'libNtve_gf_ShowHideLeaderboard(${1:int lp_board}, ${2:bool lp_showHide}, ${3:playergroup lp_players})'
	'int libNtve_gf_ArithmeticIntClamp':
		prefix: 'libNtve_gf_ArithmeticIntClamp'
		body: 'libNtve_gf_ArithmeticIntClamp(${1:int lp_value}, ${2:int lp_min}, ${3:int lp_max})'
	'fixed libNtve_gf_ArithmeticRealClamp':
		prefix: 'libNtve_gf_ArithmeticRealClamp'
		body: 'libNtve_gf_ArithmeticRealClamp(${1:fixed lp_value}, ${2:fixed lp_min}, ${3:fixed lp_max})'
	'fixed libNtve_gf_RandomPercent':
		prefix: 'libNtve_gf_RandomPercent'
		body: 'libNtve_gf_RandomPercent()'
	'fixed libNtve_gf_RandomAngle':
		prefix: 'libNtve_gf_RandomAngle'
		body: 'libNtve_gf_RandomAngle()'
	'order libNtve_gf_ReviveOrderTargetingPoint':
		prefix: 'libNtve_gf_ReviveOrderTargetingPoint'
		body: 'libNtve_gf_ReviveOrderTargetingPoint(${1:abilcmd lp_abilCmd}, ${2:point lp_p}, ${3:unit lp_reviveUnit})'
	'order libNtve_gf_ReviveOrderWithNoTarget':
		prefix: 'libNtve_gf_ReviveOrderWithNoTarget'
		body: 'libNtve_gf_ReviveOrderWithNoTarget(${1:abilcmd lp_abilCmd}, ${2:unit lp_reviveUnit})'
	'void libNtve_gf_CreatePingFacingAngle':
		prefix: 'libNtve_gf_CreatePingFacingAngle'
		body: 'libNtve_gf_CreatePingFacingAngle(${1:playergroup lp_players}, ${2:string lp_model}, ${3:point lp_position}, ${4:color lp_color}, ${5:fixed lp_duration}, ${6:fixed lp_angle})'
	'void libNtve_gf_ClearAlliance':
		prefix: 'libNtve_gf_ClearAlliance'
		body: 'libNtve_gf_ClearAlliance(${1:int lp_sourcePlayer}, ${2:int lp_targetPlayer})'
	'void libNtve_gf_MakeAlly':
		prefix: 'libNtve_gf_MakeAlly'
		body: 'libNtve_gf_MakeAlly(${1:int lp_sourcePlayer}, ${2:int lp_targetPlayer})'
	'void libNtve_gf_SetAlliance':
		prefix: 'libNtve_gf_SetAlliance'
		body: 'libNtve_gf_SetAlliance(${1:int lp_sourcePlayer}, ${2:int lp_targetPlayer}, ${3:int lp_alliance})'
	'void libNtve_gf_SetAllianceOneWay':
		prefix: 'libNtve_gf_SetAllianceOneWay'
		body: 'libNtve_gf_SetAllianceOneWay(${1:int lp_sourcePlayer}, ${2:int lp_targetPlayer}, ${3:int lp_alliance})'
	'void libNtve_gf_SetPlayerGroupAlliance':
		prefix: 'libNtve_gf_SetPlayerGroupAlliance'
		body: 'libNtve_gf_SetPlayerGroupAlliance(${1:playergroup lp_players}, ${2:int lp_alliance})'
	'bool libNtve_gf_PlayerIsEnemy':
		prefix: 'libNtve_gf_PlayerIsEnemy'
		body: 'libNtve_gf_PlayerIsEnemy(${1:int lp_sourcePlayer}, ${2:int lp_targetPlayer}, ${3:int lp_relation})'
	'void libNtve_gf_PlayerRemoveChargeRegen':
		prefix: 'libNtve_gf_PlayerRemoveChargeRegen'
		body: 'libNtve_gf_PlayerRemoveChargeRegen(${1:int lp_inPlayer}, ${2:string lp_inCharge})'
	'void libNtve_gf_PlayerRemoveChargeUsed':
		prefix: 'libNtve_gf_PlayerRemoveChargeUsed'
		body: 'libNtve_gf_PlayerRemoveChargeUsed(${1:int lp_inPlayer}, ${2:string lp_inCharge})'
	'void libNtve_gf_PlayerRemoveCooldown':
		prefix: 'libNtve_gf_PlayerRemoveCooldown'
		body: 'libNtve_gf_PlayerRemoveCooldown(${1:int lp_inPlayer}, ${2:string lp_inCooldown})'
	'void libNtve_gf_AddPlayerGroupToPlayerGroup':
		prefix: 'libNtve_gf_AddPlayerGroupToPlayerGroup'
		body: 'libNtve_gf_AddPlayerGroupToPlayerGroup(${1:playergroup lp_sourceGroup}, ${2:playergroup lp_targetGroup})'
	'void libNtve_gf_RemovePlayerGroupFromPlayerGroup':
		prefix: 'libNtve_gf_RemovePlayerGroupFromPlayerGroup'
		body: 'libNtve_gf_RemovePlayerGroupFromPlayerGroup(${1:playergroup lp_sourceGroup}, ${2:playergroup lp_targetGroup})'
	'point libNtve_gf_PointFromPositionAndAngle':
		prefix: 'libNtve_gf_PointFromPositionAndAngle'
		body: 'libNtve_gf_PointFromPositionAndAngle(${1:point lp_point}, ${2:fixed lp_angle})'
	'point libNtve_gf_PointFromXYZ':
		prefix: 'libNtve_gf_PointFromXYZ'
		body: 'libNtve_gf_PointFromXYZ(${1:fixed lp_x}, ${2:fixed lp_y}, ${3:fixed lp_y2})'
	'point libNtve_gf_PointFacingAngle':
		prefix: 'libNtve_gf_PointFacingAngle'
		body: 'libNtve_gf_PointFacingAngle(${1:point lp_point}, ${2:fixed lp_angle})'
	'point libNtve_gf_PointWithZOffset':
		prefix: 'libNtve_gf_PointWithZOffset'
		body: 'libNtve_gf_PointWithZOffset(${1:point lp_p}, ${2:fixed lp_z})'
	'point libNtve_gf_PointOffsetTowardsPoint':
		prefix: 'libNtve_gf_PointOffsetTowardsPoint'
		body: 'libNtve_gf_PointOffsetTowardsPoint(${1:point lp_sourcePoint}, ${2:fixed lp_distance}, ${3:point lp_targetPoint})'
	'point libNtve_gf_RandomPointBetweenPoints':
		prefix: 'libNtve_gf_RandomPointBetweenPoints'
		body: 'libNtve_gf_RandomPointBetweenPoints(${1:point lp_point1}, ${2:point lp_point2})'
	'int libNtve_gf_CinematicPortrait':
		prefix: 'libNtve_gf_CinematicPortrait'
		body: 'libNtve_gf_CinematicPortrait(${1:int lp_position})'
	'void libNtve_gf_HideAllCinematicPortraits':
		prefix: 'libNtve_gf_HideAllCinematicPortraits'
		body: 'libNtve_gf_HideAllCinematicPortraits(${1:playergroup lp_players})'
	'int libNtve_gf_FullscreenPortrait':
		prefix: 'libNtve_gf_FullscreenPortrait'
		body: 'libNtve_gf_FullscreenPortrait()'
	'void libNtve_gf_PortraitSetAnim':
		prefix: 'libNtve_gf_PortraitSetAnim'
		body: 'libNtve_gf_PortraitSetAnim(${1:int lp_Portrait}, ${2:string lp_Anim}, ${3:string lp_identifier}, ${4:int lp_flags}, ${5:fixed lp_blendTime})'
	'void libNtve_gf_ClearPortraitAnimation':
		prefix: 'libNtve_gf_ClearPortraitAnimation'
		body: 'libNtve_gf_ClearPortraitAnimation(${1:int lp_portrait}, ${2:string lp_identifier})'
	'fixed libNtve_gf_WidthOfRegion':
		prefix: 'libNtve_gf_WidthOfRegion'
		body: 'libNtve_gf_WidthOfRegion(${1:region lp_region})'
	'fixed libNtve_gf_HeightOfRegion':
		prefix: 'libNtve_gf_HeightOfRegion'
		body: 'libNtve_gf_HeightOfRegion(${1:region lp_region})'
	'bool libNtve_gf_UnitTypeIsSelected':
		prefix: 'libNtve_gf_UnitTypeIsSelected'
		body: 'libNtve_gf_UnitTypeIsSelected(${1:string lp_unitType}, ${2:int lp_player})'
	'void libNtve_gf_StoreUnitSelection':
		prefix: 'libNtve_gf_StoreUnitSelection'
		body: 'libNtve_gf_StoreUnitSelection(${1:int lp_forPlayer}, ${2:int lp_storeOption})'
	'void libNtve_gf_RestoreUnitSelection':
		prefix: 'libNtve_gf_RestoreUnitSelection'
		body: 'libNtve_gf_RestoreUnitSelection(${1:int lp_forPlayer})'
	'void libNtve_gf_SetAllSoundChannelVolumes':
		prefix: 'libNtve_gf_SetAllSoundChannelVolumes'
		body: 'libNtve_gf_SetAllSoundChannelVolumes(${1:int lp_mode}, ${2:playergroup lp_players}, ${3:fixed lp_duration})'
	'void libNtve_gf__StoryModeOnOffForPlayer':
		prefix: 'libNtve_gf__StoryModeOnOffForPlayer'
		body: 'libNtve_gf__StoryModeOnOffForPlayer(${1:int lp_player}, ${2:bool lp_onOff})'
	'void libNtve_gf__StoryModeOnOffForPlayerGroup':
		prefix: 'libNtve_gf__StoryModeOnOffForPlayerGroup'
		body: 'libNtve_gf__StoryModeOnOffForPlayerGroup(${1:playergroup lp_players}, ${2:bool lp_onOff})'
	'void libNtve_gf__StoryModeHideUI':
		prefix: 'libNtve_gf__StoryModeHideUI'
		body: 'libNtve_gf__StoryModeHideUI(${1:playergroup lp_players})'
	'void libNtve_gf__StoryModeRestoreUI':
		prefix: 'libNtve_gf__StoryModeRestoreUI'
		body: 'libNtve_gf__StoryModeRestoreUI(${1:playergroup lp_players})'
	'void libNtve_gf_StoryMode':
		prefix: 'libNtve_gf_StoryMode'
		body: 'libNtve_gf_StoryMode(${1:playergroup lp_players}, ${2:bool lp_onOff})'
	'bool libNtve_gf_PlayerInStoryMode':
		prefix: 'libNtve_gf_PlayerInStoryMode'
		body: 'libNtve_gf_PlayerInStoryMode(${1:int lp_player})'
	'void libNtve_gf_SetUpgradeLevelForPlayer':
		prefix: 'libNtve_gf_SetUpgradeLevelForPlayer'
		body: 'libNtve_gf_SetUpgradeLevelForPlayer(${1:int lp_p}, ${2:string lp_upgrade}, ${3:int lp_levels})'
	'void libNtve_gf_StopTimer':
		prefix: 'libNtve_gf_StopTimer'
		body: 'libNtve_gf_StopTimer(${1:timer lp_timer})'
	'void libNtve_gf_SendTransmissionSimple':
		prefix: 'libNtve_gf_SendTransmissionSimple'
		body: 'libNtve_gf_SendTransmissionSimple(${1:transmissionsource lp_Source}, ${2:int lp_Target}, ${3:soundlink lp_Sound}, ${4:fixed lp_Duration}, ${5:int lp_DurationType}, ${6:bool lp_WaitUntilDone})'
	'void libNtve_gf_UIErrorMessage':
		prefix: 'libNtve_gf_UIErrorMessage'
		body: 'libNtve_gf_UIErrorMessage(${1:playergroup lp_players}, ${2:text lp_message}, ${3:soundlink lp_sound})'
	'int libNtve_gf__BB_PortraitBorderWidth':
		prefix: 'libNtve_gf__BB_PortraitBorderWidth'
		body: 'libNtve_gf__BB_PortraitBorderWidth(${1:int lp_barID})'
	'int libNtve_gf__BB_PortraitBorderHeight':
		prefix: 'libNtve_gf__BB_PortraitBorderHeight'
		body: 'libNtve_gf__BB_PortraitBorderHeight(${1:int lp_barID})'
	'int libNtve_gf__BB_PortraitWidth':
		prefix: 'libNtve_gf__BB_PortraitWidth'
		body: 'libNtve_gf__BB_PortraitWidth(${1:int lp_barID})'
	'int libNtve_gf__BB_PortraitHeight':
		prefix: 'libNtve_gf__BB_PortraitHeight'
		body: 'libNtve_gf__BB_PortraitHeight(${1:int lp_barID})'
	'int libNtve_gf__BB_TitleBarWidth':
		prefix: 'libNtve_gf__BB_TitleBarWidth'
		body: 'libNtve_gf__BB_TitleBarWidth(${1:int lp_barID})'
	'int libNtve_gf__BB_TitleBarHeight':
		prefix: 'libNtve_gf__BB_TitleBarHeight'
		body: 'libNtve_gf__BB_TitleBarHeight(${1:int lp_barID})'
	'int libNtve_gf__BB_HPBorderWidth':
		prefix: 'libNtve_gf__BB_HPBorderWidth'
		body: 'libNtve_gf__BB_HPBorderWidth(${1:int lp_barID})'
	'int libNtve_gf__BB_HPBorderHeight':
		prefix: 'libNtve_gf__BB_HPBorderHeight'
		body: 'libNtve_gf__BB_HPBorderHeight(${1:int lp_barID})'
	'int libNtve_gf__BB_HPBarWidth':
		prefix: 'libNtve_gf__BB_HPBarWidth'
		body: 'libNtve_gf__BB_HPBarWidth(${1:int lp_barID})'
	'int libNtve_gf__BB_HPBarHeight':
		prefix: 'libNtve_gf__BB_HPBarHeight'
		body: 'libNtve_gf__BB_HPBarHeight(${1:int lp_barID})'
	'int libNtve_gf__BB_HPBarCurrentWidth':
		prefix: 'libNtve_gf__BB_HPBarCurrentWidth'
		body: 'libNtve_gf__BB_HPBarCurrentWidth(${1:int lp_barID})'
	'text libNtve_gf__BB_HPBarFormatLabel':
		prefix: 'libNtve_gf__BB_HPBarFormatLabel'
		body: 'libNtve_gf__BB_HPBarFormatLabel(${1:int lp_barID})'
	'void libNtve_gf__BB_HPBarChange':
		prefix: 'libNtve_gf__BB_HPBarChange'
		body: 'libNtve_gf__BB_HPBarChange(${1:int lp_barID})'
	'void libNtve_gf_DisplayBossBar':
		prefix: 'libNtve_gf_DisplayBossBar'
		body: 'libNtve_gf_DisplayBossBar(${1:int lp_bossBarID}, ${2:string lp_portrait}, ${3:text lp_title}, ${4:int lp_max}, ${5:playergroup lp_players})'
	'void libNtve_gf_SetBossBarMaximumValue':
		prefix: 'libNtve_gf_SetBossBarMaximumValue'
		body: 'libNtve_gf_SetBossBarMaximumValue(${1:int lp_bossBarID}, ${2:int lp_max}, ${3:bool lp_refresh})'
	'void libNtve_gf_SetBossBarCurrentValue':
		prefix: 'libNtve_gf_SetBossBarCurrentValue'
		body: 'libNtve_gf_SetBossBarCurrentValue(${1:int lp_bossBarID}, ${2:int lp_current}, ${3:bool lp_refresh})'
	'void libNtve_gf_SetBossBarBoss':
		prefix: 'libNtve_gf_SetBossBarBoss'
		body: 'libNtve_gf_SetBossBarBoss(${1:int lp_bossBarID}, ${2:unit lp_boss}, ${3:bool lp_refresh})'
	'void libNtve_gf_SetBossBarRace':
		prefix: 'libNtve_gf_SetBossBarRace'
		body: 'libNtve_gf_SetBossBarRace(${1:int lp_bossBarID}, ${2:int lp_race}, ${3:bool lp_refresh})'
	'void libNtve_gf_MoveBossBar':
		prefix: 'libNtve_gf_MoveBossBar'
		body: 'libNtve_gf_MoveBossBar(${1:int lp_bossBarID}, ${2:int lp_anchor}, ${3:int lp_offsetX}, ${4:int lp_offsetY})'
	'void libNtve_gf_ShowHideBossBar':
		prefix: 'libNtve_gf_ShowHideBossBar'
		body: 'libNtve_gf_ShowHideBossBar(${1:bool lp_showHide}, ${2:int lp_bossBarID})'
	'void libNtve_gf_RefreshBossBar':
		prefix: 'libNtve_gf_RefreshBossBar'
		body: 'libNtve_gf_RefreshBossBar(${1:int lp_bossBarID})'
	'void libNtve_gf__StoreGameUIVisibleStates':
		prefix: 'libNtve_gf__StoreGameUIVisibleStates'
		body: 'libNtve_gf__StoreGameUIVisibleStates(${1:bool lp_storeRestore}, ${2:playergroup lp_players}, ${3:int lp_index})'
	'void libNtve_gf_HideGameUI':
		prefix: 'libNtve_gf_HideGameUI'
		body: 'libNtve_gf_HideGameUI(${1:bool lp_showHide}, ${2:playergroup lp_players})'
	'void libNtve_gf_AddRemoveUIFrameTypeForGlobalFilterList':
		prefix: 'libNtve_gf_AddRemoveUIFrameTypeForGlobalFilterList'
		body: 'libNtve_gf_AddRemoveUIFrameTypeForGlobalFilterList(${1:bool lp_addRemove}, ${2:int lp_frameType})'
	'bool libNtve_gf_UIFrameFlagCheck':
		prefix: 'libNtve_gf_UIFrameFlagCheck'
		body: 'libNtve_gf_UIFrameFlagCheck(${1:int lp_uIFrame}, ${2:int lp_flag})'
	'text libNtve_gf_FormatTipTitle':
		prefix: 'libNtve_gf_FormatTipTitle'
		body: 'libNtve_gf_FormatTipTitle(${1:text lp_title}, ${2:int lp_type})'
	'void libNtve_gf_CreateUnitsWithDefaultFacing':
		prefix: 'libNtve_gf_CreateUnitsWithDefaultFacing'
		body: 'libNtve_gf_CreateUnitsWithDefaultFacing(${1:int lp_count}, ${2:string lp_type}, ${3:int lp_style}, ${4:int lp_player}, ${5:point lp_p})'
	'void libNtve_gf_CreateUnitsAtPoint2':
		prefix: 'libNtve_gf_CreateUnitsAtPoint2'
		body: 'libNtve_gf_CreateUnitsAtPoint2(${1:int lp_count}, ${2:string lp_type}, ${3:int lp_flags}, ${4:int lp_player}, ${5:point lp_p})'
	'unitgroup libNtve_gf_UnitCreateFacingPoint':
		prefix: 'libNtve_gf_UnitCreateFacingPoint'
		body: 'libNtve_gf_UnitCreateFacingPoint(${1:int lp_count}, ${2:string lp_type}, ${3:int lp_flags}, ${4:int lp_player}, ${5:point lp_pos}, ${6:point lp_facing})'
	'void libNtve_gf_ReplaceUnit':
		prefix: 'libNtve_gf_ReplaceUnit'
		body: 'libNtve_gf_ReplaceUnit(${1:unit lp_unit}, ${2:string lp_unitType}, ${3:int lp_options})'
	'unit libNtve_gf_LastReplacedUnit':
		prefix: 'libNtve_gf_LastReplacedUnit'
		body: 'libNtve_gf_LastReplacedUnit()'
	'void libNtve_gf_RescueUnit':
		prefix: 'libNtve_gf_RescueUnit'
		body: 'libNtve_gf_RescueUnit(${1:unit lp_unit}, ${2:int lp_player}, ${3:bool lp_changeColor})'
	'void libNtve_gf_RescueUnit2':
		prefix: 'libNtve_gf_RescueUnit2'
		body: 'libNtve_gf_RescueUnit2(${1:unitgroup lp_unit}, ${2:int lp_player}, ${3:bool lp_changeColor})'
	'bool libNtve_gf_UnitGroupIsDead':
		prefix: 'libNtve_gf_UnitGroupIsDead'
		body: 'libNtve_gf_UnitGroupIsDead(${1:unitgroup lp_units})'
	'void libNtve_gf_MakeUnitFacePoint':
		prefix: 'libNtve_gf_MakeUnitFacePoint'
		body: 'libNtve_gf_MakeUnitFacePoint(${1:unit lp_unit}, ${2:point lp_point}, ${3:fixed lp_duration})'
	'void libNtve_gf_PauseUnit':
		prefix: 'libNtve_gf_PauseUnit'
		body: 'libNtve_gf_PauseUnit(${1:unit lp_unit}, ${2:bool lp_pauseUnpause})'
	'void libNtve_gf_ShowHideUnit':
		prefix: 'libNtve_gf_ShowHideUnit'
		body: 'libNtve_gf_ShowHideUnit(${1:unit lp_unit}, ${2:bool lp_showHide})'
	'void libNtve_gf_ShareVisionofUnit':
		prefix: 'libNtve_gf_ShareVisionofUnit'
		body: 'libNtve_gf_ShareVisionofUnit(${1:unit lp_unit}, ${2:bool lp_shareUnshare}, ${3:int lp_player})'
	'bool libNtve_gf_UnitIsPaused':
		prefix: 'libNtve_gf_UnitIsPaused'
		body: 'libNtve_gf_UnitIsPaused(${1:unit lp_u})'
	'bool libNtve_gf_UnitIsHidden':
		prefix: 'libNtve_gf_UnitIsHidden'
		body: 'libNtve_gf_UnitIsHidden(${1:unit lp_u})'
	'bool libNtve_gf_UnitIsVisibleToPlayer':
		prefix: 'libNtve_gf_UnitIsVisibleToPlayer'
		body: 'libNtve_gf_UnitIsVisibleToPlayer(${1:unit lp_unit}, ${2:int lp_player})'
	'bool libNtve_gf_UnitInRegion':
		prefix: 'libNtve_gf_UnitInRegion'
		body: 'libNtve_gf_UnitInRegion(${1:unit lp_u}, ${2:region lp_regioin})'
	'unit libNtve_gf_KillingUnit':
		prefix: 'libNtve_gf_KillingUnit'
		body: 'libNtve_gf_KillingUnit()'
	'int libNtve_gf_KillingPlayer':
		prefix: 'libNtve_gf_KillingPlayer'
		body: 'libNtve_gf_KillingPlayer()'
	'unit libNtve_gf_AcquiredTarget':
		prefix: 'libNtve_gf_AcquiredTarget'
		body: 'libNtve_gf_AcquiredTarget()'
	'void libNtve_gf_MakeUnitInvulnerable':
		prefix: 'libNtve_gf_MakeUnitInvulnerable'
		body: 'libNtve_gf_MakeUnitInvulnerable(${1:unit lp_unit}, ${2:bool lp_option})'
	'void libNtve_gf_MakeUnitUncommandable':
		prefix: 'libNtve_gf_MakeUnitUncommandable'
		body: 'libNtve_gf_MakeUnitUncommandable(${1:unit lp_unit}, ${2:bool lp_option})'
	'bool libNtve_gf_UnitIsInvulnerable':
		prefix: 'libNtve_gf_UnitIsInvulnerable'
		body: 'libNtve_gf_UnitIsInvulnerable(${1:unit lp_u})'
	'int libNtve_gf_UnitGetPropertyKills':
		prefix: 'libNtve_gf_UnitGetPropertyKills'
		body: 'libNtve_gf_UnitGetPropertyKills(${1:unit lp_u}, ${2:bool lp_current})'
	'int libNtve_gf_UnitGetPropertyResources':
		prefix: 'libNtve_gf_UnitGetPropertyResources'
		body: 'libNtve_gf_UnitGetPropertyResources(${1:unit lp_u}, ${2:bool lp_current})'
	'bool libNtve_gf_UnitMoverExists':
		prefix: 'libNtve_gf_UnitMoverExists'
		body: 'libNtve_gf_UnitMoverExists(${1:string lp_unitType}, ${2:string lp_mover})'
	'void libNtve_gf_UnitSetVariation':
		prefix: 'libNtve_gf_UnitSetVariation'
		body: 'libNtve_gf_UnitSetVariation(${1:unit lp_unit}, ${2:string lp_model}, ${3:int lp_percent}, ${4:string lp_textures})'
	'void libNtve_gf_ChangeUnitDamage':
		prefix: 'libNtve_gf_ChangeUnitDamage'
		body: 'libNtve_gf_ChangeUnitDamage(${1:unit lp_unit}, ${2:int lp_takeDeal}, ${3:int lp_option})'
	'unitfilter libNtve_gf_ConvertTargetFilterStringToUnitFilter':
		prefix: 'libNtve_gf_ConvertTargetFilterStringToUnitFilter'
		body: 'libNtve_gf_ConvertTargetFilterStringToUnitFilter(${1:string lp_targetFilterString})'
	'bool libNtve_gf_UnitIsInsideTransport':
		prefix: 'libNtve_gf_UnitIsInsideTransport'
		body: 'libNtve_gf_UnitIsInsideTransport(${1:unit lp_u})'
	'abilcmd libNtve_gf_EventItemAbilityOrUnitAbility':
		prefix: 'libNtve_gf_EventItemAbilityOrUnitAbility'
		body: 'libNtve_gf_EventItemAbilityOrUnitAbility()'
	'bool libNtve_gf_UnitCanAttackUnit':
		prefix: 'libNtve_gf_UnitCanAttackUnit'
		body: 'libNtve_gf_UnitCanAttackUnit(${1:unit lp_u}, ${2:unit lp_s})'
	'bool libNtve_gf_UnitIsUnderConstruction':
		prefix: 'libNtve_gf_UnitIsUnderConstruction'
		body: 'libNtve_gf_UnitIsUnderConstruction(${1:unit lp_u})'
	'string libNtve_gf_TriggeringProgressAbility':
		prefix: 'libNtve_gf_TriggeringProgressAbility'
		body: 'libNtve_gf_TriggeringProgressAbility()'
	'string libNtve_gf_TriggeringProgressEffect':
		prefix: 'libNtve_gf_TriggeringProgressEffect'
		body: 'libNtve_gf_TriggeringProgressEffect()'
	'string libNtve_gf_TriggeringProgressUnitType':
		prefix: 'libNtve_gf_TriggeringProgressUnitType'
		body: 'libNtve_gf_TriggeringProgressUnitType()'
	'string libNtve_gf_TriggeringProgressUpgrade':
		prefix: 'libNtve_gf_TriggeringProgressUpgrade'
		body: 'libNtve_gf_TriggeringProgressUpgrade()'
	'string libNtve_gf_QueuedBehaviorTypeInTrainingQueueSlot':
		prefix: 'libNtve_gf_QueuedBehaviorTypeInTrainingQueueSlot'
		body: 'libNtve_gf_QueuedBehaviorTypeInTrainingQueueSlot(${1:unit lp_unit}, ${2:int lp_slot}, ${3:int lp_item})'
	'string libNtve_gf_QueuedUnitTypeInTrainingQueueSlot':
		prefix: 'libNtve_gf_QueuedUnitTypeInTrainingQueueSlot'
		body: 'libNtve_gf_QueuedUnitTypeInTrainingQueueSlot(${1:unit lp_unit}, ${2:int lp_slot}, ${3:int lp_item})'
	'string libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot':
		prefix: 'libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot'
		body: 'libNtve_gf_QueuedUpgradeTypeInTrainingQueueSlot(${1:unit lp_unit}, ${2:int lp_slot}, ${3:int lp_item})'
	'void libNtve_gf_UnitBehaviorRemoveChargeRegen':
		prefix: 'libNtve_gf_UnitBehaviorRemoveChargeRegen'
		body: 'libNtve_gf_UnitBehaviorRemoveChargeRegen(${1:unit lp_inUnit}, ${2:string lp_inBehavior}, ${3:string lp_inCharge})'
	'void libNtve_gf_UnitAbilityRemoveChargeRegen':
		prefix: 'libNtve_gf_UnitAbilityRemoveChargeRegen'
		body: 'libNtve_gf_UnitAbilityRemoveChargeRegen(${1:unit lp_inUnit}, ${2:string lp_inAbil}, ${3:string lp_inCharge})'
	'void libNtve_gf_UnitRemoveChargeRegen':
		prefix: 'libNtve_gf_UnitRemoveChargeRegen'
		body: 'libNtve_gf_UnitRemoveChargeRegen(${1:unit lp_inUnit}, ${2:string lp_inCharge})'
	'void libNtve_gf_UnitBehaviorRemoveChargeUsed':
		prefix: 'libNtve_gf_UnitBehaviorRemoveChargeUsed'
		body: 'libNtve_gf_UnitBehaviorRemoveChargeUsed(${1:unit lp_inUnit}, ${2:string lp_inBehavior}, ${3:string lp_inCharge})'
	'void libNtve_gf_UnitAbilityRemoveChargeUsed':
		prefix: 'libNtve_gf_UnitAbilityRemoveChargeUsed'
		body: 'libNtve_gf_UnitAbilityRemoveChargeUsed(${1:unit lp_inUnit}, ${2:string lp_inAbil}, ${3:string lp_inCharge})'
	'void libNtve_gf_UnitRemoveChargeUsed':
		prefix: 'libNtve_gf_UnitRemoveChargeUsed'
		body: 'libNtve_gf_UnitRemoveChargeUsed(${1:unit lp_inUnit}, ${2:string lp_inCharge})'
	'void libNtve_gf_UnitBehaviorRemoveCooldown':
		prefix: 'libNtve_gf_UnitBehaviorRemoveCooldown'
		body: 'libNtve_gf_UnitBehaviorRemoveCooldown(${1:unit lp_inUnit}, ${2:string lp_inBehavior}, ${3:string lp_inCooldown})'
	'void libNtve_gf_UnitAbilityRemoveCooldown':
		prefix: 'libNtve_gf_UnitAbilityRemoveCooldown'
		body: 'libNtve_gf_UnitAbilityRemoveCooldown(${1:unit lp_inUnit}, ${2:string lp_inAbil}, ${3:string lp_inCooldown})'
	'void libNtve_gf_UnitRemoveCooldown':
		prefix: 'libNtve_gf_UnitRemoveCooldown'
		body: 'libNtve_gf_UnitRemoveCooldown(${1:unit lp_inUnit}, ${2:string lp_inCooldown})'
	'unitgroup libNtve_gf_ConvertUnitToUnitGroup':
		prefix: 'libNtve_gf_ConvertUnitToUnitGroup'
		body: 'libNtve_gf_ConvertUnitToUnitGroup(${1:unit lp_unit})'
	'unitgroup libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition':
		prefix: 'libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition'
		body: 'libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(${1:string lp_type}, ${2:string lp_type2}, ${3:string lp_type22}, ${4:int lp_player}, ${5:int lp_alliance}, ${6:region lp_reg}, ${7:unitfilter lp_unitFilter}, ${8:int lp_count})'
	'unitgroup libNtve_gf_UnitsInUnitGroupWithCustomValue':
		prefix: 'libNtve_gf_UnitsInUnitGroupWithCustomValue'
		body: 'libNtve_gf_UnitsInUnitGroupWithCustomValue(${1:unitgroup lp_group}, ${2:int lp_index}, ${3:fixed lp_value})'
	'void libNtve_gf_AddUnitGroupToUnitGroup':
		prefix: 'libNtve_gf_AddUnitGroupToUnitGroup'
		body: 'libNtve_gf_AddUnitGroupToUnitGroup(${1:unitgroup lp_sourceUnitGroup}, ${2:unitgroup lp_targetUnitGroup})'
	'void libNtve_gf_RemoveUnitGroupFromUnitGroup':
		prefix: 'libNtve_gf_RemoveUnitGroupFromUnitGroup'
		body: 'libNtve_gf_RemoveUnitGroupFromUnitGroup(${1:unitgroup lp_sourceUnitGroup}, ${2:unitgroup lp_targetUnitGroup})'
	'unit libNtve_gf_ClosestUnitToPoint':
		prefix: 'libNtve_gf_ClosestUnitToPoint'
		body: 'libNtve_gf_ClosestUnitToPoint(${1:point lp_point}, ${2:unitgroup lp_group})'
	'point libNtve_gf_CenterOfUnitGroup':
		prefix: 'libNtve_gf_CenterOfUnitGroup'
		body: 'libNtve_gf_CenterOfUnitGroup(${1:unitgroup lp_unitGroup})'
	'void libNtve_gf_ShowHidePlacementModels':
		prefix: 'libNtve_gf_ShowHidePlacementModels'
		body: 'libNtve_gf_ShowHidePlacementModels(${1:bool lp_show})'
	'void AISetDifficulty':
		prefix: 'AISetDifficulty'
		body: 'AISetDifficulty(${1:int player}, ${2:int index}, ${3:bool state})'
	'bool AIGetDifficulty':
		prefix: 'AIGetDifficulty'
		body: 'AIGetDifficulty(${1:int player}, ${2:int index})'
	'void DebugUnit':
		prefix: 'DebugUnit'
		body: 'DebugUnit(${1:unit value})'
	'void DebugInt':
		prefix: 'DebugInt'
		body: 'DebugInt(${1:int value})'
	'void DebugFixed':
		prefix: 'DebugFixed'
		body: 'DebugFixed(${1:fixed value})'
	'void DebugPoint':
		prefix: 'DebugPoint'
		body: 'DebugPoint(${1:point value})'
	'void AIStart':
		prefix: 'AIStart'
		body: 'AIStart(${1:int player}, ${2:bool isCampaign}, ${3:int apm})'
	'void AIForceActive':
		prefix: 'AIForceActive'
		body: 'AIForceActive()'
	'void AIDisableAllScouting':
		prefix: 'AIDisableAllScouting'
		body: 'AIDisableAllScouting()'
	'bool AIGivingUp':
		prefix: 'AIGivingUp'
		body: 'AIGivingUp(${1:int player})'
	'void AIGoodGame':
		prefix: 'AIGoodGame'
		body: 'AIGoodGame(${1:int player})'
	'bool AIIsCampaign':
		prefix: 'AIIsCampaign'
		body: 'AIIsCampaign(${1:int player})'
	'bool AIHasHumanAlly':
		prefix: 'AIHasHumanAlly'
		body: 'AIHasHumanAlly(${1:int player})'
	'void AISetAPM':
		prefix: 'AISetAPM'
		body: 'AISetAPM(${1:int player}, ${2:int apm})'
	'unit AIGrabUnit':
		prefix: 'AIGrabUnit'
		body: 'AIGrabUnit(${1:int player}, ${2:string aliasUnitType}, ${3:int prio}, ${4:point location})'
	'int AIState':
		prefix: 'AIState'
		body: 'AIState(${1:int player}, ${2:int index})'
	'void AISetSpecificState':
		prefix: 'AISetSpecificState'
		body: 'AISetSpecificState(${1:int player}, ${2:int index}, ${3:int state})'
	'void AISetAllStates':
		prefix: 'AISetAllStates'
		body: 'AISetAllStates(${1:int player}, ${2:int state})'
	'void AISetFlag':
		prefix: 'AISetFlag'
		body: 'AISetFlag(${1:int player}, ${2:int index}, ${3:bool state})'
	'bool AIGetFlag':
		prefix: 'AIGetFlag'
		body: 'AIGetFlag(${1:int player}, ${2:int index})'
	'void AITechFlag':
		prefix: 'AITechFlag'
		body: 'AITechFlag(${1:int player}, ${2:int index}, ${3:int count}, ${4:string what}, ${5:int countMask})'
	'void AIResetUserData':
		prefix: 'AIResetUserData'
		body: 'AIResetUserData(${1:int player})'
	'void AISetUserString':
		prefix: 'AISetUserString'
		body: 'AISetUserString(${1:int player}, ${2:int index}, ${3:string data})'
	'string AIGetUserString':
		prefix: 'AIGetUserString'
		body: 'AIGetUserString(${1:int player}, ${2:int index})'
	'void AISetUserInt':
		prefix: 'AISetUserInt'
		body: 'AISetUserInt(${1:int player}, ${2:int index}, ${3:int data})'
	'int AIGetUserInt':
		prefix: 'AIGetUserInt'
		body: 'AIGetUserInt(${1:int player}, ${2:int index})'
	'void AIAddStringInt':
		prefix: 'AIAddStringInt'
		body: 'AIAddStringInt(${1:int player}, ${2:string data}, ${3:int change})'
	'void AISetStockArmyDefaultScale':
		prefix: 'AISetStockArmyDefaultScale'
		body: 'AISetStockArmyDefaultScale(${1:int player}, ${2:fixed scale})'
	'void AISetStockArmyOverride':
		prefix: 'AISetStockArmyOverride'
		body: 'AISetStockArmyOverride(${1:int player}, ${2:string data}, ${3:int replaceCount}, ${4:string replaceUnit})'
	'void AIAddToStockArmy':
		prefix: 'AIAddToStockArmy'
		body: 'AIAddToStockArmy(${1:int player}, ${2:string data}, ${3:int change})'
	'void AIScaleCurrentStockArmy':
		prefix: 'AIScaleCurrentStockArmy'
		body: 'AIScaleCurrentStockArmy(${1:int player}, ${2:fixed scale}, ${3:int start}, ${4:int end})'
	'fixed AIGetTime':
		prefix: 'AIGetTime'
		body: 'AIGetTime()'
	'int AIPathingCostMap':
		prefix: 'AIPathingCostMap'
		body: 'AIPathingCostMap(${1:point from}, ${2:point to})'
	'int AIPathingCostUnit':
		prefix: 'AIPathingCostUnit'
		body: 'AIPathingCostUnit(${1:unit u}, ${2:point to}, ${3:bool ignoreEnemyBuildings})'
	'int AIPathDistToNearestKnownEnemyStructure':
		prefix: 'AIPathDistToNearestKnownEnemyStructure'
		body: 'AIPathDistToNearestKnownEnemyStructure(${1:int player}, ${2:point loc}, ${3:bool onlyDropoffs})'
	'int AIPathDistToNearestFriendlyStructure':
		prefix: 'AIPathDistToNearestFriendlyStructure'
		body: 'AIPathDistToNearestFriendlyStructure(${1:int player}, ${2:point loc}, ${3:bool onlyDropoffs})'
	'bool AICanPathToAnyKnownEnemyStructure':
		prefix: 'AICanPathToAnyKnownEnemyStructure'
		body: 'AICanPathToAnyKnownEnemyStructure(${1:int player}, ${2:point loc}, ${3:bool onlyDropoffs})'
	'void AIAddTeamRepresentative':
		prefix: 'AIAddTeamRepresentative'
		body: 'AIAddTeamRepresentative(${1:int inPlayer})'
	'void AITrackUnitDanger':
		prefix: 'AITrackUnitDanger'
		body: 'AITrackUnitDanger(${1:unit inUnit})'
	'point AIPositionAlongPath':
		prefix: 'AIPositionAlongPath'
		body: 'AIPositionAlongPath(${1:int inPlayer}, ${2:point startLoc}, ${3:point destLoc}, ${4:fixed distance}, ${5:bool useDangerMap}, ${6:bool ignoreEnemyBuildings})'
	'int AIGetTotalStartLocs':
		prefix: 'AIGetTotalStartLocs'
		body: 'AIGetTotalStartLocs()'
	'int AIGetGroundStartLocs':
		prefix: 'AIGetGroundStartLocs'
		body: 'AIGetGroundStartLocs(${1:point loc})'
	'int AIGetAirStartLocs':
		prefix: 'AIGetAirStartLocs'
		body: 'AIGetAirStartLocs(${1:point loc})'
	'int AIGetTotalTownLocs':
		prefix: 'AIGetTotalTownLocs'
		body: 'AIGetTotalTownLocs()'
	'int AIGetGroundTownLocs':
		prefix: 'AIGetGroundTownLocs'
		body: 'AIGetGroundTownLocs(${1:point loc})'
	'int AIGetAirTownLocs':
		prefix: 'AIGetAirTownLocs'
		body: 'AIGetAirTownLocs(${1:point loc})'
	'int AIRandomVal':
		prefix: 'AIRandomVal'
		body: 'AIRandomVal(${1:int player}, ${2:int which})'
	'void AINewChooseSubState':
		prefix: 'AINewChooseSubState'
		body: 'AINewChooseSubState(${1:int player}, ${2:int which}, ${3:int min}, ${4:int max}, ${5:int defaultSubState})'
	'void AISetSubStateChance':
		prefix: 'AISetSubStateChance'
		body: 'AISetSubStateChance(${1:int subState}, ${2:int chance})'
	'void AISetSubStateChanceRace':
		prefix: 'AISetSubStateChanceRace'
		body: 'AISetSubStateChanceRace(${1:int subState}, ${2:int randChance}, ${3:int protChance}, ${4:int terrChance}, ${5:int zergChance})'
	'int AIChooseSubState':
		prefix: 'AIChooseSubState'
		body: 'AIChooseSubState()'
	'bool AIWantsMultipleTransport':
		prefix: 'AIWantsMultipleTransport'
		body: 'AIWantsMultipleTransport(${1:int player})'
	'void AISetWantsMultipleTransport':
		prefix: 'AISetWantsMultipleTransport'
		body: 'AISetWantsMultipleTransport(${1:int player}, ${2:bool enable})'
	'int AIGetNumMobileTransports':
		prefix: 'AIGetNumMobileTransports'
		body: 'AIGetNumMobileTransports(${1:int player})'
	'int AINumEnemyBuildings':
		prefix: 'AINumEnemyBuildings'
		body: 'AINumEnemyBuildings(${1:int player})'
	'int AINumEnemyBuildingsOnSharedIslands':
		prefix: 'AINumEnemyBuildingsOnSharedIslands'
		body: 'AINumEnemyBuildingsOnSharedIslands(${1:int player})'
	'int AINumEnemyBuildingsOnOtherIslands':
		prefix: 'AINumEnemyBuildingsOnOtherIslands'
		body: 'AINumEnemyBuildingsOnOtherIslands(${1:int player})'
	'bool AIEnemyBuildingsOnlyOnOtherIslands':
		prefix: 'AIEnemyBuildingsOnlyOnOtherIslands'
		body: 'AIEnemyBuildingsOnlyOnOtherIslands(${1:int player})'
	'point AIGetBestCreepSpot':
		prefix: 'AIGetBestCreepSpot'
		body: 'AIGetBestCreepSpot(${1:int player}, ${2:unit creator}, ${3:fixed createRadius})'
	'void AIAddDetectionDanger':
		prefix: 'AIAddDetectionDanger'
		body: 'AIAddDetectionDanger(${1:int player}, ${2:string unitType})'
	'bool AIDefaultSuspectDetectionDanger':
		prefix: 'AIDefaultSuspectDetectionDanger'
		body: 'AIDefaultSuspectDetectionDanger(${1:int player})'
	'void AIAddAirDanger':
		prefix: 'AIAddAirDanger'
		body: 'AIAddAirDanger(${1:int player}, ${2:string unitType})'
	'bool AIDefaultSuspectAirDanger':
		prefix: 'AIDefaultSuspectAirDanger'
		body: 'AIDefaultSuspectAirDanger(${1:int player})'
	'bool AIAnyWorkersFleeingNearby':
		prefix: 'AIAnyWorkersFleeingNearby'
		body: 'AIAnyWorkersFleeingNearby(${1:int player}, ${2:point loc}, ${3:fixed radius})'
	'int AIGetNumEnemies':
		prefix: 'AIGetNumEnemies'
		body: 'AIGetNumEnemies(${1:int player})'
	'int AIGetNumAllies':
		prefix: 'AIGetNumAllies'
		body: 'AIGetNumAllies(${1:int player})'
	'int AIGetNumTeams':
		prefix: 'AIGetNumTeams'
		body: 'AIGetNumTeams()'
	'int AIGetEnemyRaceVal':
		prefix: 'AIGetEnemyRaceVal'
		body: 'AIGetEnemyRaceVal(${1:int player})'
	'int AIGetSelfRaceVal':
		prefix: 'AIGetSelfRaceVal'
		body: 'AIGetSelfRaceVal(${1:int player})'
	'point AIPlacementNearbyFindTest':
		prefix: 'AIPlacementNearbyFindTest'
		body: 'AIPlacementNearbyFindTest(${1:int player}, ${2:point loc}, ${3:fixed range}, ${4:string unitType})'
	'void AIAddToExtraScoutGroup':
		prefix: 'AIAddToExtraScoutGroup'
		body: 'AIAddToExtraScoutGroup(${1:int player}, ${2:unit u})'
	'bool AIOfferNewScout':
		prefix: 'AIOfferNewScout'
		body: 'AIOfferNewScout(${1:int player}, ${2:unit u})'
	'int AIGetNumWorkers':
		prefix: 'AIGetNumWorkers'
		body: 'AIGetNumWorkers(${1:int player})'
	'int AIGetNumDropoffs':
		prefix: 'AIGetNumDropoffs'
		body: 'AIGetNumDropoffs(${1:int player})'
	'int AIGetNumEstablishedTowns':
		prefix: 'AIGetNumEstablishedTowns'
		body: 'AIGetNumEstablishedTowns(${1:int player})'
	'void AIAddHealer':
		prefix: 'AIAddHealer'
		body: 'AIAddHealer(${1:int player}, ${2:string healer}, ${3:string healAbil}, ${4:int healAbilIdx})'
	'unit AIGetDropoffWithFewestGuards':
		prefix: 'AIGetDropoffWithFewestGuards'
		body: 'AIGetDropoffWithFewestGuards(${1:int player}, ${2:string guardType})'
	'bool AIHasNearbyAttackers':
		prefix: 'AIHasNearbyAttackers'
		body: 'AIHasNearbyAttackers(${1:int player}, ${2:point loc}, ${3:fixed range})'
	'bool AIHasNearbyAlliedAttackers':
		prefix: 'AIHasNearbyAlliedAttackers'
		body: 'AIHasNearbyAlliedAttackers(${1:int player}, ${2:point loc}, ${3:fixed range})'
	'bool AIHasNearbyAlliedDetector':
		prefix: 'AIHasNearbyAlliedDetector'
		body: 'AIHasNearbyAlliedDetector(${1:int player}, ${2:point loc}, ${3:fixed staticRange}, ${4:fixed mobileRange})'
	'point AIGetDirection':
		prefix: 'AIGetDirection'
		body: 'AIGetDirection(${1:point from}, ${2:point to})'
	'void AISetCoopFlag':
		prefix: 'AISetCoopFlag'
		body: 'AISetCoopFlag(${1:int player}, ${2:int index}, ${3:bool state})'
	'bool AIGetCoopFlag':
		prefix: 'AIGetCoopFlag'
		body: 'AIGetCoopFlag(${1:int player}, ${2:int index})'
	'point AIGetBuildingPlacement':
		prefix: 'AIGetBuildingPlacement'
		body: 'AIGetBuildingPlacement(${1:int player}, ${2:point center}, ${3:string aliasUnitType}, ${4:int buildFlags})'
	'bool AIAnyAllyAttacking':
		prefix: 'AIAnyAllyAttacking'
		body: 'AIAnyAllyAttacking(${1:int player})'
	'point AIBestAllyAttackPoint':
		prefix: 'AIBestAllyAttackPoint'
		body: 'AIBestAllyAttackPoint(${1:int player}, ${2:wave w})'
	'bool AIAnyAllyNeedsDefending':
		prefix: 'AIAnyAllyNeedsDefending'
		body: 'AIAnyAllyNeedsDefending(${1:int player}, ${2:wave w})'
	'point AIBestAllyDefendPoint':
		prefix: 'AIBestAllyDefendPoint'
		body: 'AIBestAllyDefendPoint(${1:int player}, ${2:wave w})'
	'void AIGlobalSuicide':
		prefix: 'AIGlobalSuicide'
		body: 'AIGlobalSuicide(${1:int player})'
	'wave AIUnitGetWave':
		prefix: 'AIUnitGetWave'
		body: 'AIUnitGetWave(${1:unit u})'
	'unitgroup AIWaveGetUnits':
		prefix: 'AIWaveGetUnits'
		body: 'AIWaveGetUnits(${1:wave w})'
	'unitgroup AIGetAllEscorts':
		prefix: 'AIGetAllEscorts'
		body: 'AIGetAllEscorts(${1:unit u})'
	'unitgroup AIGetAllEscortsGroup':
		prefix: 'AIGetAllEscortsGroup'
		body: 'AIGetAllEscortsGroup(${1:unitgroup ug})'
	'void AIRemoveUnitFromAnyWaves':
		prefix: 'AIRemoveUnitFromAnyWaves'
		body: 'AIRemoveUnitFromAnyWaves(${1:unit u})'
	'void AIRemoveGroupFromAnyWaves':
		prefix: 'AIRemoveGroupFromAnyWaves'
		body: 'AIRemoveGroupFromAnyWaves(${1:unitgroup ug})'
	'void AIRemoveUnitFromAnyWavesAndSetHome':
		prefix: 'AIRemoveUnitFromAnyWavesAndSetHome'
		body: 'AIRemoveUnitFromAnyWavesAndSetHome(${1:unit u}, ${2:point home})'
	'void AIRemoveGroupFromAnyWavesAndSetHome':
		prefix: 'AIRemoveGroupFromAnyWavesAndSetHome'
		body: 'AIRemoveGroupFromAnyWavesAndSetHome(${1:unitgroup ug}, ${2:point home})'
	'unitgroup AIGetUnitsInWavesWithTarget':
		prefix: 'AIGetUnitsInWavesWithTarget'
		body: 'AIGetUnitsInWavesWithTarget(${1:int player}, ${2:wavetarget target})'
	'bool AIIsScriptControlled':
		prefix: 'AIIsScriptControlled'
		body: 'AIIsScriptControlled(${1:unit u})'
	'void AISetUnitScriptControlled':
		prefix: 'AISetUnitScriptControlled'
		body: 'AISetUnitScriptControlled(${1:unit u}, ${2:bool enable})'
	'void AISetGroupScriptControlled':
		prefix: 'AISetGroupScriptControlled'
		body: 'AISetGroupScriptControlled(${1:unitgroup ug}, ${2:bool enable})'
	'bool AIIsSuicideUnit':
		prefix: 'AIIsSuicideUnit'
		body: 'AIIsSuicideUnit(${1:unit u})'
	'void AISetUnitSuicide':
		prefix: 'AISetUnitSuicide'
		body: 'AISetUnitSuicide(${1:unit u}, ${2:bool enable})'
	'void AISetGroupSuicide':
		prefix: 'AISetGroupSuicide'
		body: 'AISetGroupSuicide(${1:unitgroup ug}, ${2:bool enable})'
	'bool AIIsTacticalDisabled':
		prefix: 'AIIsTacticalDisabled'
		body: 'AIIsTacticalDisabled(${1:unit u})'
	'void AISetUnitTacticalDisabled':
		prefix: 'AISetUnitTacticalDisabled'
		body: 'AISetUnitTacticalDisabled(${1:unit u}, ${2:bool tacticalDisabled})'
	'void AISetGroupTacticalDisabled':
		prefix: 'AISetGroupTacticalDisabled'
		body: 'AISetGroupTacticalDisabled(${1:unitgroup ug}, ${2:bool tacticalDisabled})'
	'bool AIIsObjectGroupUnit':
		prefix: 'AIIsObjectGroupUnit'
		body: 'AIIsObjectGroupUnit(${1:unit u})'
	'bool AIIsNotUsableInWaves':
		prefix: 'AIIsNotUsableInWaves'
		body: 'AIIsNotUsableInWaves(${1:unit u})'
	'void AISetUnitNotUsableInWaves':
		prefix: 'AISetUnitNotUsableInWaves'
		body: 'AISetUnitNotUsableInWaves(${1:unit u}, ${2:bool enable})'
	'void AISetGroupNotUsableInWaves':
		prefix: 'AISetGroupNotUsableInWaves'
		body: 'AISetGroupNotUsableInWaves(${1:unitgroup ug}, ${2:bool enable})'
	'void AISetWantsToUpgrade':
		prefix: 'AISetWantsToUpgrade'
		body: 'AISetWantsToUpgrade(${1:unit u})'
	'void AISetUnitAvoidEnemyGates':
		prefix: 'AISetUnitAvoidEnemyGates'
		body: 'AISetUnitAvoidEnemyGates(${1:unit u}, ${2:bool enable})'
	'void AISetUnitForceMover':
		prefix: 'AISetUnitForceMover'
		body: 'AISetUnitForceMover(${1:unit u}, ${2:bool enable})'
	'void AISetGroupForceMover':
		prefix: 'AISetGroupForceMover'
		body: 'AISetGroupForceMover(${1:unitgroup ug}, ${2:bool enable})'
	'void AIInitCampaignTowns':
		prefix: 'AIInitCampaignTowns'
		body: 'AIInitCampaignTowns(${1:int player})'
	'void AIInitCampaignHarvest':
		prefix: 'AIInitCampaignHarvest'
		body: 'AIInitCampaignHarvest(${1:int player})'
	'void AIDeclareTown':
		prefix: 'AIDeclareTown'
		body: 'AIDeclareTown(${1:int player}, ${2:int town}, ${3:point center})'
	'int AIGetMainTown':
		prefix: 'AIGetMainTown'
		body: 'AIGetMainTown(${1:int player})'
	'void AISetMainTown':
		prefix: 'AISetMainTown'
		body: 'AISetMainTown(${1:int player}, ${2:int maintown})'
	'void AIUpdateMainTown':
		prefix: 'AIUpdateMainTown'
		body: 'AIUpdateMainTown(${1:int player})'
	'bool AIIsTownFull':
		prefix: 'AIIsTownFull'
		body: 'AIIsTownFull(${1:int player}, ${2:int town})'
	'int AIGetTownState':
		prefix: 'AIGetTownState'
		body: 'AIGetTownState(${1:int player}, ${2:int town})'
	'fixed AIGetTownEstablishedTime':
		prefix: 'AIGetTownEstablishedTime'
		body: 'AIGetTownEstablishedTime(${1:int player}, ${2:int town})'
	'point AIGetTownLocation':
		prefix: 'AIGetTownLocation'
		body: 'AIGetTownLocation(${1:int player}, ${2:int town})'
	'int AIGetClosestTown':
		prefix: 'AIGetClosestTown'
		body: 'AIGetClosestTown(${1:int player}, ${2:point location})'
	'int AIGetNextUnusedTownSlot':
		prefix: 'AIGetNextUnusedTownSlot'
		body: 'AIGetNextUnusedTownSlot(${1:int player})'
	'int AIGetBuildingCountInTown':
		prefix: 'AIGetBuildingCountInTown'
		body: 'AIGetBuildingCountInTown(${1:int player}, ${2:int town}, ${3:string aliasUnitType}, ${4:int countMask})'
	'bool AIIsTownHarvestRunning':
		prefix: 'AIIsTownHarvestRunning'
		body: 'AIIsTownHarvestRunning(${1:int player}, ${2:int town})'
	'void AIHarvest':
		prefix: 'AIHarvest'
		body: 'AIHarvest(${1:int player}, ${2:int town})'
	'void AIHarvestRate':
		prefix: 'AIHarvestRate'
		body: 'AIHarvestRate(${1:int player}, ${2:int rate})'
	'void AIHarvestBonus':
		prefix: 'AIHarvestBonus'
		body: 'AIHarvestBonus(${1:int player}, ${2:fixed bonus})'
	'void AISetGasPeonCountOverride':
		prefix: 'AISetGasPeonCountOverride'
		body: 'AISetGasPeonCountOverride(${1:int player}, ${2:int town}, ${3:int desiredGasCount})'
	'int AIGetCurPeonCount':
		prefix: 'AIGetCurPeonCount'
		body: 'AIGetCurPeonCount(${1:int player}, ${2:int town})'
	'int AIGetMinPeonCount':
		prefix: 'AIGetMinPeonCount'
		body: 'AIGetMinPeonCount(${1:int player}, ${2:int town})'
	'int AIGetMaxPeonCount':
		prefix: 'AIGetMaxPeonCount'
		body: 'AIGetMaxPeonCount(${1:int player}, ${2:int town})'
	'int AIGetMineralAmountLeft':
		prefix: 'AIGetMineralAmountLeft'
		body: 'AIGetMineralAmountLeft(${1:int player}, ${2:int town})'
	'int AIGetGasAmountLeft':
		prefix: 'AIGetGasAmountLeft'
		body: 'AIGetGasAmountLeft(${1:int player}, ${2:int town})'
	'int AIGetMineralNumSpots':
		prefix: 'AIGetMineralNumSpots'
		body: 'AIGetMineralNumSpots(${1:int player}, ${2:int town})'
	'int AIGetHarvestableGasNumSpots':
		prefix: 'AIGetHarvestableGasNumSpots'
		body: 'AIGetHarvestableGasNumSpots(${1:int player}, ${2:int town})'
	'int AIGetRawGasNumSpots':
		prefix: 'AIGetRawGasNumSpots'
		body: 'AIGetRawGasNumSpots(${1:int player}, ${2:int town})'
	'point AIGetGatherLocation':
		prefix: 'AIGetGatherLocation'
		body: 'AIGetGatherLocation(${1:int player}, ${2:int town})'
	'point AIGetGatherDefLocation':
		prefix: 'AIGetGatherDefLocation'
		body: 'AIGetGatherDefLocation(${1:int player}, ${2:int town})'
	'int AIExpand':
		prefix: 'AIExpand'
		body: 'AIExpand(${1:int player}, ${2:point searchStart}, ${3:string firstBuilding})'
	'unitgroup AIGetTownThreats':
		prefix: 'AIGetTownThreats'
		body: 'AIGetTownThreats(${1:int player}, ${2:int town})'
	'unit AIGetObstruction':
		prefix: 'AIGetObstruction'
		body: 'AIGetObstruction(${1:int player})'
	'bool AIHasNearbyOpenExpansion':
		prefix: 'AIHasNearbyOpenExpansion'
		body: 'AIHasNearbyOpenExpansion(${1:int player})'
	'void AIScout':
		prefix: 'AIScout'
		body: 'AIScout(${1:int player})'
	'void AISetNumScouts':
		prefix: 'AISetNumScouts'
		body: 'AISetNumScouts(${1:int player}, ${2:int num})'
	'void AISetScoutTimes':
		prefix: 'AISetScoutTimes'
		body: 'AISetScoutTimes(${1:int player}, ${2:int starts}, ${3:int obstructed}, ${4:int resources}, ${5:int other})'
	'point AIGetNextScoutLoc':
		prefix: 'AIGetNextScoutLoc'
		body: 'AIGetNextScoutLoc(${1:int player})'
	'void AIClearCampaignScout':
		prefix: 'AIClearCampaignScout'
		body: 'AIClearCampaignScout(${1:int player})'
	'void AIEarlyDefenseEnable':
		prefix: 'AIEarlyDefenseEnable'
		body: 'AIEarlyDefenseEnable(${1:int player}, ${2:bool enableScouting}, ${3:bool enableDefending})'
	'void AIEarlyDefenseProps':
		prefix: 'AIEarlyDefenseProps'
		body: 'AIEarlyDefenseProps(${1:int player}, ${2:fixed scoutRange}, ${3:fixed peonRange}, ${4:fixed threatRange})'
	'void AIBuild':
		prefix: 'AIBuild'
		body: 'AIBuild(${1:int player}, ${2:int priority}, ${3:int town}, ${4:string aliasUnitType}, ${5:int count}, ${6:int flags})'
	'void AITrain':
		prefix: 'AITrain'
		body: 'AITrain(${1:int player}, ${2:int priority}, ${3:int town}, ${4:string aliasUnitType}, ${5:int count})'
	'void AIResearch':
		prefix: 'AIResearch'
		body: 'AIResearch(${1:int player}, ${2:int priority}, ${3:int town}, ${4:string aliasUpgradeType})'
	'void AIMakeAlways':
		prefix: 'AIMakeAlways'
		body: 'AIMakeAlways(${1:int player}, ${2:int priority}, ${3:int town}, ${4:string aliasType}, ${5:int count})'
	'void AIMakeOnce':
		prefix: 'AIMakeOnce'
		body: 'AIMakeOnce(${1:int player}, ${2:int priority}, ${3:int town}, ${4:string aliasType}, ${5:int count})'
	'void AIClearBuildQueue':
		prefix: 'AIClearBuildQueue'
		body: 'AIClearBuildQueue(${1:int player})'
	'void AIClearTrainQueue':
		prefix: 'AIClearTrainQueue'
		body: 'AIClearTrainQueue(${1:int player})'
	'void AIClearResearchQueue':
		prefix: 'AIClearResearchQueue'
		body: 'AIClearResearchQueue(${1:int player})'
	'int AIGetInternalTrainQueueCount':
		prefix: 'AIGetInternalTrainQueueCount'
		body: 'AIGetInternalTrainQueueCount(${1:int player})'
	'int AIGetInternalBuildQueueCount':
		prefix: 'AIGetInternalBuildQueueCount'
		body: 'AIGetInternalBuildQueueCount(${1:int player})'
	'int AIGetInternalResearchQueueCount':
		prefix: 'AIGetInternalResearchQueueCount'
		body: 'AIGetInternalResearchQueueCount(${1:int player})'
	'bool AIHasRes':
		prefix: 'AIHasRes'
		body: 'AIHasRes(${1:int player}, ${2:int minerals}, ${3:int gas})'
	'int AITechCount':
		prefix: 'AITechCount'
		body: 'AITechCount(${1:int player}, ${2:string aliasType}, ${3:int countMask})'
	'void AITechCountFixupSingle':
		prefix: 'AITechCountFixupSingle'
		body: 'AITechCountFixupSingle(${1:int player}, ${2:string baseUnit}, ${3:string upgradeOne})'
	'void AITechCountFixupEither':
		prefix: 'AITechCountFixupEither'
		body: 'AITechCountFixupEither(${1:int player}, ${2:string baseUnit}, ${3:string upgradeOne}, ${4:string upgradeTwo})'
	'void AITechCountFixupInOrder':
		prefix: 'AITechCountFixupInOrder'
		body: 'AITechCountFixupInOrder(${1:int player}, ${2:string baseUnit}, ${3:string upgradeOne}, ${4:string upgradeTwo})'
	'int AIKnownUnitCount':
		prefix: 'AIKnownUnitCount'
		body: 'AIKnownUnitCount(${1:int player}, ${2:int testPlayerId}, ${3:string aliasUnitType})'
	'void AIResetCounterUnits':
		prefix: 'AIResetCounterUnits'
		body: 'AIResetCounterUnits(${1:int player})'
	'void AICounterUnitSetup':
		prefix: 'AICounterUnitSetup'
		body: 'AICounterUnitSetup(${1:int player}, ${2:string seeWhat}, ${3:fixed factorSameTech}, ${4:string makeWhatSameTech}, ${5:fixed factorAnyTech}, ${6:string makeWhatAnyTech})'
	'int AICounterUnitsSameTech':
		prefix: 'AICounterUnitsSameTech'
		body: 'AICounterUnitsSameTech(${1:int player}, ${2:int testPlayerId}, ${3:string makeWhat})'
	'int AICounterUnitsSameTechAdjusted':
		prefix: 'AICounterUnitsSameTechAdjusted'
		body: 'AICounterUnitsSameTechAdjusted(${1:int player}, ${2:int testPlayerId}, ${3:string makeWhat})'
	'int AICounterUnitsAnyTech':
		prefix: 'AICounterUnitsAnyTech'
		body: 'AICounterUnitsAnyTech(${1:int player}, ${2:int testPlayerId}, ${3:string makeWhat})'
	'fixed AIFoodCost':
		prefix: 'AIFoodCost'
		body: 'AIFoodCost(${1:int player}, ${2:string aliasUnitType})'
	'point AIGetRallyPoint':
		prefix: 'AIGetRallyPoint'
		body: 'AIGetRallyPoint(${1:unit u})'
	'void AISetDefaultArmyUnit':
		prefix: 'AISetDefaultArmyUnit'
		body: 'AISetDefaultArmyUnit(${1:int player}, ${2:string unitType})'
	'void AISetDefaultTownHall':
		prefix: 'AISetDefaultTownHall'
		body: 'AISetDefaultTownHall(${1:int player}, ${2:string building})'
	'void AISetPowerBuilding':
		prefix: 'AISetPowerBuilding'
		body: 'AISetPowerBuilding(${1:int player}, ${2:string building})'
	'void AISetCreepBuilding':
		prefix: 'AISetCreepBuilding'
		body: 'AISetCreepBuilding(${1:int player}, ${2:string building}, ${3:string noCreepBehavior})'
	'void AIForceTrainingDelay':
		prefix: 'AIForceTrainingDelay'
		body: 'AIForceTrainingDelay(${1:int player}, ${2:int workerDelay}, ${3:int armyDelay}, ${4:int defenseDelay})'
	'void AIClearStock':
		prefix: 'AIClearStock'
		body: 'AIClearStock(${1:int player})'
	'void AIEnableStock':
		prefix: 'AIEnableStock'
		body: 'AIEnableStock(${1:int player})'
	'void AISetStockEx':
		prefix: 'AISetStockEx'
		body: 'AISetStockEx(${1:int player}, ${2:int town}, ${3:int count}, ${4:string aliasType}, ${5:int buildFlags}, ${6:int stockFlags})'
	'void AISetStock':
		prefix: 'AISetStock'
		body: 'AISetStock(${1:int player}, ${2:int count}, ${3:string aliasType})'
	'void AISetStockOpt':
		prefix: 'AISetStockOpt'
		body: 'AISetStockOpt(${1:int player}, ${2:int count}, ${3:string aliasType})'
	'void AISetStockUnitNext':
		prefix: 'AISetStockUnitNext'
		body: 'AISetStockUnitNext(${1:int player}, ${2:int count}, ${3:string aliasUnitType}, ${4:bool when})'
	'bool AISetStockTown':
		prefix: 'AISetStockTown'
		body: 'AISetStockTown(${1:int player}, ${2:string aliasUnitTypeTH}, ${3:string aliasUnitTypeGas})'
	'bool AISetStockExpand':
		prefix: 'AISetStockExpand'
		body: 'AISetStockExpand(${1:int player}, ${2:string aliasUnitTypeTH}, ${3:int count})'
	'void AISetStockExtra':
		prefix: 'AISetStockExtra'
		body: 'AISetStockExtra(${1:int player}, ${2:int count}, ${3:string aliasUnitType}, ${4:int minerals})'
	'void AISetStockFarms':
		prefix: 'AISetStockFarms'
		body: 'AISetStockFarms(${1:int player}, ${2:string aliasUnitType}, ${3:bool onlyNeeded})'
	'void AISetStockPeons':
		prefix: 'AISetStockPeons'
		body: 'AISetStockPeons(${1:int player}, ${2:int max}, ${3:string aliasUnitType}, ${4:bool onlyMinPeons}, ${5:bool peonMode})'
	'void AINewTechStock':
		prefix: 'AINewTechStock'
		body: 'AINewTechStock(${1:int player})'
	'void AITechStockAdd':
		prefix: 'AITechStockAdd'
		body: 'AITechStockAdd(${1:string upgradeType})'
	'void AISetStockTechNext':
		prefix: 'AISetStockTechNext'
		body: 'AISetStockTechNext(${1:int player})'
	'void AISetStockTechNextUnCap':
		prefix: 'AISetStockTechNextUnCap'
		body: 'AISetStockTechNextUnCap(${1:int player}, ${2:int unCapMinerals}, ${3:int unCapGas})'
	'void AIDefaultExpansion':
		prefix: 'AIDefaultExpansion'
		body: 'AIDefaultExpansion(${1:int player}, ${2:string hall}, ${3:int minerals}, ${4:int gas}, ${5:int expandFlags})'
	'void AIClearLimitTech':
		prefix: 'AIClearLimitTech'
		body: 'AIClearLimitTech(${1:int player})'
	'void AILimitTech':
		prefix: 'AILimitTech'
		body: 'AILimitTech(${1:int player}, ${2:int totalMin}, ${3:int totalGas}, ${4:int buildingMin}, ${5:int buildingGas}, ${6:int upgradeMin}, ${7:int upgradeGas})'
	'void AIImportantTech':
		prefix: 'AIImportantTech'
		body: 'AIImportantTech(${1:int player}, ${2:string aliasType})'
	'void AILimitStockLarva':
		prefix: 'AILimitStockLarva'
		body: 'AILimitStockLarva(${1:int player}, ${2:string aliasType})'
	'bool AIHasStock':
		prefix: 'AIHasStock'
		body: 'AIHasStock(${1:int player})'
	'bool AIHasStockFromTown':
		prefix: 'AIHasStockFromTown'
		body: 'AIHasStockFromTown(${1:int player}, ${2:int town})'
	'void AIRemoveStockFromTown':
		prefix: 'AIRemoveStockFromTown'
		body: 'AIRemoveStockFromTown(${1:int player}, ${2:int town})'
	'int AIDefaultGetObjectType':
		prefix: 'AIDefaultGetObjectType'
		body: 'AIDefaultGetObjectType(${1:int player}, ${2:string aliasType})'
	'string AIDefaultGetMaker':
		prefix: 'AIDefaultGetMaker'
		body: 'AIDefaultGetMaker(${1:int player}, ${2:string aliasType})'
	'string AIDefaultGetFirstMissingReq':
		prefix: 'AIDefaultGetFirstMissingReq'
		body: 'AIDefaultGetFirstMissingReq(${1:int player}, ${2:string aliasType})'
	'string AIDefaultGetFirstUnfinishedReq':
		prefix: 'AIDefaultGetFirstUnfinishedReq'
		body: 'AIDefaultGetFirstUnfinishedReq(${1:int player}, ${2:string aliasType})'
	'int AIDefaultGetFullMakeTime':
		prefix: 'AIDefaultGetFullMakeTime'
		body: 'AIDefaultGetFullMakeTime(${1:int player}, ${2:string aliasType})'
	'string AIGetBaseName':
		prefix: 'AIGetBaseName'
		body: 'AIGetBaseName(${1:string aliasType})'
	'string AIGetBuildAtName':
		prefix: 'AIGetBuildAtName'
		body: 'AIGetBuildAtName(${1:string aliasType})'
	'void AIReqCountAsBuiltObject':
		prefix: 'AIReqCountAsBuiltObject'
		body: 'AIReqCountAsBuiltObject(${1:int player}, ${2:string aliasType})'
	'void AIReqAddSpecialMaker':
		prefix: 'AIReqAddSpecialMaker'
		body: 'AIReqAddSpecialMaker(${1:string objType}, ${2:string makerType}, ${3:string abilName}, ${4:int abilIndex})'
	'void AIBaseThink':
		prefix: 'AIBaseThink'
		body: 'AIBaseThink(${1:unit who}, ${2:unitgroup candidates})'
	'bool AIEvalTacticalData':
		prefix: 'AIEvalTacticalData'
		body: 'AIEvalTacticalData(${1:unit who}, ${2:string data})'
	'int AICast':
		prefix: 'AICast'
		body: 'AICast(${1:unit u}, ${2:order o}, ${3:marker m}, ${4:bool retreat})'
	'int AICastFlee':
		prefix: 'AICastFlee'
		body: 'AICastFlee(${1:unit who}, ${2:unit from}, ${3:int distance}, ${4:marker mark})'
	'int AICastCooldown':
		prefix: 'AICastCooldown'
		body: 'AICastCooldown(${1:unit u}, ${2:order o}, ${3:marker m}, ${4:bool retreat}, ${5:int timerIdx}, ${6:fixed cooldown})'
	'int AISetCooldown':
		prefix: 'AISetCooldown'
		body: 'AISetCooldown(${1:unit u}, ${2:int timerIdx}, ${3:fixed cooldown})'
	'bool AITactCooldownAllow':
		prefix: 'AITactCooldownAllow'
		body: 'AITactCooldownAllow(${1:unit u}, ${2:int timerIdx})'
	'void AICooldownSetupAbil':
		prefix: 'AICooldownSetupAbil'
		body: 'AICooldownSetupAbil(${1:string unitType}, ${2:string abilName}, ${3:int difficulty}, ${4:bool enabled}, ${5:fixed cooldown})'
	'int AICastCooldownAbil':
		prefix: 'AICastCooldownAbil'
		body: 'AICastCooldownAbil(${1:unit u}, ${2:order o}, ${3:marker m}, ${4:bool retreat}, ${5:string abilName})'
	'int AISetCooldownAbil':
		prefix: 'AISetCooldownAbil'
		body: 'AISetCooldownAbil(${1:unit u}, ${2:string abilName})'
	'bool AITactCooldownAllowAbil':
		prefix: 'AITactCooldownAllowAbil'
		body: 'AITactCooldownAllowAbil(${1:unit u}, ${2:string abilName})'
	'bool AINearbyUnits':
		prefix: 'AINearbyUnits'
		body: 'AINearbyUnits(${1:int player}, ${2:string unitType}, ${3:point p}, ${4:fixed range}, ${5:int requiredCount})'
	'unitgroup AIFindUnits':
		prefix: 'AIFindUnits'
		body: 'AIFindUnits(${1:int player}, ${2:string unitType}, ${3:point p}, ${4:fixed range}, ${5:int inMaxCount})'
	'bool AISameCommand':
		prefix: 'AISameCommand'
		body: 'AISameCommand(${1:unit u1}, ${2:unit u2})'
	'unit AILastAttacker':
		prefix: 'AILastAttacker'
		body: 'AILastAttacker(${1:unit u})'
	'int AILastAttack':
		prefix: 'AILastAttack'
		body: 'AILastAttack(${1:unit u})'
	'bool AIControlWantsToMove':
		prefix: 'AIControlWantsToMove'
		body: 'AIControlWantsToMove(${1:unit u})'
	'bool AIControlForceToMove':
		prefix: 'AIControlForceToMove'
		body: 'AIControlForceToMove(${1:unit u})'
	'bool AIControlWantsToUnburrow':
		prefix: 'AIControlWantsToUnburrow'
		body: 'AIControlWantsToUnburrow(${1:unit u})'
	'bool AIControlWantsToBurrow':
		prefix: 'AIControlWantsToBurrow'
		body: 'AIControlWantsToBurrow(${1:unit u})'
	'bool AIControlForceUnburrow':
		prefix: 'AIControlForceUnburrow'
		body: 'AIControlForceUnburrow(${1:unit u})'
	'bool AIUnitIsInCombat':
		prefix: 'AIUnitIsInCombat'
		body: 'AIUnitIsInCombat(${1:unit u})'
	'bool AIIsIgnoredByWave':
		prefix: 'AIIsIgnoredByWave'
		body: 'AIIsIgnoredByWave(${1:unit u})'
	'void AISetIgnoredByWave':
		prefix: 'AISetIgnoredByWave'
		body: 'AISetIgnoredByWave(${1:unit u}, ${2:bool enable})'
	'point AIGetHomePosition':
		prefix: 'AIGetHomePosition'
		body: 'AIGetHomePosition(${1:unit u})'
	'point AIGetCloakedAttacker':
		prefix: 'AIGetCloakedAttacker'
		body: 'AIGetCloakedAttacker(${1:int p})'
	'void AIClearCloakedAttacker':
		prefix: 'AIClearCloakedAttacker'
		body: 'AIClearCloakedAttacker(${1:int p}, ${2:point pt})'
	'bool AISawCloakedUnit':
		prefix: 'AISawCloakedUnit'
		body: 'AISawCloakedUnit(${1:int p})'
	'point AISelfReinforceDropPoint':
		prefix: 'AISelfReinforceDropPoint'
		body: 'AISelfReinforceDropPoint(${1:int player})'
	'point AIRandomSpawnPoint':
		prefix: 'AIRandomSpawnPoint'
		body: 'AIRandomSpawnPoint(${1:int player}, ${2:region r}, ${3:fixed minDistFromEnemy}, ${4:fixed maxDistFromEnemy}, ${5:fixed maxDistFromBuilding})'
	'point AIBestTargetPoint':
		prefix: 'AIBestTargetPoint'
		body: 'AIBestTargetPoint(${1:unitgroup group}, ${2:int minHits}, ${3:int damageBase}, ${4:fixed minScore}, ${5:fixed radius}, ${6:point from}, ${7:fixed range}, ${8:int bonusAttri})'
	'unit AIDefaultCombatPriority':
		prefix: 'AIDefaultCombatPriority'
		body: 'AIDefaultCombatPriority(${1:unitgroup attackers}, ${2:unitgroup enemies}, ${3:int maxAttackerLimit})'
	'bool AICloakEvaluate':
		prefix: 'AICloakEvaluate'
		body: 'AICloakEvaluate(${1:unit u}, ${2:fixed minEnergy}, ${3:fixed maxLife}, ${4:fixed range})'
	'void AIForceTacticalDelay':
		prefix: 'AIForceTacticalDelay'
		body: 'AIForceTacticalDelay(${1:int player}, ${2:int delay})'
	'void AISetMaxBestAttackersLimit':
		prefix: 'AISetMaxBestAttackersLimit'
		body: 'AISetMaxBestAttackersLimit(${1:int player}, ${2:int limit})'
	'bool AICombatDiffFlagCatSpecialHighPrio':
		prefix: 'AICombatDiffFlagCatSpecialHighPrio'
		body: 'AICombatDiffFlagCatSpecialHighPrio(${1:int player}, ${2:int action})'
	'bool AICombatDiffFlagCatSplashHighPrio':
		prefix: 'AICombatDiffFlagCatSplashHighPrio'
		body: 'AICombatDiffFlagCatSplashHighPrio(${1:int player}, ${2:int action})'
	'bool AICombatDiffFlagCatTimedLowPrio':
		prefix: 'AICombatDiffFlagCatTimedLowPrio'
		body: 'AICombatDiffFlagCatTimedLowPrio(${1:int player}, ${2:int action})'
	'bool AICombatDiffFlagCatWorkersNormalPrio':
		prefix: 'AICombatDiffFlagCatWorkersNormalPrio'
		body: 'AICombatDiffFlagCatWorkersNormalPrio(${1:int player}, ${2:int action})'
	'bool AICombatDiffFlagCatSortBuildingsPrio':
		prefix: 'AICombatDiffFlagCatSortBuildingsPrio'
		body: 'AICombatDiffFlagCatSortBuildingsPrio(${1:int player}, ${2:int action})'
	'bool AICombatDiffFlagTieBreakHealers':
		prefix: 'AICombatDiffFlagTieBreakHealers'
		body: 'AICombatDiffFlagTieBreakHealers(${1:int player}, ${2:int action})'
	'bool AICombatDiffFlagTieBreakBonusDamage':
		prefix: 'AICombatDiffFlagTieBreakBonusDamage'
		body: 'AICombatDiffFlagTieBreakBonusDamage(${1:int player}, ${2:int action})'
	'bool AICombatDiffFlagTieBreakLowHP':
		prefix: 'AICombatDiffFlagTieBreakLowHP'
		body: 'AICombatDiffFlagTieBreakLowHP(${1:int player}, ${2:int action})'
	'bool AICombatDiffFlagTieBreakInjured':
		prefix: 'AICombatDiffFlagTieBreakInjured'
		body: 'AICombatDiffFlagTieBreakInjured(${1:int player}, ${2:int action})'
	'bool AICombatDiffFlagTieBreakDetector':
		prefix: 'AICombatDiffFlagTieBreakDetector'
		body: 'AICombatDiffFlagTieBreakDetector(${1:int player}, ${2:int action})'
	'bool AICombatDiffFlagTieBreakRange':
		prefix: 'AICombatDiffFlagTieBreakRange'
		body: 'AICombatDiffFlagTieBreakRange(${1:int player}, ${2:int action})'
	'void AISetSpawnerTargettingDelay':
		prefix: 'AISetSpawnerTargettingDelay'
		body: 'AISetSpawnerTargettingDelay(${1:int player}, ${2:string behaviorName}, ${3:int count})'
	'void AITransportIgnore':
		prefix: 'AITransportIgnore'
		body: 'AITransportIgnore(${1:int player}, ${2:string unitType})'
	'void AITransportSetPanic':
		prefix: 'AITransportSetPanic'
		body: 'AITransportSetPanic(${1:int player}, ${2:fixed value})'
	'void AITransportSetReturn':
		prefix: 'AITransportSetReturn'
		body: 'AITransportSetReturn(${1:int player}, ${2:point center})'
	'void AITransportDisableAutoPickup':
		prefix: 'AITransportDisableAutoPickup'
		body: 'AITransportDisableAutoPickup(${1:int player})'
	'void AISetDefenseRadii':
		prefix: 'AISetDefenseRadii'
		body: 'AISetDefenseRadii(${1:int player}, ${2:fixed maxThreatRange}, ${3:fixed buildingCallRange}, ${4:fixed threatCallRange})'
	'waveinfo AIWaveInfoCreate':
		prefix: 'AIWaveInfoCreate'
		body: 'AIWaveInfoCreate()'
	'waveinfo AIWaveInfo':
		prefix: 'AIWaveInfo'
		body: 'AIWaveInfo(${1:wave w})'
	'void AIWaveInfoAdd':
		prefix: 'AIWaveInfoAdd'
		body: 'AIWaveInfoAdd(${1:waveinfo info}, ${2:string unitType}, ${3:int count})'
	'int AIWaveInfoAttack':
		prefix: 'AIWaveInfoAttack'
		body: 'AIWaveInfoAttack(${1:waveinfo info}, ${2:int player}, ${3:point from}, ${4:wavetarget target}, ${5:int time})'
	'int AIWaveInfoSuicide':
		prefix: 'AIWaveInfoSuicide'
		body: 'AIWaveInfoSuicide(${1:waveinfo info}, ${2:int player}, ${3:point from}, ${4:wavetarget target}, ${5:int time})'
	'int AIWaveInfoScout':
		prefix: 'AIWaveInfoScout'
		body: 'AIWaveInfoScout(${1:waveinfo info}, ${2:int player}, ${3:point from}, ${4:int time})'
	'string AIWaveToString':
		prefix: 'AIWaveToString'
		body: 'AIWaveToString(${1:wave w})'
	'text AIWaveToText':
		prefix: 'AIWaveToText'
		body: 'AIWaveToText(${1:wave w})'
	'wave AIWaveCreate':
		prefix: 'AIWaveCreate'
		body: 'AIWaveCreate(${1:waveinfo info}, ${2:int player}, ${3:point from})'
	'void AIWaveAddUnit':
		prefix: 'AIWaveAddUnit'
		body: 'AIWaveAddUnit(${1:wave w}, ${2:unit u})'
	'void AIWaveAddUnitPriority':
		prefix: 'AIWaveAddUnitPriority'
		body: 'AIWaveAddUnitPriority(${1:wave w}, ${2:unit u}, ${3:int prio})'
	'void AIWaveRemoveUnit':
		prefix: 'AIWaveRemoveUnit'
		body: 'AIWaveRemoveUnit(${1:wave w}, ${2:unit u})'
	'int AIWaveUnitCount':
		prefix: 'AIWaveUnitCount'
		body: 'AIWaveUnitCount(${1:wave w})'
	'int AIWaveDetectorCount':
		prefix: 'AIWaveDetectorCount'
		body: 'AIWaveDetectorCount(${1:wave w})'
	'void AIWaveSetType':
		prefix: 'AIWaveSetType'
		body: 'AIWaveSetType(${1:wave w}, ${2:int type}, ${3:wavetarget target})'
	'int AIWaveState':
		prefix: 'AIWaveState'
		body: 'AIWaveState(${1:wave w})'
	'point AIWaveGoal':
		prefix: 'AIWaveGoal'
		body: 'AIWaveGoal(${1:wave w})'
	'unit AIWaveCurrentLeader':
		prefix: 'AIWaveCurrentLeader'
		body: 'AIWaveCurrentLeader(${1:wave w})'
	'void AIWaveDelete':
		prefix: 'AIWaveDelete'
		body: 'AIWaveDelete(${1:wave w})'
	'wavetarget AIWaveTargetUnit':
		prefix: 'AIWaveTargetUnit'
		body: 'AIWaveTargetUnit(${1:unit u})'
	'wavetarget AIWaveTargetUnitGroup':
		prefix: 'AIWaveTargetUnitGroup'
		body: 'AIWaveTargetUnitGroup(${1:unitgroup g})'
	'wavetarget AIWaveTargetUnitPoint':
		prefix: 'AIWaveTargetUnitPoint'
		body: 'AIWaveTargetUnitPoint(${1:unit u})'
	'wavetarget AIWaveTargetPoint':
		prefix: 'AIWaveTargetPoint'
		body: 'AIWaveTargetPoint(${1:point p})'
	'wavetarget AIWaveTargetPlayer':
		prefix: 'AIWaveTargetPlayer'
		body: 'AIWaveTargetPlayer(${1:playergroup players})'
	'wavetarget AIWaveTargetMelee':
		prefix: 'AIWaveTargetMelee'
		body: 'AIWaveTargetMelee(${1:int player})'
	'wavetarget AIWaveTargetMeleeBeacon':
		prefix: 'AIWaveTargetMeleeBeacon'
		body: 'AIWaveTargetMeleeBeacon(${1:int player})'
	'wavetarget AIWaveTargetMeleeHarass':
		prefix: 'AIWaveTargetMeleeHarass'
		body: 'AIWaveTargetMeleeHarass(${1:int player})'
	'wavetarget AIWaveTargetMeleeDrop':
		prefix: 'AIWaveTargetMeleeDrop'
		body: 'AIWaveTargetMeleeDrop(${1:int player}, ${2:point dropLoc}, ${3:point goalLoc})'
	'wavetarget AIWaveTargetMeleeDefend':
		prefix: 'AIWaveTargetMeleeDefend'
		body: 'AIWaveTargetMeleeDefend(${1:int player})'
	'wavetarget AIWaveTargetMerge':
		prefix: 'AIWaveTargetMerge'
		body: 'AIWaveTargetMerge(${1:wave w})'
	'wavetarget AIWaveTargetPatrol':
		prefix: 'AIWaveTargetPatrol'
		body: 'AIWaveTargetPatrol(${1:int replaceType})'
	'wavetarget AIWaveTargetEscort':
		prefix: 'AIWaveTargetEscort'
		body: 'AIWaveTargetEscort(${1:unitgroup g}, ${2:int replaceType})'
	'wavetarget AIWaveTargetEscortNL':
		prefix: 'AIWaveTargetEscortNL'
		body: 'AIWaveTargetEscortNL(${1:unitgroup g}, ${2:int replaceType})'
	'wavetarget AIWaveTargetGatherO':
		prefix: 'AIWaveTargetGatherO'
		body: 'AIWaveTargetGatherO(${1:int player}, ${2:int town})'
	'wavetarget AIWaveTargetGatherD':
		prefix: 'AIWaveTargetGatherD'
		body: 'AIWaveTargetGatherD(${1:int player}, ${2:int town})'
	'wavetarget AIWaveTargetRegion':
		prefix: 'AIWaveTargetRegion'
		body: 'AIWaveTargetRegion(${1:region r}, ${2:int replaceType})'
	'wavetarget AIWaveTargetGuardHomeUnit':
		prefix: 'AIWaveTargetGuardHomeUnit'
		body: 'AIWaveTargetGuardHomeUnit(${1:unit u})'
	'wavetarget AIWaveTargetGatherMelee':
		prefix: 'AIWaveTargetGatherMelee'
		body: 'AIWaveTargetGatherMelee(${1:int player})'
	'point AIWaveTargetGatherOPoint':
		prefix: 'AIWaveTargetGatherOPoint'
		body: 'AIWaveTargetGatherOPoint(${1:int player}, ${2:int town})'
	'point AIWaveTargetGatherDPoint':
		prefix: 'AIWaveTargetGatherDPoint'
		body: 'AIWaveTargetGatherDPoint(${1:int player}, ${2:int town})'
	'unit AIWaveTargetGetUnit':
		prefix: 'AIWaveTargetGetUnit'
		body: 'AIWaveTargetGetUnit(${1:wavetarget wt})'
	'unitgroup AIWaveTargetGetUnitGroup':
		prefix: 'AIWaveTargetGetUnitGroup'
		body: 'AIWaveTargetGetUnitGroup(${1:wavetarget wt})'
	'wavetarget AIWaveHarassRetreat':
		prefix: 'AIWaveHarassRetreat'
		body: 'AIWaveHarassRetreat(${1:int player}, ${2:wave w}, ${3:fixed range})'
	'wavetarget AIWaveGetTarget':
		prefix: 'AIWaveGetTarget'
		body: 'AIWaveGetTarget(${1:wave w})'
	'bool AIWaveIsInCombat':
		prefix: 'AIWaveIsInCombat'
		body: 'AIWaveIsInCombat(${1:wave w})'
	'int AIWaveGetTimeInCombat':
		prefix: 'AIWaveGetTimeInCombat'
		body: 'AIWaveGetTimeInCombat(${1:wave w})'
	'int AIWaveGetTimeSinceCombat':
		prefix: 'AIWaveGetTimeSinceCombat'
		body: 'AIWaveGetTimeSinceCombat(${1:wave w})'
	'int AIWaveGetTimeSinceOrdered':
		prefix: 'AIWaveGetTimeSinceOrdered'
		body: 'AIWaveGetTimeSinceOrdered(${1:wave w})'
	'int AIWaveGetTimeSinceRetreat':
		prefix: 'AIWaveGetTimeSinceRetreat'
		body: 'AIWaveGetTimeSinceRetreat(${1:wave w})'
	'bool AIShouldHelpUserAlly':
		prefix: 'AIShouldHelpUserAlly'
		body: 'AIShouldHelpUserAlly(${1:int player}, ${2:wave w})'
	'point AIGetBestUserAllyHelpLocation':
		prefix: 'AIGetBestUserAllyHelpLocation'
		body: 'AIGetBestUserAllyHelpLocation(${1:int player}, ${2:wave w})'
	'bool AIDefenseThreat':
		prefix: 'AIDefenseThreat'
		body: 'AIDefenseThreat(${1:int type}, ${2:int player}, ${3:wave w})'
	'int AISelfDefenseThreatEval':
		prefix: 'AISelfDefenseThreatEval'
		body: 'AISelfDefenseThreatEval(${1:int type}, ${2:int player})'
	'int AIWaveEval':
		prefix: 'AIWaveEval'
		body: 'AIWaveEval(${1:wave w})'
	'int AIWaveEvalRatio':
		prefix: 'AIWaveEvalRatio'
		body: 'AIWaveEvalRatio(${1:wave w}, ${2:fixed range})'
	'int AIUnitAreaEvalRatio':
		prefix: 'AIUnitAreaEvalRatio'
		body: 'AIUnitAreaEvalRatio(${1:unit u}, ${2:fixed range})'
	'int AIEvalRatio':
		prefix: 'AIEvalRatio'
		body: 'AIEvalRatio(${1:int player})'
	'void AIEvalSetCustomIndex':
		prefix: 'AIEvalSetCustomIndex'
		body: 'AIEvalSetCustomIndex(${1:int index})'
	'int AIEvalAllSelf':
		prefix: 'AIEvalAllSelf'
		body: 'AIEvalAllSelf(${1:int player})'
	'int AIEvalAllAllied':
		prefix: 'AIEvalAllAllied'
		body: 'AIEvalAllAllied(${1:int player})'
	'int AIEvalLargestEnemy':
		prefix: 'AIEvalLargestEnemy'
		body: 'AIEvalLargestEnemy(${1:int player})'
	'int AILastWaveEvalStaticRatio':
		prefix: 'AILastWaveEvalStaticRatio'
		body: 'AILastWaveEvalStaticRatio()'
	'void AIWaveTargetAddWaypoint':
		prefix: 'AIWaveTargetAddWaypoint'
		body: 'AIWaveTargetAddWaypoint(${1:wavetarget wt}, ${2:point waypoint}, ${3:bool useTransport}, ${4:int index})'
	'void AIWaveTargetClearWaypoints':
		prefix: 'AIWaveTargetClearWaypoints'
		body: 'AIWaveTargetClearWaypoints(${1:wavetarget wt})'
	'wave AIWaveGet':
		prefix: 'AIWaveGet'
		body: 'AIWaveGet(${1:int player}, ${2:int waveName})'
	'void AIWaveSet':
		prefix: 'AIWaveSet'
		body: 'AIWaveSet(${1:int player}, ${2:int waveName}, ${3:wave waveRef})'
	'int AIWaveType':
		prefix: 'AIWaveType'
		body: 'AIWaveType(${1:wave waveRef})'
	'void AIWaveSetUserData':
		prefix: 'AIWaveSetUserData'
		body: 'AIWaveSetUserData(${1:wave waveRef}, ${2:int index}, ${3:int data})'
	'int AIWaveGetUserData':
		prefix: 'AIWaveGetUserData'
		body: 'AIWaveGetUserData(${1:wave waveRef}, ${2:int index})'
	'void AIWaveSetDeleteWhenEmpty':
		prefix: 'AIWaveSetDeleteWhenEmpty'
		body: 'AIWaveSetDeleteWhenEmpty(${1:wave waveRef}, ${2:bool turnOnDeleteWhenEmpty})'
	'void AIWaveMerge':
		prefix: 'AIWaveMerge'
		body: 'AIWaveMerge(${1:int player}, ${2:int waveFrom}, ${3:int waveInto})'
	'void AIWaveMergeMelee':
		prefix: 'AIWaveMergeMelee'
		body: 'AIWaveMergeMelee(${1:int player})'
	'wave WaveLastCreated':
		prefix: 'WaveLastCreated'
		body: 'WaveLastCreated()'
	'point AIGetBestTarget':
		prefix: 'AIGetBestTarget'
		body: 'AIGetBestTarget(${1:int player}, ${2:playergroup enemies}, ${3:point gatherPoint}, ${4:int flags})'
	'bool AIFindDropAttackTarget':
		prefix: 'AIFindDropAttackTarget'
		body: 'AIFindDropAttackTarget(${1:int player}, ${2:point gatherPoint})'
	'point AILastDropLocation':
		prefix: 'AILastDropLocation'
		body: 'AILastDropLocation()'
	'point AILastDropGoal':
		prefix: 'AILastDropGoal'
		body: 'AILastDropGoal()'
	'fixed AIGetNextDropTimeCheck':
		prefix: 'AIGetNextDropTimeCheck'
		body: 'AIGetNextDropTimeCheck(${1:int player})'
	'void AISetNextDropTimeCheck':
		prefix: 'AISetNextDropTimeCheck'
		body: 'AISetNextDropTimeCheck(${1:int player}, ${2:fixed time})'
	'int AILastAttackRatio':
		prefix: 'AILastAttackRatio'
		body: 'AILastAttackRatio(${1:wave w})'
	'int AILastAttackStartEval':
		prefix: 'AILastAttackStartEval'
		body: 'AILastAttackStartEval(${1:wave w})'
	'void AIDefaultMeleeSplitArmyToDefend':
		prefix: 'AIDefaultMeleeSplitArmyToDefend'
		body: 'AIDefaultMeleeSplitArmyToDefend(${1:int player}, ${2:wave attack}, ${3:int indexDefense})'
	'void AIAttackWaveAddUnits':
		prefix: 'AIAttackWaveAddUnits'
		body: 'AIAttackWaveAddUnits(${1:int difficulty}, ${2:int count}, ${3:string unitType})'
	'void AIAttackWaveCancel':
		prefix: 'AIAttackWaveCancel'
		body: 'AIAttackWaveCancel(${1:wave waveRef})'
	'void AIAttackWaveSetGatherPoint':
		prefix: 'AIAttackWaveSetGatherPoint'
		body: 'AIAttackWaveSetGatherPoint(${1:int player}, ${2:point gather})'
	'void AIAttackWaveUseUnit':
		prefix: 'AIAttackWaveUseUnit'
		body: 'AIAttackWaveUseUnit(${1:int player}, ${2:unit u})'
	'void AIAttackWaveUseGroup':
		prefix: 'AIAttackWaveUseGroup'
		body: 'AIAttackWaveUseGroup(${1:int player}, ${2:unitgroup ug})'
	'void AIAttackWaveAddEscortUnit':
		prefix: 'AIAttackWaveAddEscortUnit'
		body: 'AIAttackWaveAddEscortUnit(${1:int player}, ${2:unit u}, ${3:unit escort}, ${4:fixed offset}, ${5:fixed angle})'
	'void AIAttackWaveAddEscortType':
		prefix: 'AIAttackWaveAddEscortType'
		body: 'AIAttackWaveAddEscortType(${1:int player}, ${2:string unitType}, ${3:unit escort}, ${4:fixed offset}, ${5:fixed angle})'
	'void AIAttackWaveSetTargetUnit':
		prefix: 'AIAttackWaveSetTargetUnit'
		body: 'AIAttackWaveSetTargetUnit(${1:int player}, ${2:unit u})'
	'void AIAttackWaveSetTargetUnitGroup':
		prefix: 'AIAttackWaveSetTargetUnitGroup'
		body: 'AIAttackWaveSetTargetUnitGroup(${1:int player}, ${2:unitgroup ug})'
	'void AIAttackWaveSetTargetUnitPoint':
		prefix: 'AIAttackWaveSetTargetUnitPoint'
		body: 'AIAttackWaveSetTargetUnitPoint(${1:int player}, ${2:unit u})'
	'void AIAttackWaveSetTargetPoint':
		prefix: 'AIAttackWaveSetTargetPoint'
		body: 'AIAttackWaveSetTargetPoint(${1:int player}, ${2:point p})'
	'void AIAttackWaveSetTargetPlayer':
		prefix: 'AIAttackWaveSetTargetPlayer'
		body: 'AIAttackWaveSetTargetPlayer(${1:int player}, ${2:playergroup players})'
	'void AIAttackWaveSetTargetMelee':
		prefix: 'AIAttackWaveSetTargetMelee'
		body: 'AIAttackWaveSetTargetMelee(${1:int player})'
	'void AIAttackWaveSetTargetMeleeHarass':
		prefix: 'AIAttackWaveSetTargetMeleeHarass'
		body: 'AIAttackWaveSetTargetMeleeHarass(${1:int player})'
	'void AIAttackWaveSetTargetMeleeDrop':
		prefix: 'AIAttackWaveSetTargetMeleeDrop'
		body: 'AIAttackWaveSetTargetMeleeDrop(${1:int player}, ${2:point dropLoc}, ${3:point goalLoc})'
	'void AIAttackWaveSetTargetMeleeDefend':
		prefix: 'AIAttackWaveSetTargetMeleeDefend'
		body: 'AIAttackWaveSetTargetMeleeDefend(${1:int player})'
	'void AIAttackWaveSetTargetMerge':
		prefix: 'AIAttackWaveSetTargetMerge'
		body: 'AIAttackWaveSetTargetMerge(${1:int player}, ${2:wave w})'
	'void AIAttackWaveSetTargetPatrol':
		prefix: 'AIAttackWaveSetTargetPatrol'
		body: 'AIAttackWaveSetTargetPatrol(${1:int player}, ${2:int replaceType})'
	'void AIAttackWaveSetTargetEscort':
		prefix: 'AIAttackWaveSetTargetEscort'
		body: 'AIAttackWaveSetTargetEscort(${1:int player}, ${2:unitgroup g}, ${3:int replaceType})'
	'void AIAttackWaveSetTargetEscortNL':
		prefix: 'AIAttackWaveSetTargetEscortNL'
		body: 'AIAttackWaveSetTargetEscortNL(${1:int player}, ${2:unitgroup g}, ${3:int replaceType})'
	'void AIAttackWaveSetTargetGatherO':
		prefix: 'AIAttackWaveSetTargetGatherO'
		body: 'AIAttackWaveSetTargetGatherO(${1:int player}, ${2:int town})'
	'void AIAttackWaveSetTargetGatherD':
		prefix: 'AIAttackWaveSetTargetGatherD'
		body: 'AIAttackWaveSetTargetGatherD(${1:int player}, ${2:int town})'
	'void AIAttackWaveSetTargetRegion':
		prefix: 'AIAttackWaveSetTargetRegion'
		body: 'AIAttackWaveSetTargetRegion(${1:int player}, ${2:region r}, ${3:int replaceType})'
	'void AIAttackWaveSetGatherEarlyNoReplace':
		prefix: 'AIAttackWaveSetGatherEarlyNoReplace'
		body: 'AIAttackWaveSetGatherEarlyNoReplace(${1:int player})'
	'void AIAttackWaveSetKeepAlive':
		prefix: 'AIAttackWaveSetKeepAlive'
		body: 'AIAttackWaveSetKeepAlive(${1:int player})'
	'void AIAttackWaveAddWaypoint':
		prefix: 'AIAttackWaveAddWaypoint'
		body: 'AIAttackWaveAddWaypoint(${1:int player}, ${2:point waypoint}, ${3:bool useTransport})'
	'void AIAttackWaveClearWaypoints':
		prefix: 'AIAttackWaveClearWaypoints'
		body: 'AIAttackWaveClearWaypoints(${1:int player})'
	'void AISetMinimumBullyCount':
		prefix: 'AISetMinimumBullyCount'
		body: 'AISetMinimumBullyCount(${1:int count}, ${2:string unitType}, ${3:int player})'
	'void AISetGeneralRebuildCount':
		prefix: 'AISetGeneralRebuildCount'
		body: 'AISetGeneralRebuildCount(${1:int count}, ${2:bool building}, ${3:int player})'
	'void AISetSpecificRebuildCount':
		prefix: 'AISetSpecificRebuildCount'
		body: 'AISetSpecificRebuildCount(${1:int count}, ${2:string unitType}, ${3:int player})'
	'void AISetBullyRebuildDelay':
		prefix: 'AISetBullyRebuildDelay'
		body: 'AISetBullyRebuildDelay(${1:fixed minDelay}, ${2:fixed maxDelay}, ${3:int player})'
	'void AISetBullyAttackWavePercent':
		prefix: 'AISetBullyAttackWavePercent'
		body: 'AISetBullyAttackWavePercent(${1:int percent}, ${2:int player})'
	'void AINearestTownLimitWaveGather':
		prefix: 'AINearestTownLimitWaveGather'
		body: 'AINearestTownLimitWaveGather(${1:int player}, ${2:bool enable})'
	'void AINearestTownBullyRebuild':
		prefix: 'AINearestTownBullyRebuild'
		body: 'AINearestTownBullyRebuild(${1:int player}, ${2:bool enable})'
	'void AIToggleBulliesInRegion':
		prefix: 'AIToggleBulliesInRegion'
		body: 'AIToggleBulliesInRegion(${1:int player}, ${2:region reg}, ${3:bool activate})'
	'void AIResetBullyRebuildCountsInRegion':
		prefix: 'AIResetBullyRebuildCountsInRegion'
		body: 'AIResetBullyRebuildCountsInRegion(${1:int player}, ${2:region reg})'
	'void AIClearAllBullies':
		prefix: 'AIClearAllBullies'
		body: 'AIClearAllBullies(${1:int player})'
	'void AIAddBully':
		prefix: 'AIAddBully'
		body: 'AIAddBully(${1:int player}, ${2:string unitType}, ${3:point loc}, ${4:int rebuildCount})'
	'string AIGetBullyType':
		prefix: 'AIGetBullyType'
		body: 'AIGetBullyType(${1:unit u})'
	'void AILaneWaypointClearAll':
		prefix: 'AILaneWaypointClearAll'
		body: 'AILaneWaypointClearAll()'
	'void AILaneWaypointAdd':
		prefix: 'AILaneWaypointAdd'
		body: 'AILaneWaypointAdd(${1:int lane}, ${2:point waypoint})'
	'int AILaneWaypointGetClosestLane':
		prefix: 'AILaneWaypointGetClosestLane'
		body: 'AILaneWaypointGetClosestLane(${1:point testPoint})'
	'point AILaneWaypointGetWaypointPosWithOffset':
		prefix: 'AILaneWaypointGetWaypointPosWithOffset'
		body: 'AILaneWaypointGetWaypointPosWithOffset(${1:int lane}, ${2:int waypoint}, ${3:fixed offset})'
	'fixed AILaneWaypointConvertPointToWaydist':
		prefix: 'AILaneWaypointConvertPointToWaydist'
		body: 'AILaneWaypointConvertPointToWaydist(${1:int lane}, ${2:int closestWaypoint}, ${3:int secondWaypoint}, ${4:point closestPoint})'
	'point AILaneWaypointConvertWaydistOffsetToPoint':
		prefix: 'AILaneWaypointConvertWaydistOffsetToPoint'
		body: 'AILaneWaypointConvertWaydistOffsetToPoint(${1:int lane}, ${2:fixed waydist}, ${3:fixed offset})'
	'void AILaneWaypointCalcClosestDataForLane':
		prefix: 'AILaneWaypointCalcClosestDataForLane'
		body: 'AILaneWaypointCalcClosestDataForLane(${1:int testLane}, ${2:point testPoint})'
	'int AILaneWaypointGetCalcDataClosestWaypointIndex':
		prefix: 'AILaneWaypointGetCalcDataClosestWaypointIndex'
		body: 'AILaneWaypointGetCalcDataClosestWaypointIndex()'
	'int AILaneWaypointGetCalcDataSecondWaypointIndex':
		prefix: 'AILaneWaypointGetCalcDataSecondWaypointIndex'
		body: 'AILaneWaypointGetCalcDataSecondWaypointIndex()'
	'point AILaneWaypointGetCalcDataClosestPoint':
		prefix: 'AILaneWaypointGetCalcDataClosestPoint'
		body: 'AILaneWaypointGetCalcDataClosestPoint()'
	'fixed AILaneWaypointGetCalcDataClosestDist':
		prefix: 'AILaneWaypointGetCalcDataClosestDist'
		body: 'AILaneWaypointGetCalcDataClosestDist()'
	'void libLbty_gf_PingPlay':
		prefix: 'libLbty_gf_PingPlay'
		body: 'libLbty_gf_PingPlay(${1:int lp_pingType}, ${2:int lp_player}, ${3:point lp_pingLocation}, ${4:int lp_gameUser}, ${5:string lp_pingTargetType}, ${6:point lp_pingTargetPosition}, ${7:int lp_pingTargetOwner})'
	'void libLbty_gf_PingPlayUnit':
		prefix: 'libLbty_gf_PingPlayUnit'
		body: 'libLbty_gf_PingPlayUnit(${1:string lp_pingTargetType}, ${2:point lp_pingTargetPosition}, ${3:int lp_pingTargetOwner}, ${4:int lp_player}, ${5:int lp_gameUser})'
	'void libLbty_gf_PingBeaconAdd':
		prefix: 'libLbty_gf_PingBeaconAdd'
		body: 'libLbty_gf_PingBeaconAdd(${1:string lp_beaconEffect}, ${2:point lp_location}, ${3:int lp_player})'
	'void libLbty_gf_PingMinimapButtonUpdate':
		prefix: 'libLbty_gf_PingMinimapButtonUpdate'
		body: 'libLbty_gf_PingMinimapButtonUpdate()'
	'void libLbty_gf_EnableDisablePingPanel':
		prefix: 'libLbty_gf_EnableDisablePingPanel'
		body: 'libLbty_gf_EnableDisablePingPanel(${1:bool lp_enableDisable}, ${2:playergroup lp_players})'
	'void libLbty_gf_MeleeSurrender_AIWantToSurrender':
		prefix: 'libLbty_gf_MeleeSurrender_AIWantToSurrender'
		body: 'libLbty_gf_MeleeSurrender_AIWantToSurrender(${1:int lp_player})'
	'void libLbty_gf_MeleeSurrender_UpdateDialogs':
		prefix: 'libLbty_gf_MeleeSurrender_UpdateDialogs'
		body: 'libLbty_gf_MeleeSurrender_UpdateDialogs()'
	'point libLbty_gf_ValidatedPoint':
		prefix: 'libLbty_gf_ValidatedPoint'
		body: 'libLbty_gf_ValidatedPoint(${1:point lp_point})'
	'void libLbty_gf_PlayAnnouncerNumberSound':
		prefix: 'libLbty_gf_PlayAnnouncerNumberSound'
		body: 'libLbty_gf_PlayAnnouncerNumberSound(${1:int lp_number}, ${2:playergroup lp_players}, ${3:fixed lp_volume})'
	'void libLbty_gf_PlayTransmissionCueSound':
		prefix: 'libLbty_gf_PlayTransmissionCueSound'
		body: 'libLbty_gf_PlayTransmissionCueSound(${1:playergroup lp_playerGroup})'
	'void libLbty_gf_SetAllSoundChannelVolumesStandardTiming':
		prefix: 'libLbty_gf_SetAllSoundChannelVolumesStandardTiming'
		body: 'libLbty_gf_SetAllSoundChannelVolumesStandardTiming(${1:int lp_mode}, ${2:playergroup lp_players})'
	'void libLbty_gf_OrderWorkerstoGatherNearbyResources':
		prefix: 'libLbty_gf_OrderWorkerstoGatherNearbyResources'
		body: 'libLbty_gf_OrderWorkerstoGatherNearbyResources(${1:region lp_region}, ${2:int lp_player})'
	'void libLbty_gf_OrderTransporttoUnloadAllthenDespawn':
		prefix: 'libLbty_gf_OrderTransporttoUnloadAllthenDespawn'
		body: 'libLbty_gf_OrderTransporttoUnloadAllthenDespawn(${1:unit lp_transport}, ${2:point lp_targetPoint}, ${3:point lp_despawnPoint})'
	'void libLbty_gf_AutoRevealRegion':
		prefix: 'libLbty_gf_AutoRevealRegion'
		body: 'libLbty_gf_AutoRevealRegion(${1:region lp_visibilityRegion}, ${2:region lp_triggeringRegion}, ${3:int lp_player})'
	'int libHots_gf_DifficultyValueInt2':
		prefix: 'libHots_gf_DifficultyValueInt2'
		body: 'libHots_gf_DifficultyValueInt2(${1:int lp_easy}, ${2:int lp_normal}, ${3:int lp_hard})'
	'fixed libHots_gf_DifficultyValueFixed2':
		prefix: 'libHots_gf_DifficultyValueFixed2'
		body: 'libHots_gf_DifficultyValueFixed2(${1:fixed lp_easy}, ${2:fixed lp_normal}, ${3:fixed lp_hard})'
	'string libHots_gf_DifficultyValueSwarmUnitType':
		prefix: 'libHots_gf_DifficultyValueSwarmUnitType'
		body: 'libHots_gf_DifficultyValueSwarmUnitType(${1:string lp_easy}, ${2:string lp_normal}, ${3:string lp_hard})'
	'bool libHots_gf_DifficultyValueSwarmBoolean':
		prefix: 'libHots_gf_DifficultyValueSwarmBoolean'
		body: 'libHots_gf_DifficultyValueSwarmBoolean(${1:bool lp_easy}, ${2:bool lp_normal}, ${3:bool lp_hard})'
	'string libHots_gf__UnitDataName':
		prefix: 'libHots_gf__UnitDataName'
		body: 'libHots_gf__UnitDataName(${1:int lp_type}, ${2:unit lp_unit}, ${3:int lp_index})'
	'void libHots_gf_StoreActorForUnit':
		prefix: 'libHots_gf_StoreActorForUnit'
		body: 'libHots_gf_StoreActorForUnit(${1:unit lp_unit}, ${2:int lp_index}, ${3:actor lp_actor})'
	'actor libHots_gf_ActorForUnit':
		prefix: 'libHots_gf_ActorForUnit'
		body: 'libHots_gf_ActorForUnit(${1:unit lp_unit}, ${2:int lp_index})'
	'void libHots_gf_StoreTextTagForUnit':
		prefix: 'libHots_gf_StoreTextTagForUnit'
		body: 'libHots_gf_StoreTextTagForUnit(${1:unit lp_unit}, ${2:int lp_index}, ${3:int lp_textTag})'
	'int libHots_gf_TextTagForUnit':
		prefix: 'libHots_gf_TextTagForUnit'
		body: 'libHots_gf_TextTagForUnit(${1:unit lp_unit}, ${2:int lp_index})'
	'void libHots_gf_StorePointForUnit':
		prefix: 'libHots_gf_StorePointForUnit'
		body: 'libHots_gf_StorePointForUnit(${1:unit lp_unit}, ${2:int lp_index}, ${3:point lp_point})'
	'point libHots_gf_PointStoredForUnit':
		prefix: 'libHots_gf_PointStoredForUnit'
		body: 'libHots_gf_PointStoredForUnit(${1:unit lp_unit}, ${2:int lp_index})'
	'void libHots_gf_StorePingForUnit':
		prefix: 'libHots_gf_StorePingForUnit'
		body: 'libHots_gf_StorePingForUnit(${1:unit lp_unit}, ${2:int lp_index}, ${3:int lp_ping})'
	'int libHots_gf_PingStoredForUnit':
		prefix: 'libHots_gf_PingStoredForUnit'
		body: 'libHots_gf_PingStoredForUnit(${1:unit lp_unit}, ${2:int lp_index})'
	'void libHots_gf_PlaySoundLinkasMusic':
		prefix: 'libHots_gf_PlaySoundLinkasMusic'
		body: 'libHots_gf_PlaySoundLinkasMusic(${1:soundlink lp_soundLink}, ${2:bool lp_loopForever}, ${3:bool lp_unpauseSountrackAfter})'
	'void libHots_gf_StopSoundLinkCurrentlyPlayingasMusic':
		prefix: 'libHots_gf_StopSoundLinkCurrentlyPlayingasMusic'
		body: 'libHots_gf_StopSoundLinkCurrentlyPlayingasMusic()'
	'int libLotv_gf_DifficultyValueInt2':
		prefix: 'libLotv_gf_DifficultyValueInt2'
		body: 'libLotv_gf_DifficultyValueInt2(${1:int lp_casual}, ${2:int lp_normal}, ${3:int lp_hard}, ${4:int lp_brutal})'
	'fixed libLotv_gf_DifficultyValueFixed2':
		prefix: 'libLotv_gf_DifficultyValueFixed2'
		body: 'libLotv_gf_DifficultyValueFixed2(${1:fixed lp_casual}, ${2:fixed lp_normal}, ${3:fixed lp_hard}, ${4:fixed lp_brutal})'
	'string libLotv_gf_DifficultyValueVoidUnitType':
		prefix: 'libLotv_gf_DifficultyValueVoidUnitType'
		body: 'libLotv_gf_DifficultyValueVoidUnitType(${1:string lp_casual}, ${2:string lp_normal}, ${3:string lp_hard}, ${4:string lp_brutal})'
	'bool libLotv_gf_DifficultyValueVoidBoolean':
		prefix: 'libLotv_gf_DifficultyValueVoidBoolean'
		body: 'libLotv_gf_DifficultyValueVoidBoolean(${1:bool lp_casual}, ${2:bool lp_normal}, ${3:bool lp_hard}, ${4:bool lp_brutal})'
